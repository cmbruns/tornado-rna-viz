package sstructview.kb;import java.util.*;import java.lang.*;public class SetAndSequenceKB extends SetKB {/* 	Data structure to implement a sequence of objects that can be	organized into hierarchical, typed groups.		Groups are identified by a unique string	Sequence elements are identified by their unique position in the sequence*/	Vector seq = new Vector();	Vector objs = new Vector();		public void addElementToSeq(String name, Object obj, int pos) {		if (seq.size() <= (pos + 1)) {			seq.setSize(pos + 1);		}		seq.setElementAt(name, pos);		if (objs.size() <= (pos + 1)) {			objs.setSize(pos + 1);		}		objs.setElementAt(obj, pos);	}		public String getElementAt(int pos) {		return (String)seq.elementAt(pos);	}			public Object getObjectAt(int pos) {		return objs.elementAt(pos);	}			public String getNextInSeq(String name) {		int pos = seq.indexOf(name);		if (pos == -1) {			return null;		} else if ((pos+1) == seq.size()) {			return null; // last in sequence		} else {			return (String)seq.elementAt(pos + 1);		}	}		public String getPrevInSeq(String name) {		int pos = seq.indexOf(name);		if (pos == -1) {			return null;		} else if (pos == 0) {			return null; // first in sequence		} else {			return (String)seq.elementAt(pos - 1);		}	}		public int indexOf(String name) {		return seq.indexOf(name);	}			public Vector getRange(String obj1, String obj2) {		Vector v = null;		if ((obj1 == null) || (obj2 == null)) {			return null;		}		return getRange(indexOf(obj1),indexOf(obj2));	}		public Vector getRange(int index1, int index2) {		Vector v = null;		if (index1 < index2) {			v = new Vector(index2 - index1 + 1);			for (int i = index1 ; i <= index2 ; i++) {				v.addElement(getElementAt(i));			}		} else if (index1 >= index2) {			v = new Vector(index1 - index2 + 1);			for (int i = index2 ; i <= index1 ; i++) {				v.addElement(getElementAt(i));			}		}				return v;	}	public Vector getRangeObjects(String obj1, String obj2) {		Vector v = null;		if ((obj1 == null) || (obj2 == null)) {			return null;		}		return getRangeObjects(indexOf(obj1),indexOf(obj2));	}		public Vector getRangeObjects(int index1, int index2) {		Vector v = null;		if (index1 < index2) {			v = new Vector(index2 - index1 + 1);			for (int i = index1 ; i <= index2 ; i++) {				v.addElement(objs.elementAt(i));			}		} else if (index1 >= index2) {			v = new Vector(index1 - index2 + 1);			for (int i = index2 ; i <= index1 ; i++) {				v.addElement(objs.elementAt(i));			}		}		return v;	}	}