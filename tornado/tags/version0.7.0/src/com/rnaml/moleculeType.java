/**
 * moleculeType.java
 *
 * This file was generated by XMLSpy 2006r3 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSpy Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.rnaml;

import com.altova.types.*;

public class moleculeType extends com.altova.xml.Node {

	public moleculeType(moleculeType node) {
		super(node);
	}

	public moleculeType(org.w3c.dom.Node node) {
		super(node);
	}

	public moleculeType(org.w3c.dom.Document doc) {
		super(doc);
	}

	public moleculeType(com.altova.xml.Document doc, String namespaceURI, String prefix, String name) {
		super(doc, namespaceURI, prefix, name);
	}
	
	public void adjustPrefix() {
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "id" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "id", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "type" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "type", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "comment" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "comment", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "reference-ids" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "reference-ids", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "analysis-ids" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "analysis-ids", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "database-ids" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "database-ids", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "identity" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "identity", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new identityType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "sequence" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "sequence", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new sequenceType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "structure" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "structure", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new structureType(tmpNode).adjustPrefix();
		}
	}

	public static int getidMinCount() {
		return 1;
	}

	public static int getidMaxCount() {
		return 1;
	}

	public int getidCount() {
		return getDomChildCount(Attribute, null, "id");
	}

	public boolean hasid() {
		return hasDomChild(Attribute, null, "id");
	}

	public SchemaNMToken newid() {
		return new SchemaNMToken();
	}

	public SchemaNMToken getidAt(int index) throws Exception {
		return new SchemaNMToken(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "id", index))));
	}

	public org.w3c.dom.Node getStartingidCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "id" );
	}

	public org.w3c.dom.Node getAdvancedidCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "id", curNode );
	}

	public SchemaNMToken getidValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaNMToken(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaNMToken getid() throws Exception 
 {
		return getidAt(0);
	}

	public void removeidAt(int index) {
		removeDomChildAt(Attribute, null, "id", index);
	}

	public void removeid() {
		while (hasid())
			removeidAt(0);
	}

	public void addid(SchemaNMToken value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "id", value.toString());
		}
	}

	public void addid(String value) throws Exception {
		addid(new SchemaNMToken(value));
	}

	public void insertidAt(SchemaNMToken value, int index) {
		insertDomChildAt(Attribute, null, "id", index, value.toString());
	}

	public void insertidAt(String value, int index) throws Exception {
		insertidAt(new SchemaNMToken(value), index);
	}

	public void replaceidAt(SchemaNMToken value, int index) {
		replaceDomChildAt(Attribute, null, "id", index, value.toString());
	}

	public void replaceidAt(String value, int index) throws Exception {
		replaceidAt(new SchemaNMToken(value), index);
	}

	public static int gettypeMinCount() {
		return 0;
	}

	public static int gettypeMaxCount() {
		return 1;
	}

	public int gettypeCount() {
		return getDomChildCount(Attribute, null, "type");
	}

	public boolean hastype() {
		return hasDomChild(Attribute, null, "type");
	}

	public EnumerationType newtype() {
		return new EnumerationType();
	}

	public EnumerationType gettypeAt(int index) throws Exception {
		return new EnumerationType(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "type", index))));
	}

	public org.w3c.dom.Node getStartingtypeCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "type" );
	}

	public org.w3c.dom.Node getAdvancedtypeCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "type", curNode );
	}

	public EnumerationType gettypeValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new EnumerationType(getDomNodeValue( dereference(curNode) ) );
	}

	public EnumerationType gettype() throws Exception 
 {
		return gettypeAt(0);
	}

	public void removetypeAt(int index) {
		removeDomChildAt(Attribute, null, "type", index);
	}

	public void removetype() {
		while (hastype())
			removetypeAt(0);
	}

	public void addtype(EnumerationType value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "type", value.toString());
		}
	}

	public void addtype(String value) throws Exception {
		addtype(new EnumerationType(value));
	}

	public void inserttypeAt(EnumerationType value, int index) {
		insertDomChildAt(Attribute, null, "type", index, value.toString());
	}

	public void inserttypeAt(String value, int index) throws Exception {
		inserttypeAt(new EnumerationType(value), index);
	}

	public void replacetypeAt(EnumerationType value, int index) {
		replaceDomChildAt(Attribute, null, "type", index, value.toString());
	}

	public void replacetypeAt(String value, int index) throws Exception {
		replacetypeAt(new EnumerationType(value), index);
	}

	public static int getcommentMinCount() {
		return 0;
	}

	public static int getcommentMaxCount() {
		return 1;
	}

	public int getcommentCount() {
		return getDomChildCount(Attribute, null, "comment");
	}

	public boolean hascomment() {
		return hasDomChild(Attribute, null, "comment");
	}

	public SchemaString newcomment() {
		return new SchemaString();
	}

	public SchemaString getcommentAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "comment", index))));
	}

	public org.w3c.dom.Node getStartingcommentCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "comment" );
	}

	public org.w3c.dom.Node getAdvancedcommentCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "comment", curNode );
	}

	public SchemaString getcommentValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaString(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaString getcomment() throws Exception 
 {
		return getcommentAt(0);
	}

	public void removecommentAt(int index) {
		removeDomChildAt(Attribute, null, "comment", index);
	}

	public void removecomment() {
		while (hascomment())
			removecommentAt(0);
	}

	public void addcomment(SchemaString value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "comment", value.toString());
		}
	}

	public void addcomment(String value) throws Exception {
		addcomment(new SchemaString(value));
	}

	public void insertcommentAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "comment", index, value.toString());
	}

	public void insertcommentAt(String value, int index) throws Exception {
		insertcommentAt(new SchemaString(value), index);
	}

	public void replacecommentAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "comment", index, value.toString());
	}

	public void replacecommentAt(String value, int index) throws Exception {
		replacecommentAt(new SchemaString(value), index);
	}

	public static int getreference_idsMinCount() {
		return 0;
	}

	public static int getreference_idsMaxCount() {
		return 1;
	}

	public int getreference_idsCount() {
		return getDomChildCount(Attribute, null, "reference-ids");
	}

	public boolean hasreference_ids() {
		return hasDomChild(Attribute, null, "reference-ids");
	}

	public SchemaIDRef newreference_ids() {
		return new SchemaIDRef();
	}

	public SchemaIDRef getreference_idsAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "reference-ids", index))));
	}

	public org.w3c.dom.Node getStartingreference_idsCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "reference-ids" );
	}

	public org.w3c.dom.Node getAdvancedreference_idsCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "reference-ids", curNode );
	}

	public SchemaIDRef getreference_idsValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaIDRef(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaIDRef getreference_ids() throws Exception 
 {
		return getreference_idsAt(0);
	}

	public void removereference_idsAt(int index) {
		removeDomChildAt(Attribute, null, "reference-ids", index);
	}

	public void removereference_ids() {
		while (hasreference_ids())
			removereference_idsAt(0);
	}

	public void addreference_ids(SchemaIDRef value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "reference-ids", value.toString());
		}
	}

	public void addreference_ids(String value) throws Exception {
		addreference_ids(new SchemaIDRef(value));
	}

	public void insertreference_idsAt(SchemaIDRef value, int index) {
		insertDomChildAt(Attribute, null, "reference-ids", index, value.toString());
	}

	public void insertreference_idsAt(String value, int index) throws Exception {
		insertreference_idsAt(new SchemaIDRef(value), index);
	}

	public void replacereference_idsAt(SchemaIDRef value, int index) {
		replaceDomChildAt(Attribute, null, "reference-ids", index, value.toString());
	}

	public void replacereference_idsAt(String value, int index) throws Exception {
		replacereference_idsAt(new SchemaIDRef(value), index);
	}

	public static int getanalysis_idsMinCount() {
		return 0;
	}

	public static int getanalysis_idsMaxCount() {
		return 1;
	}

	public int getanalysis_idsCount() {
		return getDomChildCount(Attribute, null, "analysis-ids");
	}

	public boolean hasanalysis_ids() {
		return hasDomChild(Attribute, null, "analysis-ids");
	}

	public SchemaIDRef newanalysis_ids() {
		return new SchemaIDRef();
	}

	public SchemaIDRef getanalysis_idsAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "analysis-ids", index))));
	}

	public org.w3c.dom.Node getStartinganalysis_idsCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "analysis-ids" );
	}

	public org.w3c.dom.Node getAdvancedanalysis_idsCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "analysis-ids", curNode );
	}

	public SchemaIDRef getanalysis_idsValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaIDRef(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaIDRef getanalysis_ids() throws Exception 
 {
		return getanalysis_idsAt(0);
	}

	public void removeanalysis_idsAt(int index) {
		removeDomChildAt(Attribute, null, "analysis-ids", index);
	}

	public void removeanalysis_ids() {
		while (hasanalysis_ids())
			removeanalysis_idsAt(0);
	}

	public void addanalysis_ids(SchemaIDRef value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "analysis-ids", value.toString());
		}
	}

	public void addanalysis_ids(String value) throws Exception {
		addanalysis_ids(new SchemaIDRef(value));
	}

	public void insertanalysis_idsAt(SchemaIDRef value, int index) {
		insertDomChildAt(Attribute, null, "analysis-ids", index, value.toString());
	}

	public void insertanalysis_idsAt(String value, int index) throws Exception {
		insertanalysis_idsAt(new SchemaIDRef(value), index);
	}

	public void replaceanalysis_idsAt(SchemaIDRef value, int index) {
		replaceDomChildAt(Attribute, null, "analysis-ids", index, value.toString());
	}

	public void replaceanalysis_idsAt(String value, int index) throws Exception {
		replaceanalysis_idsAt(new SchemaIDRef(value), index);
	}

	public static int getdatabase_idsMinCount() {
		return 0;
	}

	public static int getdatabase_idsMaxCount() {
		return 1;
	}

	public int getdatabase_idsCount() {
		return getDomChildCount(Attribute, null, "database-ids");
	}

	public boolean hasdatabase_ids() {
		return hasDomChild(Attribute, null, "database-ids");
	}

	public SchemaIDRef newdatabase_ids() {
		return new SchemaIDRef();
	}

	public SchemaIDRef getdatabase_idsAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "database-ids", index))));
	}

	public org.w3c.dom.Node getStartingdatabase_idsCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "database-ids" );
	}

	public org.w3c.dom.Node getAdvanceddatabase_idsCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "database-ids", curNode );
	}

	public SchemaIDRef getdatabase_idsValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaIDRef(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaIDRef getdatabase_ids() throws Exception 
 {
		return getdatabase_idsAt(0);
	}

	public void removedatabase_idsAt(int index) {
		removeDomChildAt(Attribute, null, "database-ids", index);
	}

	public void removedatabase_ids() {
		while (hasdatabase_ids())
			removedatabase_idsAt(0);
	}

	public void adddatabase_ids(SchemaIDRef value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "database-ids", value.toString());
		}
	}

	public void adddatabase_ids(String value) throws Exception {
		adddatabase_ids(new SchemaIDRef(value));
	}

	public void insertdatabase_idsAt(SchemaIDRef value, int index) {
		insertDomChildAt(Attribute, null, "database-ids", index, value.toString());
	}

	public void insertdatabase_idsAt(String value, int index) throws Exception {
		insertdatabase_idsAt(new SchemaIDRef(value), index);
	}

	public void replacedatabase_idsAt(SchemaIDRef value, int index) {
		replaceDomChildAt(Attribute, null, "database-ids", index, value.toString());
	}

	public void replacedatabase_idsAt(String value, int index) throws Exception {
		replacedatabase_idsAt(new SchemaIDRef(value), index);
	}

	public static int getidentityMinCount() {
		return 0;
	}

	public static int getidentityMaxCount() {
		return 1;
	}

	public int getidentityCount() {
		return getDomChildCount(Element, null, "identity");
	}

	public boolean hasidentity() {
		return hasDomChild(Element, null, "identity");
	}

	public identityType newidentity() {
		return new identityType(domNode.getOwnerDocument().createElementNS(null, "identity"));
	}

	public identityType getidentityAt(int index) throws Exception {
		return new identityType(dereference(getDomChildAt(Element, null, "identity", index)));
	}

	public org.w3c.dom.Node getStartingidentityCursor() throws Exception {
		return getDomFirstChild(Element, null, "identity" );
	}

	public org.w3c.dom.Node getAdvancedidentityCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "identity", curNode );
	}

	public identityType getidentityValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new identityType( dereference(curNode) );
	}

	public identityType getidentity() throws Exception 
 {
		return getidentityAt(0);
	}

	public void removeidentityAt(int index) {
		removeDomChildAt(Element, null, "identity", index);
	}

	public void removeidentity() {
		while (hasidentity())
			removeidentityAt(0);
	}

	public void addidentity(identityType value) {
		appendDomElement(null, "identity", value);	
	}

	public void insertidentityAt(identityType value, int index) {
		insertDomElementAt(null, "identity", index, value);
	}

	public void replaceidentityAt(identityType value, int index) {
		replaceDomElementAt(null, "identity", index, value);
	}

	public static int getsequenceMinCount() {
		return 0;
	}

	public static int getsequenceMaxCount() {
		return 1;
	}

	public int getsequenceCount() {
		return getDomChildCount(Element, null, "sequence");
	}

	public boolean hassequence() {
		return hasDomChild(Element, null, "sequence");
	}

	public sequenceType newsequence() {
		return new sequenceType(domNode.getOwnerDocument().createElementNS(null, "sequence"));
	}

	public sequenceType getsequenceAt(int index) throws Exception {
		return new sequenceType(dereference(getDomChildAt(Element, null, "sequence", index)));
	}

	public org.w3c.dom.Node getStartingsequenceCursor() throws Exception {
		return getDomFirstChild(Element, null, "sequence" );
	}

	public org.w3c.dom.Node getAdvancedsequenceCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "sequence", curNode );
	}

	public sequenceType getsequenceValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new sequenceType( dereference(curNode) );
	}

	public sequenceType getsequence() throws Exception 
 {
		return getsequenceAt(0);
	}

	public void removesequenceAt(int index) {
		removeDomChildAt(Element, null, "sequence", index);
	}

	public void removesequence() {
		while (hassequence())
			removesequenceAt(0);
	}

	public void addsequence(sequenceType value) {
		appendDomElement(null, "sequence", value);	
	}

	public void insertsequenceAt(sequenceType value, int index) {
		insertDomElementAt(null, "sequence", index, value);
	}

	public void replacesequenceAt(sequenceType value, int index) {
		replaceDomElementAt(null, "sequence", index, value);
	}

	public static int getstructureMinCount() {
		return 0;
	}

	public static int getstructureMaxCount() {
		return 1;
	}

	public int getstructureCount() {
		return getDomChildCount(Element, null, "structure");
	}

	public boolean hasstructure() {
		return hasDomChild(Element, null, "structure");
	}

	public structureType newstructure() {
		return new structureType(domNode.getOwnerDocument().createElementNS(null, "structure"));
	}

	public structureType getstructureAt(int index) throws Exception {
		return new structureType(dereference(getDomChildAt(Element, null, "structure", index)));
	}

	public org.w3c.dom.Node getStartingstructureCursor() throws Exception {
		return getDomFirstChild(Element, null, "structure" );
	}

	public org.w3c.dom.Node getAdvancedstructureCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "structure", curNode );
	}

	public structureType getstructureValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new structureType( dereference(curNode) );
	}

	public structureType getstructure() throws Exception 
 {
		return getstructureAt(0);
	}

	public void removestructureAt(int index) {
		removeDomChildAt(Element, null, "structure", index);
	}

	public void removestructure() {
		while (hasstructure())
			removestructureAt(0);
	}

	public void addstructure(structureType value) {
		appendDomElement(null, "structure", value);	
	}

	public void insertstructureAt(structureType value, int index) {
		insertDomElementAt(null, "structure", index, value);
	}

	public void replacestructureAt(structureType value, int index) {
		replaceDomElementAt(null, "structure", index, value);
	}

	private org.w3c.dom.Node dereference(org.w3c.dom.Node node) {
		return node;
	}
}
