/**
 * base_torsion_anglesType.java
 *
 * This file was generated by XMLSpy 2006r3 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSpy Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.rnaml;

import com.altova.types.*;

public class base_torsion_anglesType extends com.altova.xml.Node {

	public base_torsion_anglesType(base_torsion_anglesType node) {
		super(node);
	}

	public base_torsion_anglesType(org.w3c.dom.Node node) {
		super(node);
	}

	public base_torsion_anglesType(org.w3c.dom.Document doc) {
		super(doc);
	}

	public base_torsion_anglesType(com.altova.xml.Document doc, String namespaceURI, String prefix, String name) {
		super(doc, namespaceURI, prefix, name);
	}
	
	public void adjustPrefix() {
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "comment" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "comment", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "reference-ids" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "reference-ids", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "analysis-ids" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "analysis-ids", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "database-ids" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "database-ids", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "alpha" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "alpha", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new alphaType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "beta" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "beta", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new betaType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "gamma" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "gamma", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new gammaType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "delta" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "delta", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new deltaType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "epsilon" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "epsilon", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new epsilonType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "zeta" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "zeta", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new zetaType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "chi" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "chi", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new chiType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "nu0" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "nu0", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new nu0Type(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "nu1" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "nu1", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new nu1Type(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "nu2" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "nu2", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new nu2Type(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "nu3" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "nu3", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new nu3Type(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "nu4" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "nu4", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new nu4Type(tmpNode).adjustPrefix();
		}
	}

	public static int getcommentMinCount() {
		return 0;
	}

	public static int getcommentMaxCount() {
		return 1;
	}

	public int getcommentCount() {
		return getDomChildCount(Attribute, null, "comment");
	}

	public boolean hascomment() {
		return hasDomChild(Attribute, null, "comment");
	}

	public SchemaString newcomment() {
		return new SchemaString();
	}

	public SchemaString getcommentAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "comment", index))));
	}

	public org.w3c.dom.Node getStartingcommentCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "comment" );
	}

	public org.w3c.dom.Node getAdvancedcommentCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "comment", curNode );
	}

	public SchemaString getcommentValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaString(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaString getcomment() throws Exception 
 {
		return getcommentAt(0);
	}

	public void removecommentAt(int index) {
		removeDomChildAt(Attribute, null, "comment", index);
	}

	public void removecomment() {
		while (hascomment())
			removecommentAt(0);
	}

	public void addcomment(SchemaString value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "comment", value.toString());
		}
	}

	public void addcomment(String value) throws Exception {
		addcomment(new SchemaString(value));
	}

	public void insertcommentAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "comment", index, value.toString());
	}

	public void insertcommentAt(String value, int index) throws Exception {
		insertcommentAt(new SchemaString(value), index);
	}

	public void replacecommentAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "comment", index, value.toString());
	}

	public void replacecommentAt(String value, int index) throws Exception {
		replacecommentAt(new SchemaString(value), index);
	}

	public static int getreference_idsMinCount() {
		return 0;
	}

	public static int getreference_idsMaxCount() {
		return 1;
	}

	public int getreference_idsCount() {
		return getDomChildCount(Attribute, null, "reference-ids");
	}

	public boolean hasreference_ids() {
		return hasDomChild(Attribute, null, "reference-ids");
	}

	public SchemaIDRef newreference_ids() {
		return new SchemaIDRef();
	}

	public SchemaIDRef getreference_idsAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "reference-ids", index))));
	}

	public org.w3c.dom.Node getStartingreference_idsCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "reference-ids" );
	}

	public org.w3c.dom.Node getAdvancedreference_idsCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "reference-ids", curNode );
	}

	public SchemaIDRef getreference_idsValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaIDRef(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaIDRef getreference_ids() throws Exception 
 {
		return getreference_idsAt(0);
	}

	public void removereference_idsAt(int index) {
		removeDomChildAt(Attribute, null, "reference-ids", index);
	}

	public void removereference_ids() {
		while (hasreference_ids())
			removereference_idsAt(0);
	}

	public void addreference_ids(SchemaIDRef value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "reference-ids", value.toString());
		}
	}

	public void addreference_ids(String value) throws Exception {
		addreference_ids(new SchemaIDRef(value));
	}

	public void insertreference_idsAt(SchemaIDRef value, int index) {
		insertDomChildAt(Attribute, null, "reference-ids", index, value.toString());
	}

	public void insertreference_idsAt(String value, int index) throws Exception {
		insertreference_idsAt(new SchemaIDRef(value), index);
	}

	public void replacereference_idsAt(SchemaIDRef value, int index) {
		replaceDomChildAt(Attribute, null, "reference-ids", index, value.toString());
	}

	public void replacereference_idsAt(String value, int index) throws Exception {
		replacereference_idsAt(new SchemaIDRef(value), index);
	}

	public static int getanalysis_idsMinCount() {
		return 0;
	}

	public static int getanalysis_idsMaxCount() {
		return 1;
	}

	public int getanalysis_idsCount() {
		return getDomChildCount(Attribute, null, "analysis-ids");
	}

	public boolean hasanalysis_ids() {
		return hasDomChild(Attribute, null, "analysis-ids");
	}

	public SchemaIDRef newanalysis_ids() {
		return new SchemaIDRef();
	}

	public SchemaIDRef getanalysis_idsAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "analysis-ids", index))));
	}

	public org.w3c.dom.Node getStartinganalysis_idsCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "analysis-ids" );
	}

	public org.w3c.dom.Node getAdvancedanalysis_idsCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "analysis-ids", curNode );
	}

	public SchemaIDRef getanalysis_idsValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaIDRef(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaIDRef getanalysis_ids() throws Exception 
 {
		return getanalysis_idsAt(0);
	}

	public void removeanalysis_idsAt(int index) {
		removeDomChildAt(Attribute, null, "analysis-ids", index);
	}

	public void removeanalysis_ids() {
		while (hasanalysis_ids())
			removeanalysis_idsAt(0);
	}

	public void addanalysis_ids(SchemaIDRef value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "analysis-ids", value.toString());
		}
	}

	public void addanalysis_ids(String value) throws Exception {
		addanalysis_ids(new SchemaIDRef(value));
	}

	public void insertanalysis_idsAt(SchemaIDRef value, int index) {
		insertDomChildAt(Attribute, null, "analysis-ids", index, value.toString());
	}

	public void insertanalysis_idsAt(String value, int index) throws Exception {
		insertanalysis_idsAt(new SchemaIDRef(value), index);
	}

	public void replaceanalysis_idsAt(SchemaIDRef value, int index) {
		replaceDomChildAt(Attribute, null, "analysis-ids", index, value.toString());
	}

	public void replaceanalysis_idsAt(String value, int index) throws Exception {
		replaceanalysis_idsAt(new SchemaIDRef(value), index);
	}

	public static int getdatabase_idsMinCount() {
		return 0;
	}

	public static int getdatabase_idsMaxCount() {
		return 1;
	}

	public int getdatabase_idsCount() {
		return getDomChildCount(Attribute, null, "database-ids");
	}

	public boolean hasdatabase_ids() {
		return hasDomChild(Attribute, null, "database-ids");
	}

	public SchemaIDRef newdatabase_ids() {
		return new SchemaIDRef();
	}

	public SchemaIDRef getdatabase_idsAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "database-ids", index))));
	}

	public org.w3c.dom.Node getStartingdatabase_idsCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "database-ids" );
	}

	public org.w3c.dom.Node getAdvanceddatabase_idsCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "database-ids", curNode );
	}

	public SchemaIDRef getdatabase_idsValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaIDRef(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaIDRef getdatabase_ids() throws Exception 
 {
		return getdatabase_idsAt(0);
	}

	public void removedatabase_idsAt(int index) {
		removeDomChildAt(Attribute, null, "database-ids", index);
	}

	public void removedatabase_ids() {
		while (hasdatabase_ids())
			removedatabase_idsAt(0);
	}

	public void adddatabase_ids(SchemaIDRef value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "database-ids", value.toString());
		}
	}

	public void adddatabase_ids(String value) throws Exception {
		adddatabase_ids(new SchemaIDRef(value));
	}

	public void insertdatabase_idsAt(SchemaIDRef value, int index) {
		insertDomChildAt(Attribute, null, "database-ids", index, value.toString());
	}

	public void insertdatabase_idsAt(String value, int index) throws Exception {
		insertdatabase_idsAt(new SchemaIDRef(value), index);
	}

	public void replacedatabase_idsAt(SchemaIDRef value, int index) {
		replaceDomChildAt(Attribute, null, "database-ids", index, value.toString());
	}

	public void replacedatabase_idsAt(String value, int index) throws Exception {
		replacedatabase_idsAt(new SchemaIDRef(value), index);
	}

	public static int getalphaMinCount() {
		return 0;
	}

	public static int getalphaMaxCount() {
		return 1;
	}

	public int getalphaCount() {
		return getDomChildCount(Element, null, "alpha");
	}

	public boolean hasalpha() {
		return hasDomChild(Element, null, "alpha");
	}

	public alphaType newalpha() {
		return new alphaType(domNode.getOwnerDocument().createElementNS(null, "alpha"));
	}

	public alphaType getalphaAt(int index) throws Exception {
		return new alphaType(dereference(getDomChildAt(Element, null, "alpha", index)));
	}

	public org.w3c.dom.Node getStartingalphaCursor() throws Exception {
		return getDomFirstChild(Element, null, "alpha" );
	}

	public org.w3c.dom.Node getAdvancedalphaCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "alpha", curNode );
	}

	public alphaType getalphaValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new alphaType( dereference(curNode) );
	}

	public alphaType getalpha() throws Exception 
 {
		return getalphaAt(0);
	}

	public void removealphaAt(int index) {
		removeDomChildAt(Element, null, "alpha", index);
	}

	public void removealpha() {
		while (hasalpha())
			removealphaAt(0);
	}

	public void addalpha(alphaType value) {
		appendDomElement(null, "alpha", value);	
	}

	public void insertalphaAt(alphaType value, int index) {
		insertDomElementAt(null, "alpha", index, value);
	}

	public void replacealphaAt(alphaType value, int index) {
		replaceDomElementAt(null, "alpha", index, value);
	}

	public static int getbetaMinCount() {
		return 0;
	}

	public static int getbetaMaxCount() {
		return 1;
	}

	public int getbetaCount() {
		return getDomChildCount(Element, null, "beta");
	}

	public boolean hasbeta() {
		return hasDomChild(Element, null, "beta");
	}

	public betaType newbeta() {
		return new betaType(domNode.getOwnerDocument().createElementNS(null, "beta"));
	}

	public betaType getbetaAt(int index) throws Exception {
		return new betaType(dereference(getDomChildAt(Element, null, "beta", index)));
	}

	public org.w3c.dom.Node getStartingbetaCursor() throws Exception {
		return getDomFirstChild(Element, null, "beta" );
	}

	public org.w3c.dom.Node getAdvancedbetaCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "beta", curNode );
	}

	public betaType getbetaValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new betaType( dereference(curNode) );
	}

	public betaType getbeta() throws Exception 
 {
		return getbetaAt(0);
	}

	public void removebetaAt(int index) {
		removeDomChildAt(Element, null, "beta", index);
	}

	public void removebeta() {
		while (hasbeta())
			removebetaAt(0);
	}

	public void addbeta(betaType value) {
		appendDomElement(null, "beta", value);	
	}

	public void insertbetaAt(betaType value, int index) {
		insertDomElementAt(null, "beta", index, value);
	}

	public void replacebetaAt(betaType value, int index) {
		replaceDomElementAt(null, "beta", index, value);
	}

	public static int getgammaMinCount() {
		return 0;
	}

	public static int getgammaMaxCount() {
		return 1;
	}

	public int getgammaCount() {
		return getDomChildCount(Element, null, "gamma");
	}

	public boolean hasgamma() {
		return hasDomChild(Element, null, "gamma");
	}

	public gammaType newgamma() {
		return new gammaType(domNode.getOwnerDocument().createElementNS(null, "gamma"));
	}

	public gammaType getgammaAt(int index) throws Exception {
		return new gammaType(dereference(getDomChildAt(Element, null, "gamma", index)));
	}

	public org.w3c.dom.Node getStartinggammaCursor() throws Exception {
		return getDomFirstChild(Element, null, "gamma" );
	}

	public org.w3c.dom.Node getAdvancedgammaCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "gamma", curNode );
	}

	public gammaType getgammaValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new gammaType( dereference(curNode) );
	}

	public gammaType getgamma() throws Exception 
 {
		return getgammaAt(0);
	}

	public void removegammaAt(int index) {
		removeDomChildAt(Element, null, "gamma", index);
	}

	public void removegamma() {
		while (hasgamma())
			removegammaAt(0);
	}

	public void addgamma(gammaType value) {
		appendDomElement(null, "gamma", value);	
	}

	public void insertgammaAt(gammaType value, int index) {
		insertDomElementAt(null, "gamma", index, value);
	}

	public void replacegammaAt(gammaType value, int index) {
		replaceDomElementAt(null, "gamma", index, value);
	}

	public static int getdeltaMinCount() {
		return 0;
	}

	public static int getdeltaMaxCount() {
		return 1;
	}

	public int getdeltaCount() {
		return getDomChildCount(Element, null, "delta");
	}

	public boolean hasdelta() {
		return hasDomChild(Element, null, "delta");
	}

	public deltaType newdelta() {
		return new deltaType(domNode.getOwnerDocument().createElementNS(null, "delta"));
	}

	public deltaType getdeltaAt(int index) throws Exception {
		return new deltaType(dereference(getDomChildAt(Element, null, "delta", index)));
	}

	public org.w3c.dom.Node getStartingdeltaCursor() throws Exception {
		return getDomFirstChild(Element, null, "delta" );
	}

	public org.w3c.dom.Node getAdvanceddeltaCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "delta", curNode );
	}

	public deltaType getdeltaValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new deltaType( dereference(curNode) );
	}

	public deltaType getdelta() throws Exception 
 {
		return getdeltaAt(0);
	}

	public void removedeltaAt(int index) {
		removeDomChildAt(Element, null, "delta", index);
	}

	public void removedelta() {
		while (hasdelta())
			removedeltaAt(0);
	}

	public void adddelta(deltaType value) {
		appendDomElement(null, "delta", value);	
	}

	public void insertdeltaAt(deltaType value, int index) {
		insertDomElementAt(null, "delta", index, value);
	}

	public void replacedeltaAt(deltaType value, int index) {
		replaceDomElementAt(null, "delta", index, value);
	}

	public static int getepsilonMinCount() {
		return 0;
	}

	public static int getepsilonMaxCount() {
		return 1;
	}

	public int getepsilonCount() {
		return getDomChildCount(Element, null, "epsilon");
	}

	public boolean hasepsilon() {
		return hasDomChild(Element, null, "epsilon");
	}

	public epsilonType newepsilon() {
		return new epsilonType(domNode.getOwnerDocument().createElementNS(null, "epsilon"));
	}

	public epsilonType getepsilonAt(int index) throws Exception {
		return new epsilonType(dereference(getDomChildAt(Element, null, "epsilon", index)));
	}

	public org.w3c.dom.Node getStartingepsilonCursor() throws Exception {
		return getDomFirstChild(Element, null, "epsilon" );
	}

	public org.w3c.dom.Node getAdvancedepsilonCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "epsilon", curNode );
	}

	public epsilonType getepsilonValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new epsilonType( dereference(curNode) );
	}

	public epsilonType getepsilon() throws Exception 
 {
		return getepsilonAt(0);
	}

	public void removeepsilonAt(int index) {
		removeDomChildAt(Element, null, "epsilon", index);
	}

	public void removeepsilon() {
		while (hasepsilon())
			removeepsilonAt(0);
	}

	public void addepsilon(epsilonType value) {
		appendDomElement(null, "epsilon", value);	
	}

	public void insertepsilonAt(epsilonType value, int index) {
		insertDomElementAt(null, "epsilon", index, value);
	}

	public void replaceepsilonAt(epsilonType value, int index) {
		replaceDomElementAt(null, "epsilon", index, value);
	}

	public static int getzetaMinCount() {
		return 0;
	}

	public static int getzetaMaxCount() {
		return 1;
	}

	public int getzetaCount() {
		return getDomChildCount(Element, null, "zeta");
	}

	public boolean haszeta() {
		return hasDomChild(Element, null, "zeta");
	}

	public zetaType newzeta() {
		return new zetaType(domNode.getOwnerDocument().createElementNS(null, "zeta"));
	}

	public zetaType getzetaAt(int index) throws Exception {
		return new zetaType(dereference(getDomChildAt(Element, null, "zeta", index)));
	}

	public org.w3c.dom.Node getStartingzetaCursor() throws Exception {
		return getDomFirstChild(Element, null, "zeta" );
	}

	public org.w3c.dom.Node getAdvancedzetaCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "zeta", curNode );
	}

	public zetaType getzetaValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new zetaType( dereference(curNode) );
	}

	public zetaType getzeta() throws Exception 
 {
		return getzetaAt(0);
	}

	public void removezetaAt(int index) {
		removeDomChildAt(Element, null, "zeta", index);
	}

	public void removezeta() {
		while (haszeta())
			removezetaAt(0);
	}

	public void addzeta(zetaType value) {
		appendDomElement(null, "zeta", value);	
	}

	public void insertzetaAt(zetaType value, int index) {
		insertDomElementAt(null, "zeta", index, value);
	}

	public void replacezetaAt(zetaType value, int index) {
		replaceDomElementAt(null, "zeta", index, value);
	}

	public static int getchiMinCount() {
		return 0;
	}

	public static int getchiMaxCount() {
		return 1;
	}

	public int getchiCount() {
		return getDomChildCount(Element, null, "chi");
	}

	public boolean haschi() {
		return hasDomChild(Element, null, "chi");
	}

	public chiType newchi() {
		return new chiType(domNode.getOwnerDocument().createElementNS(null, "chi"));
	}

	public chiType getchiAt(int index) throws Exception {
		return new chiType(dereference(getDomChildAt(Element, null, "chi", index)));
	}

	public org.w3c.dom.Node getStartingchiCursor() throws Exception {
		return getDomFirstChild(Element, null, "chi" );
	}

	public org.w3c.dom.Node getAdvancedchiCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "chi", curNode );
	}

	public chiType getchiValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new chiType( dereference(curNode) );
	}

	public chiType getchi() throws Exception 
 {
		return getchiAt(0);
	}

	public void removechiAt(int index) {
		removeDomChildAt(Element, null, "chi", index);
	}

	public void removechi() {
		while (haschi())
			removechiAt(0);
	}

	public void addchi(chiType value) {
		appendDomElement(null, "chi", value);	
	}

	public void insertchiAt(chiType value, int index) {
		insertDomElementAt(null, "chi", index, value);
	}

	public void replacechiAt(chiType value, int index) {
		replaceDomElementAt(null, "chi", index, value);
	}

	public static int getnu0MinCount() {
		return 0;
	}

	public static int getnu0MaxCount() {
		return 1;
	}

	public int getnu0Count() {
		return getDomChildCount(Element, null, "nu0");
	}

	public boolean hasnu0() {
		return hasDomChild(Element, null, "nu0");
	}

	public nu0Type newnu0() {
		return new nu0Type(domNode.getOwnerDocument().createElementNS(null, "nu0"));
	}

	public nu0Type getnu0At(int index) throws Exception {
		return new nu0Type(dereference(getDomChildAt(Element, null, "nu0", index)));
	}

	public org.w3c.dom.Node getStartingnu0Cursor() throws Exception {
		return getDomFirstChild(Element, null, "nu0" );
	}

	public org.w3c.dom.Node getAdvancednu0Cursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "nu0", curNode );
	}

	public nu0Type getnu0ValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new nu0Type( dereference(curNode) );
	}

	public nu0Type getnu0() throws Exception 
 {
		return getnu0At(0);
	}

	public void removenu0At(int index) {
		removeDomChildAt(Element, null, "nu0", index);
	}

	public void removenu0() {
		while (hasnu0())
			removenu0At(0);
	}

	public void addnu0(nu0Type value) {
		appendDomElement(null, "nu0", value);	
	}

	public void insertnu0At(nu0Type value, int index) {
		insertDomElementAt(null, "nu0", index, value);
	}

	public void replacenu0At(nu0Type value, int index) {
		replaceDomElementAt(null, "nu0", index, value);
	}

	public static int getnu1MinCount() {
		return 0;
	}

	public static int getnu1MaxCount() {
		return 1;
	}

	public int getnu1Count() {
		return getDomChildCount(Element, null, "nu1");
	}

	public boolean hasnu1() {
		return hasDomChild(Element, null, "nu1");
	}

	public nu1Type newnu1() {
		return new nu1Type(domNode.getOwnerDocument().createElementNS(null, "nu1"));
	}

	public nu1Type getnu1At(int index) throws Exception {
		return new nu1Type(dereference(getDomChildAt(Element, null, "nu1", index)));
	}

	public org.w3c.dom.Node getStartingnu1Cursor() throws Exception {
		return getDomFirstChild(Element, null, "nu1" );
	}

	public org.w3c.dom.Node getAdvancednu1Cursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "nu1", curNode );
	}

	public nu1Type getnu1ValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new nu1Type( dereference(curNode) );
	}

	public nu1Type getnu1() throws Exception 
 {
		return getnu1At(0);
	}

	public void removenu1At(int index) {
		removeDomChildAt(Element, null, "nu1", index);
	}

	public void removenu1() {
		while (hasnu1())
			removenu1At(0);
	}

	public void addnu1(nu1Type value) {
		appendDomElement(null, "nu1", value);	
	}

	public void insertnu1At(nu1Type value, int index) {
		insertDomElementAt(null, "nu1", index, value);
	}

	public void replacenu1At(nu1Type value, int index) {
		replaceDomElementAt(null, "nu1", index, value);
	}

	public static int getnu2MinCount() {
		return 0;
	}

	public static int getnu2MaxCount() {
		return 1;
	}

	public int getnu2Count() {
		return getDomChildCount(Element, null, "nu2");
	}

	public boolean hasnu2() {
		return hasDomChild(Element, null, "nu2");
	}

	public nu2Type newnu2() {
		return new nu2Type(domNode.getOwnerDocument().createElementNS(null, "nu2"));
	}

	public nu2Type getnu2At(int index) throws Exception {
		return new nu2Type(dereference(getDomChildAt(Element, null, "nu2", index)));
	}

	public org.w3c.dom.Node getStartingnu2Cursor() throws Exception {
		return getDomFirstChild(Element, null, "nu2" );
	}

	public org.w3c.dom.Node getAdvancednu2Cursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "nu2", curNode );
	}

	public nu2Type getnu2ValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new nu2Type( dereference(curNode) );
	}

	public nu2Type getnu2() throws Exception 
 {
		return getnu2At(0);
	}

	public void removenu2At(int index) {
		removeDomChildAt(Element, null, "nu2", index);
	}

	public void removenu2() {
		while (hasnu2())
			removenu2At(0);
	}

	public void addnu2(nu2Type value) {
		appendDomElement(null, "nu2", value);	
	}

	public void insertnu2At(nu2Type value, int index) {
		insertDomElementAt(null, "nu2", index, value);
	}

	public void replacenu2At(nu2Type value, int index) {
		replaceDomElementAt(null, "nu2", index, value);
	}

	public static int getnu3MinCount() {
		return 0;
	}

	public static int getnu3MaxCount() {
		return 1;
	}

	public int getnu3Count() {
		return getDomChildCount(Element, null, "nu3");
	}

	public boolean hasnu3() {
		return hasDomChild(Element, null, "nu3");
	}

	public nu3Type newnu3() {
		return new nu3Type(domNode.getOwnerDocument().createElementNS(null, "nu3"));
	}

	public nu3Type getnu3At(int index) throws Exception {
		return new nu3Type(dereference(getDomChildAt(Element, null, "nu3", index)));
	}

	public org.w3c.dom.Node getStartingnu3Cursor() throws Exception {
		return getDomFirstChild(Element, null, "nu3" );
	}

	public org.w3c.dom.Node getAdvancednu3Cursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "nu3", curNode );
	}

	public nu3Type getnu3ValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new nu3Type( dereference(curNode) );
	}

	public nu3Type getnu3() throws Exception 
 {
		return getnu3At(0);
	}

	public void removenu3At(int index) {
		removeDomChildAt(Element, null, "nu3", index);
	}

	public void removenu3() {
		while (hasnu3())
			removenu3At(0);
	}

	public void addnu3(nu3Type value) {
		appendDomElement(null, "nu3", value);	
	}

	public void insertnu3At(nu3Type value, int index) {
		insertDomElementAt(null, "nu3", index, value);
	}

	public void replacenu3At(nu3Type value, int index) {
		replaceDomElementAt(null, "nu3", index, value);
	}

	public static int getnu4MinCount() {
		return 0;
	}

	public static int getnu4MaxCount() {
		return 1;
	}

	public int getnu4Count() {
		return getDomChildCount(Element, null, "nu4");
	}

	public boolean hasnu4() {
		return hasDomChild(Element, null, "nu4");
	}

	public nu4Type newnu4() {
		return new nu4Type(domNode.getOwnerDocument().createElementNS(null, "nu4"));
	}

	public nu4Type getnu4At(int index) throws Exception {
		return new nu4Type(dereference(getDomChildAt(Element, null, "nu4", index)));
	}

	public org.w3c.dom.Node getStartingnu4Cursor() throws Exception {
		return getDomFirstChild(Element, null, "nu4" );
	}

	public org.w3c.dom.Node getAdvancednu4Cursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "nu4", curNode );
	}

	public nu4Type getnu4ValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new nu4Type( dereference(curNode) );
	}

	public nu4Type getnu4() throws Exception 
 {
		return getnu4At(0);
	}

	public void removenu4At(int index) {
		removeDomChildAt(Element, null, "nu4", index);
	}

	public void removenu4() {
		while (hasnu4())
			removenu4At(0);
	}

	public void addnu4(nu4Type value) {
		appendDomElement(null, "nu4", value);	
	}

	public void insertnu4At(nu4Type value, int index) {
		insertDomElementAt(null, "nu4", index, value);
	}

	public void replacenu4At(nu4Type value, int index) {
		replaceDomElementAt(null, "nu4", index, value);
	}

	private org.w3c.dom.Node dereference(org.w3c.dom.Node node) {
		return node;
	}
}
