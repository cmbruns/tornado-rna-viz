/**
 * distance_constraintType.java
 *
 * This file was generated by XMLSpy 2006r3 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSpy Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.rnaml;

import com.altova.types.*;

public class distance_constraintType extends com.altova.xml.Node {

	public distance_constraintType(distance_constraintType node) {
		super(node);
	}

	public distance_constraintType(org.w3c.dom.Node node) {
		super(node);
	}

	public distance_constraintType(org.w3c.dom.Document doc) {
		super(doc);
	}

	public distance_constraintType(com.altova.xml.Document doc, String namespaceURI, String prefix, String name) {
		super(doc, namespaceURI, prefix, name);
	}
	
	public void adjustPrefix() {
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "comment" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "comment", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "reference-ids" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "reference-ids", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "analysis-ids" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "analysis-ids", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "database-ids" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "database-ids", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "base-id" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "base-id", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new base_idType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "atom-type" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "atom-type", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new atom_typeType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "mean" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "mean", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new meanType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "range" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "range", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new rangeType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "weight" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "weight", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new weightType(tmpNode).adjustPrefix();
		}
	}

	public static int getcommentMinCount() {
		return 0;
	}

	public static int getcommentMaxCount() {
		return 1;
	}

	public int getcommentCount() {
		return getDomChildCount(Attribute, null, "comment");
	}

	public boolean hascomment() {
		return hasDomChild(Attribute, null, "comment");
	}

	public SchemaString newcomment() {
		return new SchemaString();
	}

	public SchemaString getcommentAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "comment", index))));
	}

	public org.w3c.dom.Node getStartingcommentCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "comment" );
	}

	public org.w3c.dom.Node getAdvancedcommentCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "comment", curNode );
	}

	public SchemaString getcommentValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaString(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaString getcomment() throws Exception 
 {
		return getcommentAt(0);
	}

	public void removecommentAt(int index) {
		removeDomChildAt(Attribute, null, "comment", index);
	}

	public void removecomment() {
		while (hascomment())
			removecommentAt(0);
	}

	public void addcomment(SchemaString value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "comment", value.toString());
		}
	}

	public void addcomment(String value) throws Exception {
		addcomment(new SchemaString(value));
	}

	public void insertcommentAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "comment", index, value.toString());
	}

	public void insertcommentAt(String value, int index) throws Exception {
		insertcommentAt(new SchemaString(value), index);
	}

	public void replacecommentAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "comment", index, value.toString());
	}

	public void replacecommentAt(String value, int index) throws Exception {
		replacecommentAt(new SchemaString(value), index);
	}

	public static int getreference_idsMinCount() {
		return 0;
	}

	public static int getreference_idsMaxCount() {
		return 1;
	}

	public int getreference_idsCount() {
		return getDomChildCount(Attribute, null, "reference-ids");
	}

	public boolean hasreference_ids() {
		return hasDomChild(Attribute, null, "reference-ids");
	}

	public SchemaIDRef newreference_ids() {
		return new SchemaIDRef();
	}

	public SchemaIDRef getreference_idsAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "reference-ids", index))));
	}

	public org.w3c.dom.Node getStartingreference_idsCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "reference-ids" );
	}

	public org.w3c.dom.Node getAdvancedreference_idsCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "reference-ids", curNode );
	}

	public SchemaIDRef getreference_idsValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaIDRef(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaIDRef getreference_ids() throws Exception 
 {
		return getreference_idsAt(0);
	}

	public void removereference_idsAt(int index) {
		removeDomChildAt(Attribute, null, "reference-ids", index);
	}

	public void removereference_ids() {
		while (hasreference_ids())
			removereference_idsAt(0);
	}

	public void addreference_ids(SchemaIDRef value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "reference-ids", value.toString());
		}
	}

	public void addreference_ids(String value) throws Exception {
		addreference_ids(new SchemaIDRef(value));
	}

	public void insertreference_idsAt(SchemaIDRef value, int index) {
		insertDomChildAt(Attribute, null, "reference-ids", index, value.toString());
	}

	public void insertreference_idsAt(String value, int index) throws Exception {
		insertreference_idsAt(new SchemaIDRef(value), index);
	}

	public void replacereference_idsAt(SchemaIDRef value, int index) {
		replaceDomChildAt(Attribute, null, "reference-ids", index, value.toString());
	}

	public void replacereference_idsAt(String value, int index) throws Exception {
		replacereference_idsAt(new SchemaIDRef(value), index);
	}

	public static int getanalysis_idsMinCount() {
		return 0;
	}

	public static int getanalysis_idsMaxCount() {
		return 1;
	}

	public int getanalysis_idsCount() {
		return getDomChildCount(Attribute, null, "analysis-ids");
	}

	public boolean hasanalysis_ids() {
		return hasDomChild(Attribute, null, "analysis-ids");
	}

	public SchemaIDRef newanalysis_ids() {
		return new SchemaIDRef();
	}

	public SchemaIDRef getanalysis_idsAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "analysis-ids", index))));
	}

	public org.w3c.dom.Node getStartinganalysis_idsCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "analysis-ids" );
	}

	public org.w3c.dom.Node getAdvancedanalysis_idsCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "analysis-ids", curNode );
	}

	public SchemaIDRef getanalysis_idsValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaIDRef(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaIDRef getanalysis_ids() throws Exception 
 {
		return getanalysis_idsAt(0);
	}

	public void removeanalysis_idsAt(int index) {
		removeDomChildAt(Attribute, null, "analysis-ids", index);
	}

	public void removeanalysis_ids() {
		while (hasanalysis_ids())
			removeanalysis_idsAt(0);
	}

	public void addanalysis_ids(SchemaIDRef value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "analysis-ids", value.toString());
		}
	}

	public void addanalysis_ids(String value) throws Exception {
		addanalysis_ids(new SchemaIDRef(value));
	}

	public void insertanalysis_idsAt(SchemaIDRef value, int index) {
		insertDomChildAt(Attribute, null, "analysis-ids", index, value.toString());
	}

	public void insertanalysis_idsAt(String value, int index) throws Exception {
		insertanalysis_idsAt(new SchemaIDRef(value), index);
	}

	public void replaceanalysis_idsAt(SchemaIDRef value, int index) {
		replaceDomChildAt(Attribute, null, "analysis-ids", index, value.toString());
	}

	public void replaceanalysis_idsAt(String value, int index) throws Exception {
		replaceanalysis_idsAt(new SchemaIDRef(value), index);
	}

	public static int getdatabase_idsMinCount() {
		return 0;
	}

	public static int getdatabase_idsMaxCount() {
		return 1;
	}

	public int getdatabase_idsCount() {
		return getDomChildCount(Attribute, null, "database-ids");
	}

	public boolean hasdatabase_ids() {
		return hasDomChild(Attribute, null, "database-ids");
	}

	public SchemaIDRef newdatabase_ids() {
		return new SchemaIDRef();
	}

	public SchemaIDRef getdatabase_idsAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "database-ids", index))));
	}

	public org.w3c.dom.Node getStartingdatabase_idsCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "database-ids" );
	}

	public org.w3c.dom.Node getAdvanceddatabase_idsCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "database-ids", curNode );
	}

	public SchemaIDRef getdatabase_idsValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaIDRef(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaIDRef getdatabase_ids() throws Exception 
 {
		return getdatabase_idsAt(0);
	}

	public void removedatabase_idsAt(int index) {
		removeDomChildAt(Attribute, null, "database-ids", index);
	}

	public void removedatabase_ids() {
		while (hasdatabase_ids())
			removedatabase_idsAt(0);
	}

	public void adddatabase_ids(SchemaIDRef value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "database-ids", value.toString());
		}
	}

	public void adddatabase_ids(String value) throws Exception {
		adddatabase_ids(new SchemaIDRef(value));
	}

	public void insertdatabase_idsAt(SchemaIDRef value, int index) {
		insertDomChildAt(Attribute, null, "database-ids", index, value.toString());
	}

	public void insertdatabase_idsAt(String value, int index) throws Exception {
		insertdatabase_idsAt(new SchemaIDRef(value), index);
	}

	public void replacedatabase_idsAt(SchemaIDRef value, int index) {
		replaceDomChildAt(Attribute, null, "database-ids", index, value.toString());
	}

	public void replacedatabase_idsAt(String value, int index) throws Exception {
		replacedatabase_idsAt(new SchemaIDRef(value), index);
	}

	public static int getbase_idMinCount() {
		return 2;
	}

	public static int getbase_idMaxCount() {
		return 2;
	}

	public int getbase_idCount() {
		return getDomChildCount(Element, null, "base-id");
	}

	public boolean hasbase_id() {
		return hasDomChild(Element, null, "base-id");
	}

	public base_idType newbase_id() {
		return new base_idType(domNode.getOwnerDocument().createElementNS(null, "base-id"));
	}

	public base_idType getbase_idAt(int index) throws Exception {
		return new base_idType(dereference(getDomChildAt(Element, null, "base-id", index)));
	}

	public org.w3c.dom.Node getStartingbase_idCursor() throws Exception {
		return getDomFirstChild(Element, null, "base-id" );
	}

	public org.w3c.dom.Node getAdvancedbase_idCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "base-id", curNode );
	}

	public base_idType getbase_idValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new base_idType( dereference(curNode) );
	}

	public base_idType getbase_id() throws Exception 
 {
		return getbase_idAt(0);
	}

	public void removebase_idAt(int index) {
		removeDomChildAt(Element, null, "base-id", index);
	}

	public void removebase_id() {
		removebase_idAt(0);
	}

	public void addbase_id(base_idType value) {
		appendDomElement(null, "base-id", value);	
	}

	public void insertbase_idAt(base_idType value, int index) {
		insertDomElementAt(null, "base-id", index, value);
	}

	public void replacebase_idAt(base_idType value, int index) {
		replaceDomElementAt(null, "base-id", index, value);
	}

	public static int getatom_typeMinCount() {
		return 2;
	}

	public static int getatom_typeMaxCount() {
		return 2;
	}

	public int getatom_typeCount() {
		return getDomChildCount(Element, null, "atom-type");
	}

	public boolean hasatom_type() {
		return hasDomChild(Element, null, "atom-type");
	}

	public atom_typeType newatom_type() {
		return new atom_typeType(domNode.getOwnerDocument().createElementNS(null, "atom-type"));
	}

	public atom_typeType getatom_typeAt(int index) throws Exception {
		return new atom_typeType(dereference(getDomChildAt(Element, null, "atom-type", index)));
	}

	public org.w3c.dom.Node getStartingatom_typeCursor() throws Exception {
		return getDomFirstChild(Element, null, "atom-type" );
	}

	public org.w3c.dom.Node getAdvancedatom_typeCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "atom-type", curNode );
	}

	public atom_typeType getatom_typeValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new atom_typeType( dereference(curNode) );
	}

	public atom_typeType getatom_type() throws Exception 
 {
		return getatom_typeAt(0);
	}

	public void removeatom_typeAt(int index) {
		removeDomChildAt(Element, null, "atom-type", index);
	}

	public void removeatom_type() {
		removeatom_typeAt(0);
	}

	public void addatom_type(atom_typeType value) {
		appendDomElement(null, "atom-type", value);	
	}

	public void insertatom_typeAt(atom_typeType value, int index) {
		insertDomElementAt(null, "atom-type", index, value);
	}

	public void replaceatom_typeAt(atom_typeType value, int index) {
		replaceDomElementAt(null, "atom-type", index, value);
	}

	public static int getmeanMinCount() {
		return 1;
	}

	public static int getmeanMaxCount() {
		return 1;
	}

	public int getmeanCount() {
		return getDomChildCount(Element, null, "mean");
	}

	public boolean hasmean() {
		return hasDomChild(Element, null, "mean");
	}

	public meanType newmean() {
		return new meanType(domNode.getOwnerDocument().createElementNS(null, "mean"));
	}

	public meanType getmeanAt(int index) throws Exception {
		return new meanType(dereference(getDomChildAt(Element, null, "mean", index)));
	}

	public org.w3c.dom.Node getStartingmeanCursor() throws Exception {
		return getDomFirstChild(Element, null, "mean" );
	}

	public org.w3c.dom.Node getAdvancedmeanCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "mean", curNode );
	}

	public meanType getmeanValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new meanType( dereference(curNode) );
	}

	public meanType getmean() throws Exception 
 {
		return getmeanAt(0);
	}

	public void removemeanAt(int index) {
		removeDomChildAt(Element, null, "mean", index);
	}

	public void removemean() {
		while (hasmean())
			removemeanAt(0);
	}

	public void addmean(meanType value) {
		appendDomElement(null, "mean", value);	
	}

	public void insertmeanAt(meanType value, int index) {
		insertDomElementAt(null, "mean", index, value);
	}

	public void replacemeanAt(meanType value, int index) {
		replaceDomElementAt(null, "mean", index, value);
	}

	public static int getrangeMinCount() {
		return 0;
	}

	public static int getrangeMaxCount() {
		return 1;
	}

	public int getrangeCount() {
		return getDomChildCount(Element, null, "range");
	}

	public boolean hasrange() {
		return hasDomChild(Element, null, "range");
	}

	public rangeType newrange() {
		return new rangeType(domNode.getOwnerDocument().createElementNS(null, "range"));
	}

	public rangeType getrangeAt(int index) throws Exception {
		return new rangeType(dereference(getDomChildAt(Element, null, "range", index)));
	}

	public org.w3c.dom.Node getStartingrangeCursor() throws Exception {
		return getDomFirstChild(Element, null, "range" );
	}

	public org.w3c.dom.Node getAdvancedrangeCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "range", curNode );
	}

	public rangeType getrangeValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new rangeType( dereference(curNode) );
	}

	public rangeType getrange() throws Exception 
 {
		return getrangeAt(0);
	}

	public void removerangeAt(int index) {
		removeDomChildAt(Element, null, "range", index);
	}

	public void removerange() {
		while (hasrange())
			removerangeAt(0);
	}

	public void addrange(rangeType value) {
		appendDomElement(null, "range", value);	
	}

	public void insertrangeAt(rangeType value, int index) {
		insertDomElementAt(null, "range", index, value);
	}

	public void replacerangeAt(rangeType value, int index) {
		replaceDomElementAt(null, "range", index, value);
	}

	public static int getweightMinCount() {
		return 0;
	}

	public static int getweightMaxCount() {
		return 1;
	}

	public int getweightCount() {
		return getDomChildCount(Element, null, "weight");
	}

	public boolean hasweight() {
		return hasDomChild(Element, null, "weight");
	}

	public weightType newweight() {
		return new weightType(domNode.getOwnerDocument().createElementNS(null, "weight"));
	}

	public weightType getweightAt(int index) throws Exception {
		return new weightType(dereference(getDomChildAt(Element, null, "weight", index)));
	}

	public org.w3c.dom.Node getStartingweightCursor() throws Exception {
		return getDomFirstChild(Element, null, "weight" );
	}

	public org.w3c.dom.Node getAdvancedweightCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "weight", curNode );
	}

	public weightType getweightValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new weightType( dereference(curNode) );
	}

	public weightType getweight() throws Exception 
 {
		return getweightAt(0);
	}

	public void removeweightAt(int index) {
		removeDomChildAt(Element, null, "weight", index);
	}

	public void removeweight() {
		while (hasweight())
			removeweightAt(0);
	}

	public void addweight(weightType value) {
		appendDomElement(null, "weight", value);	
	}

	public void insertweightAt(weightType value, int index) {
		insertDomElementAt(null, "weight", index, value);
	}

	public void replaceweightAt(weightType value, int index) {
		replaceDomElementAt(null, "weight", index, value);
	}

	private org.w3c.dom.Node dereference(org.w3c.dom.Node node) {
		return node;
	}
}
