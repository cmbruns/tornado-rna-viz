/**
 * rnamlType.java
 *
 * This file was generated by XMLSpy 2006r3 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSpy Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.rnaml;

import com.altova.types.*;

public class rnamlType extends com.altova.xml.Node {

	public rnamlType(rnamlType node) {
		super(node);
	}

	public rnamlType(org.w3c.dom.Node node) {
		super(node);
	}

	public rnamlType(org.w3c.dom.Document doc) {
		super(doc);
	}

	public rnamlType(com.altova.xml.Document doc, String namespaceURI, String prefix, String name) {
		super(doc, namespaceURI, prefix, name);
	}
	
	public void adjustPrefix() {
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "version" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "version", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "comment" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "comment", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "reference-ids" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "reference-ids", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "analysis-ids" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "analysis-ids", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "database-ids" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "database-ids", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "molecule" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "molecule", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new moleculeType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "molecule-class" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "molecule-class", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new molecule_classType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "interactions" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "interactions", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new interactionsType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "reference" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "reference", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new referenceType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "database-entry" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "database-entry", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new database_entryType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "analysis" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "analysis", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new analysisType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "revision" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "revision", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new revisionType(tmpNode).adjustPrefix();
		}
	}

	public static int getversionMinCount() {
		return 1;
	}

	public static int getversionMaxCount() {
		return 1;
	}

	public int getversionCount() {
		return getDomChildCount(Attribute, null, "version");
	}

	public boolean hasversion() {
		return hasDomChild(Attribute, null, "version");
	}

	public EnumerationType3 newversion() {
		return new EnumerationType3();
	}

	public EnumerationType3 getversionAt(int index) throws Exception {
		return new EnumerationType3(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "version", index))));
	}

	public org.w3c.dom.Node getStartingversionCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "version" );
	}

	public org.w3c.dom.Node getAdvancedversionCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "version", curNode );
	}

	public EnumerationType3 getversionValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new EnumerationType3(getDomNodeValue( dereference(curNode) ) );
	}

	public EnumerationType3 getversion() throws Exception 
 {
		return getversionAt(0);
	}

	public void removeversionAt(int index) {
		removeDomChildAt(Attribute, null, "version", index);
	}

	public void removeversion() {
		while (hasversion())
			removeversionAt(0);
	}

	public void addversion(EnumerationType3 value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "version", value.toString());
		}
	}

	public void addversion(String value) throws Exception {
		addversion(new EnumerationType3(value));
	}

	public void insertversionAt(EnumerationType3 value, int index) {
		insertDomChildAt(Attribute, null, "version", index, value.toString());
	}

	public void insertversionAt(String value, int index) throws Exception {
		insertversionAt(new EnumerationType3(value), index);
	}

	public void replaceversionAt(EnumerationType3 value, int index) {
		replaceDomChildAt(Attribute, null, "version", index, value.toString());
	}

	public void replaceversionAt(String value, int index) throws Exception {
		replaceversionAt(new EnumerationType3(value), index);
	}

	public static int getcommentMinCount() {
		return 0;
	}

	public static int getcommentMaxCount() {
		return 1;
	}

	public int getcommentCount() {
		return getDomChildCount(Attribute, null, "comment");
	}

	public boolean hascomment() {
		return hasDomChild(Attribute, null, "comment");
	}

	public SchemaString newcomment() {
		return new SchemaString();
	}

	public SchemaString getcommentAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "comment", index))));
	}

	public org.w3c.dom.Node getStartingcommentCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "comment" );
	}

	public org.w3c.dom.Node getAdvancedcommentCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "comment", curNode );
	}

	public SchemaString getcommentValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaString(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaString getcomment() throws Exception 
 {
		return getcommentAt(0);
	}

	public void removecommentAt(int index) {
		removeDomChildAt(Attribute, null, "comment", index);
	}

	public void removecomment() {
		while (hascomment())
			removecommentAt(0);
	}

	public void addcomment(SchemaString value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "comment", value.toString());
		}
	}

	public void addcomment(String value) throws Exception {
		addcomment(new SchemaString(value));
	}

	public void insertcommentAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "comment", index, value.toString());
	}

	public void insertcommentAt(String value, int index) throws Exception {
		insertcommentAt(new SchemaString(value), index);
	}

	public void replacecommentAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "comment", index, value.toString());
	}

	public void replacecommentAt(String value, int index) throws Exception {
		replacecommentAt(new SchemaString(value), index);
	}

	public static int getreference_idsMinCount() {
		return 0;
	}

	public static int getreference_idsMaxCount() {
		return 1;
	}

	public int getreference_idsCount() {
		return getDomChildCount(Attribute, null, "reference-ids");
	}

	public boolean hasreference_ids() {
		return hasDomChild(Attribute, null, "reference-ids");
	}

	public SchemaIDRef newreference_ids() {
		return new SchemaIDRef();
	}

	public SchemaIDRef getreference_idsAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "reference-ids", index))));
	}

	public org.w3c.dom.Node getStartingreference_idsCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "reference-ids" );
	}

	public org.w3c.dom.Node getAdvancedreference_idsCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "reference-ids", curNode );
	}

	public SchemaIDRef getreference_idsValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaIDRef(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaIDRef getreference_ids() throws Exception 
 {
		return getreference_idsAt(0);
	}

	public void removereference_idsAt(int index) {
		removeDomChildAt(Attribute, null, "reference-ids", index);
	}

	public void removereference_ids() {
		while (hasreference_ids())
			removereference_idsAt(0);
	}

	public void addreference_ids(SchemaIDRef value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "reference-ids", value.toString());
		}
	}

	public void addreference_ids(String value) throws Exception {
		addreference_ids(new SchemaIDRef(value));
	}

	public void insertreference_idsAt(SchemaIDRef value, int index) {
		insertDomChildAt(Attribute, null, "reference-ids", index, value.toString());
	}

	public void insertreference_idsAt(String value, int index) throws Exception {
		insertreference_idsAt(new SchemaIDRef(value), index);
	}

	public void replacereference_idsAt(SchemaIDRef value, int index) {
		replaceDomChildAt(Attribute, null, "reference-ids", index, value.toString());
	}

	public void replacereference_idsAt(String value, int index) throws Exception {
		replacereference_idsAt(new SchemaIDRef(value), index);
	}

	public static int getanalysis_idsMinCount() {
		return 0;
	}

	public static int getanalysis_idsMaxCount() {
		return 1;
	}

	public int getanalysis_idsCount() {
		return getDomChildCount(Attribute, null, "analysis-ids");
	}

	public boolean hasanalysis_ids() {
		return hasDomChild(Attribute, null, "analysis-ids");
	}

	public SchemaIDRef newanalysis_ids() {
		return new SchemaIDRef();
	}

	public SchemaIDRef getanalysis_idsAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "analysis-ids", index))));
	}

	public org.w3c.dom.Node getStartinganalysis_idsCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "analysis-ids" );
	}

	public org.w3c.dom.Node getAdvancedanalysis_idsCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "analysis-ids", curNode );
	}

	public SchemaIDRef getanalysis_idsValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaIDRef(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaIDRef getanalysis_ids() throws Exception 
 {
		return getanalysis_idsAt(0);
	}

	public void removeanalysis_idsAt(int index) {
		removeDomChildAt(Attribute, null, "analysis-ids", index);
	}

	public void removeanalysis_ids() {
		while (hasanalysis_ids())
			removeanalysis_idsAt(0);
	}

	public void addanalysis_ids(SchemaIDRef value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "analysis-ids", value.toString());
		}
	}

	public void addanalysis_ids(String value) throws Exception {
		addanalysis_ids(new SchemaIDRef(value));
	}

	public void insertanalysis_idsAt(SchemaIDRef value, int index) {
		insertDomChildAt(Attribute, null, "analysis-ids", index, value.toString());
	}

	public void insertanalysis_idsAt(String value, int index) throws Exception {
		insertanalysis_idsAt(new SchemaIDRef(value), index);
	}

	public void replaceanalysis_idsAt(SchemaIDRef value, int index) {
		replaceDomChildAt(Attribute, null, "analysis-ids", index, value.toString());
	}

	public void replaceanalysis_idsAt(String value, int index) throws Exception {
		replaceanalysis_idsAt(new SchemaIDRef(value), index);
	}

	public static int getdatabase_idsMinCount() {
		return 0;
	}

	public static int getdatabase_idsMaxCount() {
		return 1;
	}

	public int getdatabase_idsCount() {
		return getDomChildCount(Attribute, null, "database-ids");
	}

	public boolean hasdatabase_ids() {
		return hasDomChild(Attribute, null, "database-ids");
	}

	public SchemaIDRef newdatabase_ids() {
		return new SchemaIDRef();
	}

	public SchemaIDRef getdatabase_idsAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "database-ids", index))));
	}

	public org.w3c.dom.Node getStartingdatabase_idsCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "database-ids" );
	}

	public org.w3c.dom.Node getAdvanceddatabase_idsCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "database-ids", curNode );
	}

	public SchemaIDRef getdatabase_idsValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaIDRef(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaIDRef getdatabase_ids() throws Exception 
 {
		return getdatabase_idsAt(0);
	}

	public void removedatabase_idsAt(int index) {
		removeDomChildAt(Attribute, null, "database-ids", index);
	}

	public void removedatabase_ids() {
		while (hasdatabase_ids())
			removedatabase_idsAt(0);
	}

	public void adddatabase_ids(SchemaIDRef value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "database-ids", value.toString());
		}
	}

	public void adddatabase_ids(String value) throws Exception {
		adddatabase_ids(new SchemaIDRef(value));
	}

	public void insertdatabase_idsAt(SchemaIDRef value, int index) {
		insertDomChildAt(Attribute, null, "database-ids", index, value.toString());
	}

	public void insertdatabase_idsAt(String value, int index) throws Exception {
		insertdatabase_idsAt(new SchemaIDRef(value), index);
	}

	public void replacedatabase_idsAt(SchemaIDRef value, int index) {
		replaceDomChildAt(Attribute, null, "database-ids", index, value.toString());
	}

	public void replacedatabase_idsAt(String value, int index) throws Exception {
		replacedatabase_idsAt(new SchemaIDRef(value), index);
	}

	public static int getmoleculeMinCount() {
		return 1;
	}

	public static int getmoleculeMaxCount() {
		return 1;
	}

	public int getmoleculeCount() {
		return getDomChildCount(Element, null, "molecule");
	}

	public boolean hasmolecule() {
		return hasDomChild(Element, null, "molecule");
	}

	public moleculeType newmolecule() {
		return new moleculeType(domNode.getOwnerDocument().createElementNS(null, "molecule"));
	}

	public moleculeType getmoleculeAt(int index) throws Exception {
		return new moleculeType(dereference(getDomChildAt(Element, null, "molecule", index)));
	}

	public org.w3c.dom.Node getStartingmoleculeCursor() throws Exception {
		return getDomFirstChild(Element, null, "molecule" );
	}

	public org.w3c.dom.Node getAdvancedmoleculeCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "molecule", curNode );
	}

	public moleculeType getmoleculeValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new moleculeType( dereference(curNode) );
	}

	public moleculeType getmolecule() throws Exception 
 {
		return getmoleculeAt(0);
	}

	public void removemoleculeAt(int index) {
		removeDomChildAt(Element, null, "molecule", index);
	}

	public void removemolecule() {
		while (hasmolecule())
			removemoleculeAt(0);
	}

	public void addmolecule(moleculeType value) {
		appendDomElement(null, "molecule", value);	
	}

	public void insertmoleculeAt(moleculeType value, int index) {
		insertDomElementAt(null, "molecule", index, value);
	}

	public void replacemoleculeAt(moleculeType value, int index) {
		replaceDomElementAt(null, "molecule", index, value);
	}

	public static int getmolecule_classMinCount() {
		return 1;
	}

	public static int getmolecule_classMaxCount() {
		return 1;
	}

	public int getmolecule_classCount() {
		return getDomChildCount(Element, null, "molecule-class");
	}

	public boolean hasmolecule_class() {
		return hasDomChild(Element, null, "molecule-class");
	}

	public molecule_classType newmolecule_class() {
		return new molecule_classType(domNode.getOwnerDocument().createElementNS(null, "molecule-class"));
	}

	public molecule_classType getmolecule_classAt(int index) throws Exception {
		return new molecule_classType(dereference(getDomChildAt(Element, null, "molecule-class", index)));
	}

	public org.w3c.dom.Node getStartingmolecule_classCursor() throws Exception {
		return getDomFirstChild(Element, null, "molecule-class" );
	}

	public org.w3c.dom.Node getAdvancedmolecule_classCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "molecule-class", curNode );
	}

	public molecule_classType getmolecule_classValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new molecule_classType( dereference(curNode) );
	}

	public molecule_classType getmolecule_class() throws Exception 
 {
		return getmolecule_classAt(0);
	}

	public void removemolecule_classAt(int index) {
		removeDomChildAt(Element, null, "molecule-class", index);
	}

	public void removemolecule_class() {
		while (hasmolecule_class())
			removemolecule_classAt(0);
	}

	public void addmolecule_class(molecule_classType value) {
		appendDomElement(null, "molecule-class", value);	
	}

	public void insertmolecule_classAt(molecule_classType value, int index) {
		insertDomElementAt(null, "molecule-class", index, value);
	}

	public void replacemolecule_classAt(molecule_classType value, int index) {
		replaceDomElementAt(null, "molecule-class", index, value);
	}

	public static int getinteractionsMinCount() {
		return 1;
	}

	public static int getinteractionsMaxCount() {
		return 1;
	}

	public int getinteractionsCount() {
		return getDomChildCount(Element, null, "interactions");
	}

	public boolean hasinteractions() {
		return hasDomChild(Element, null, "interactions");
	}

	public interactionsType newinteractions() {
		return new interactionsType(domNode.getOwnerDocument().createElementNS(null, "interactions"));
	}

	public interactionsType getinteractionsAt(int index) throws Exception {
		return new interactionsType(dereference(getDomChildAt(Element, null, "interactions", index)));
	}

	public org.w3c.dom.Node getStartinginteractionsCursor() throws Exception {
		return getDomFirstChild(Element, null, "interactions" );
	}

	public org.w3c.dom.Node getAdvancedinteractionsCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "interactions", curNode );
	}

	public interactionsType getinteractionsValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new interactionsType( dereference(curNode) );
	}

	public interactionsType getinteractions() throws Exception 
 {
		return getinteractionsAt(0);
	}

	public void removeinteractionsAt(int index) {
		removeDomChildAt(Element, null, "interactions", index);
	}

	public void removeinteractions() {
		while (hasinteractions())
			removeinteractionsAt(0);
	}

	public void addinteractions(interactionsType value) {
		appendDomElement(null, "interactions", value);	
	}

	public void insertinteractionsAt(interactionsType value, int index) {
		insertDomElementAt(null, "interactions", index, value);
	}

	public void replaceinteractionsAt(interactionsType value, int index) {
		replaceDomElementAt(null, "interactions", index, value);
	}

	public static int getreferenceMinCount() {
		return 1;
	}

	public static int getreferenceMaxCount() {
		return 1;
	}

	public int getreferenceCount() {
		return getDomChildCount(Element, null, "reference");
	}

	public boolean hasreference() {
		return hasDomChild(Element, null, "reference");
	}

	public referenceType newreference() {
		return new referenceType(domNode.getOwnerDocument().createElementNS(null, "reference"));
	}

	public referenceType getreferenceAt(int index) throws Exception {
		return new referenceType(dereference(getDomChildAt(Element, null, "reference", index)));
	}

	public org.w3c.dom.Node getStartingreferenceCursor() throws Exception {
		return getDomFirstChild(Element, null, "reference" );
	}

	public org.w3c.dom.Node getAdvancedreferenceCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "reference", curNode );
	}

	public referenceType getreferenceValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new referenceType( dereference(curNode) );
	}

	public referenceType getreference() throws Exception 
 {
		return getreferenceAt(0);
	}

	public void removereferenceAt(int index) {
		removeDomChildAt(Element, null, "reference", index);
	}

	public void removereference() {
		while (hasreference())
			removereferenceAt(0);
	}

	public void addreference(referenceType value) {
		appendDomElement(null, "reference", value);	
	}

	public void insertreferenceAt(referenceType value, int index) {
		insertDomElementAt(null, "reference", index, value);
	}

	public void replacereferenceAt(referenceType value, int index) {
		replaceDomElementAt(null, "reference", index, value);
	}

	public static int getdatabase_entryMinCount() {
		return 1;
	}

	public static int getdatabase_entryMaxCount() {
		return 1;
	}

	public int getdatabase_entryCount() {
		return getDomChildCount(Element, null, "database-entry");
	}

	public boolean hasdatabase_entry() {
		return hasDomChild(Element, null, "database-entry");
	}

	public database_entryType newdatabase_entry() {
		return new database_entryType(domNode.getOwnerDocument().createElementNS(null, "database-entry"));
	}

	public database_entryType getdatabase_entryAt(int index) throws Exception {
		return new database_entryType(dereference(getDomChildAt(Element, null, "database-entry", index)));
	}

	public org.w3c.dom.Node getStartingdatabase_entryCursor() throws Exception {
		return getDomFirstChild(Element, null, "database-entry" );
	}

	public org.w3c.dom.Node getAdvanceddatabase_entryCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "database-entry", curNode );
	}

	public database_entryType getdatabase_entryValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new database_entryType( dereference(curNode) );
	}

	public database_entryType getdatabase_entry() throws Exception 
 {
		return getdatabase_entryAt(0);
	}

	public void removedatabase_entryAt(int index) {
		removeDomChildAt(Element, null, "database-entry", index);
	}

	public void removedatabase_entry() {
		while (hasdatabase_entry())
			removedatabase_entryAt(0);
	}

	public void adddatabase_entry(database_entryType value) {
		appendDomElement(null, "database-entry", value);	
	}

	public void insertdatabase_entryAt(database_entryType value, int index) {
		insertDomElementAt(null, "database-entry", index, value);
	}

	public void replacedatabase_entryAt(database_entryType value, int index) {
		replaceDomElementAt(null, "database-entry", index, value);
	}

	public static int getanalysisMinCount() {
		return 1;
	}

	public static int getanalysisMaxCount() {
		return 1;
	}

	public int getanalysisCount() {
		return getDomChildCount(Element, null, "analysis");
	}

	public boolean hasanalysis() {
		return hasDomChild(Element, null, "analysis");
	}

	public analysisType newanalysis() {
		return new analysisType(domNode.getOwnerDocument().createElementNS(null, "analysis"));
	}

	public analysisType getanalysisAt(int index) throws Exception {
		return new analysisType(dereference(getDomChildAt(Element, null, "analysis", index)));
	}

	public org.w3c.dom.Node getStartinganalysisCursor() throws Exception {
		return getDomFirstChild(Element, null, "analysis" );
	}

	public org.w3c.dom.Node getAdvancedanalysisCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "analysis", curNode );
	}

	public analysisType getanalysisValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new analysisType( dereference(curNode) );
	}

	public analysisType getanalysis() throws Exception 
 {
		return getanalysisAt(0);
	}

	public void removeanalysisAt(int index) {
		removeDomChildAt(Element, null, "analysis", index);
	}

	public void removeanalysis() {
		while (hasanalysis())
			removeanalysisAt(0);
	}

	public void addanalysis(analysisType value) {
		appendDomElement(null, "analysis", value);	
	}

	public void insertanalysisAt(analysisType value, int index) {
		insertDomElementAt(null, "analysis", index, value);
	}

	public void replaceanalysisAt(analysisType value, int index) {
		replaceDomElementAt(null, "analysis", index, value);
	}

	public static int getrevisionMinCount() {
		return 1;
	}

	public static int getrevisionMaxCount() {
		return 1;
	}

	public int getrevisionCount() {
		return getDomChildCount(Element, null, "revision");
	}

	public boolean hasrevision() {
		return hasDomChild(Element, null, "revision");
	}

	public revisionType newrevision() {
		return new revisionType(domNode.getOwnerDocument().createElementNS(null, "revision"));
	}

	public revisionType getrevisionAt(int index) throws Exception {
		return new revisionType(dereference(getDomChildAt(Element, null, "revision", index)));
	}

	public org.w3c.dom.Node getStartingrevisionCursor() throws Exception {
		return getDomFirstChild(Element, null, "revision" );
	}

	public org.w3c.dom.Node getAdvancedrevisionCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "revision", curNode );
	}

	public revisionType getrevisionValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new revisionType( dereference(curNode) );
	}

	public revisionType getrevision() throws Exception 
 {
		return getrevisionAt(0);
	}

	public void removerevisionAt(int index) {
		removeDomChildAt(Element, null, "revision", index);
	}

	public void removerevision() {
		while (hasrevision())
			removerevisionAt(0);
	}

	public void addrevision(revisionType value) {
		appendDomElement(null, "revision", value);	
	}

	public void insertrevisionAt(revisionType value, int index) {
		insertDomElementAt(null, "revision", index, value);
	}

	public void replacerevisionAt(revisionType value, int index) {
		replaceDomElementAt(null, "revision", index, value);
	}

	private org.w3c.dom.Node dereference(org.w3c.dom.Node node) {
		return node;
	}
}
