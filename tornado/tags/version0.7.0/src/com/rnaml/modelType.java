/**
 * modelType.java
 *
 * This file was generated by XMLSpy 2006r3 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSpy Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.rnaml;

import com.altova.types.*;

public class modelType extends com.altova.xml.Node {

	public modelType(modelType node) {
		super(node);
	}

	public modelType(org.w3c.dom.Node node) {
		super(node);
	}

	public modelType(org.w3c.dom.Document doc) {
		super(doc);
	}

	public modelType(com.altova.xml.Document doc, String namespaceURI, String prefix, String name) {
		super(doc, namespaceURI, prefix, name);
	}
	
	public void adjustPrefix() {
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "id" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "id", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "comment" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "comment", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "reference-ids" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "reference-ids", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "analysis-ids" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "analysis-ids", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "database-ids" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "database-ids", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "model-info" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "model-info", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new model_infoType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "base" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "base", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new baseType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "str-annotation" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "str-annotation", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new str_annotationType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "secondary-structure-display" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "secondary-structure-display", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new secondary_structure_displayType(tmpNode).adjustPrefix();
		}
	}

	public static int getidMinCount() {
		return 0;
	}

	public static int getidMaxCount() {
		return 1;
	}

	public int getidCount() {
		return getDomChildCount(Attribute, null, "id");
	}

	public boolean hasid() {
		return hasDomChild(Attribute, null, "id");
	}

	public SchemaString newid() {
		return new SchemaString();
	}

	public SchemaString getidAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "id", index))));
	}

	public org.w3c.dom.Node getStartingidCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "id" );
	}

	public org.w3c.dom.Node getAdvancedidCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "id", curNode );
	}

	public SchemaString getidValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaString(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaString getid() throws Exception 
 {
		return getidAt(0);
	}

	public void removeidAt(int index) {
		removeDomChildAt(Attribute, null, "id", index);
	}

	public void removeid() {
		while (hasid())
			removeidAt(0);
	}

	public void addid(SchemaString value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "id", value.toString());
		}
	}

	public void addid(String value) throws Exception {
		addid(new SchemaString(value));
	}

	public void insertidAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "id", index, value.toString());
	}

	public void insertidAt(String value, int index) throws Exception {
		insertidAt(new SchemaString(value), index);
	}

	public void replaceidAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "id", index, value.toString());
	}

	public void replaceidAt(String value, int index) throws Exception {
		replaceidAt(new SchemaString(value), index);
	}

	public static int getcommentMinCount() {
		return 0;
	}

	public static int getcommentMaxCount() {
		return 1;
	}

	public int getcommentCount() {
		return getDomChildCount(Attribute, null, "comment");
	}

	public boolean hascomment() {
		return hasDomChild(Attribute, null, "comment");
	}

	public SchemaString newcomment() {
		return new SchemaString();
	}

	public SchemaString getcommentAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "comment", index))));
	}

	public org.w3c.dom.Node getStartingcommentCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "comment" );
	}

	public org.w3c.dom.Node getAdvancedcommentCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "comment", curNode );
	}

	public SchemaString getcommentValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaString(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaString getcomment() throws Exception 
 {
		return getcommentAt(0);
	}

	public void removecommentAt(int index) {
		removeDomChildAt(Attribute, null, "comment", index);
	}

	public void removecomment() {
		while (hascomment())
			removecommentAt(0);
	}

	public void addcomment(SchemaString value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "comment", value.toString());
		}
	}

	public void addcomment(String value) throws Exception {
		addcomment(new SchemaString(value));
	}

	public void insertcommentAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "comment", index, value.toString());
	}

	public void insertcommentAt(String value, int index) throws Exception {
		insertcommentAt(new SchemaString(value), index);
	}

	public void replacecommentAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "comment", index, value.toString());
	}

	public void replacecommentAt(String value, int index) throws Exception {
		replacecommentAt(new SchemaString(value), index);
	}

	public static int getreference_idsMinCount() {
		return 0;
	}

	public static int getreference_idsMaxCount() {
		return 1;
	}

	public int getreference_idsCount() {
		return getDomChildCount(Attribute, null, "reference-ids");
	}

	public boolean hasreference_ids() {
		return hasDomChild(Attribute, null, "reference-ids");
	}

	public SchemaIDRef newreference_ids() {
		return new SchemaIDRef();
	}

	public SchemaIDRef getreference_idsAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "reference-ids", index))));
	}

	public org.w3c.dom.Node getStartingreference_idsCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "reference-ids" );
	}

	public org.w3c.dom.Node getAdvancedreference_idsCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "reference-ids", curNode );
	}

	public SchemaIDRef getreference_idsValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaIDRef(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaIDRef getreference_ids() throws Exception 
 {
		return getreference_idsAt(0);
	}

	public void removereference_idsAt(int index) {
		removeDomChildAt(Attribute, null, "reference-ids", index);
	}

	public void removereference_ids() {
		while (hasreference_ids())
			removereference_idsAt(0);
	}

	public void addreference_ids(SchemaIDRef value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "reference-ids", value.toString());
		}
	}

	public void addreference_ids(String value) throws Exception {
		addreference_ids(new SchemaIDRef(value));
	}

	public void insertreference_idsAt(SchemaIDRef value, int index) {
		insertDomChildAt(Attribute, null, "reference-ids", index, value.toString());
	}

	public void insertreference_idsAt(String value, int index) throws Exception {
		insertreference_idsAt(new SchemaIDRef(value), index);
	}

	public void replacereference_idsAt(SchemaIDRef value, int index) {
		replaceDomChildAt(Attribute, null, "reference-ids", index, value.toString());
	}

	public void replacereference_idsAt(String value, int index) throws Exception {
		replacereference_idsAt(new SchemaIDRef(value), index);
	}

	public static int getanalysis_idsMinCount() {
		return 0;
	}

	public static int getanalysis_idsMaxCount() {
		return 1;
	}

	public int getanalysis_idsCount() {
		return getDomChildCount(Attribute, null, "analysis-ids");
	}

	public boolean hasanalysis_ids() {
		return hasDomChild(Attribute, null, "analysis-ids");
	}

	public SchemaIDRef newanalysis_ids() {
		return new SchemaIDRef();
	}

	public SchemaIDRef getanalysis_idsAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "analysis-ids", index))));
	}

	public org.w3c.dom.Node getStartinganalysis_idsCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "analysis-ids" );
	}

	public org.w3c.dom.Node getAdvancedanalysis_idsCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "analysis-ids", curNode );
	}

	public SchemaIDRef getanalysis_idsValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaIDRef(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaIDRef getanalysis_ids() throws Exception 
 {
		return getanalysis_idsAt(0);
	}

	public void removeanalysis_idsAt(int index) {
		removeDomChildAt(Attribute, null, "analysis-ids", index);
	}

	public void removeanalysis_ids() {
		while (hasanalysis_ids())
			removeanalysis_idsAt(0);
	}

	public void addanalysis_ids(SchemaIDRef value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "analysis-ids", value.toString());
		}
	}

	public void addanalysis_ids(String value) throws Exception {
		addanalysis_ids(new SchemaIDRef(value));
	}

	public void insertanalysis_idsAt(SchemaIDRef value, int index) {
		insertDomChildAt(Attribute, null, "analysis-ids", index, value.toString());
	}

	public void insertanalysis_idsAt(String value, int index) throws Exception {
		insertanalysis_idsAt(new SchemaIDRef(value), index);
	}

	public void replaceanalysis_idsAt(SchemaIDRef value, int index) {
		replaceDomChildAt(Attribute, null, "analysis-ids", index, value.toString());
	}

	public void replaceanalysis_idsAt(String value, int index) throws Exception {
		replaceanalysis_idsAt(new SchemaIDRef(value), index);
	}

	public static int getdatabase_idsMinCount() {
		return 0;
	}

	public static int getdatabase_idsMaxCount() {
		return 1;
	}

	public int getdatabase_idsCount() {
		return getDomChildCount(Attribute, null, "database-ids");
	}

	public boolean hasdatabase_ids() {
		return hasDomChild(Attribute, null, "database-ids");
	}

	public SchemaIDRef newdatabase_ids() {
		return new SchemaIDRef();
	}

	public SchemaIDRef getdatabase_idsAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "database-ids", index))));
	}

	public org.w3c.dom.Node getStartingdatabase_idsCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "database-ids" );
	}

	public org.w3c.dom.Node getAdvanceddatabase_idsCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "database-ids", curNode );
	}

	public SchemaIDRef getdatabase_idsValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaIDRef(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaIDRef getdatabase_ids() throws Exception 
 {
		return getdatabase_idsAt(0);
	}

	public void removedatabase_idsAt(int index) {
		removeDomChildAt(Attribute, null, "database-ids", index);
	}

	public void removedatabase_ids() {
		while (hasdatabase_ids())
			removedatabase_idsAt(0);
	}

	public void adddatabase_ids(SchemaIDRef value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "database-ids", value.toString());
		}
	}

	public void adddatabase_ids(String value) throws Exception {
		adddatabase_ids(new SchemaIDRef(value));
	}

	public void insertdatabase_idsAt(SchemaIDRef value, int index) {
		insertDomChildAt(Attribute, null, "database-ids", index, value.toString());
	}

	public void insertdatabase_idsAt(String value, int index) throws Exception {
		insertdatabase_idsAt(new SchemaIDRef(value), index);
	}

	public void replacedatabase_idsAt(SchemaIDRef value, int index) {
		replaceDomChildAt(Attribute, null, "database-ids", index, value.toString());
	}

	public void replacedatabase_idsAt(String value, int index) throws Exception {
		replacedatabase_idsAt(new SchemaIDRef(value), index);
	}

	public static int getmodel_infoMinCount() {
		return 0;
	}

	public static int getmodel_infoMaxCount() {
		return 1;
	}

	public int getmodel_infoCount() {
		return getDomChildCount(Element, null, "model-info");
	}

	public boolean hasmodel_info() {
		return hasDomChild(Element, null, "model-info");
	}

	public model_infoType newmodel_info() {
		return new model_infoType(domNode.getOwnerDocument().createElementNS(null, "model-info"));
	}

	public model_infoType getmodel_infoAt(int index) throws Exception {
		return new model_infoType(dereference(getDomChildAt(Element, null, "model-info", index)));
	}

	public org.w3c.dom.Node getStartingmodel_infoCursor() throws Exception {
		return getDomFirstChild(Element, null, "model-info" );
	}

	public org.w3c.dom.Node getAdvancedmodel_infoCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "model-info", curNode );
	}

	public model_infoType getmodel_infoValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new model_infoType( dereference(curNode) );
	}

	public model_infoType getmodel_info() throws Exception 
 {
		return getmodel_infoAt(0);
	}

	public void removemodel_infoAt(int index) {
		removeDomChildAt(Element, null, "model-info", index);
	}

	public void removemodel_info() {
		while (hasmodel_info())
			removemodel_infoAt(0);
	}

	public void addmodel_info(model_infoType value) {
		appendDomElement(null, "model-info", value);	
	}

	public void insertmodel_infoAt(model_infoType value, int index) {
		insertDomElementAt(null, "model-info", index, value);
	}

	public void replacemodel_infoAt(model_infoType value, int index) {
		replaceDomElementAt(null, "model-info", index, value);
	}

	public static int getbaseMinCount() {
		return 0;
	}

	public static int getbaseMaxCount() {
		return Integer.MAX_VALUE;
	}

	public int getbaseCount() {
		return getDomChildCount(Element, null, "base");
	}

	public boolean hasbase() {
		return hasDomChild(Element, null, "base");
	}

	public baseType newbase() {
		return new baseType(domNode.getOwnerDocument().createElementNS(null, "base"));
	}

	public baseType getbaseAt(int index) throws Exception {
		return new baseType(dereference(getDomChildAt(Element, null, "base", index)));
	}

	public org.w3c.dom.Node getStartingbaseCursor() throws Exception {
		return getDomFirstChild(Element, null, "base" );
	}

	public org.w3c.dom.Node getAdvancedbaseCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "base", curNode );
	}

	public baseType getbaseValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new baseType( dereference(curNode) );
	}

	public baseType getbase() throws Exception 
 {
		return getbaseAt(0);
	}

	public void removebaseAt(int index) {
		removeDomChildAt(Element, null, "base", index);
	}

	public void removebase() {
		while (hasbase())
			removebaseAt(0);
	}

	public void addbase(baseType value) {
		appendDomElement(null, "base", value);	
	}

	public void insertbaseAt(baseType value, int index) {
		insertDomElementAt(null, "base", index, value);
	}

	public void replacebaseAt(baseType value, int index) {
		replaceDomElementAt(null, "base", index, value);
	}

	public static int getstr_annotationMinCount() {
		return 0;
	}

	public static int getstr_annotationMaxCount() {
		return 1;
	}

	public int getstr_annotationCount() {
		return getDomChildCount(Element, null, "str-annotation");
	}

	public boolean hasstr_annotation() {
		return hasDomChild(Element, null, "str-annotation");
	}

	public str_annotationType newstr_annotation() {
		return new str_annotationType(domNode.getOwnerDocument().createElementNS(null, "str-annotation"));
	}

	public str_annotationType getstr_annotationAt(int index) throws Exception {
		return new str_annotationType(dereference(getDomChildAt(Element, null, "str-annotation", index)));
	}

	public org.w3c.dom.Node getStartingstr_annotationCursor() throws Exception {
		return getDomFirstChild(Element, null, "str-annotation" );
	}

	public org.w3c.dom.Node getAdvancedstr_annotationCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "str-annotation", curNode );
	}

	public str_annotationType getstr_annotationValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new str_annotationType( dereference(curNode) );
	}

	public str_annotationType getstr_annotation() throws Exception 
 {
		return getstr_annotationAt(0);
	}

	public void removestr_annotationAt(int index) {
		removeDomChildAt(Element, null, "str-annotation", index);
	}

	public void removestr_annotation() {
		while (hasstr_annotation())
			removestr_annotationAt(0);
	}

	public void addstr_annotation(str_annotationType value) {
		appendDomElement(null, "str-annotation", value);	
	}

	public void insertstr_annotationAt(str_annotationType value, int index) {
		insertDomElementAt(null, "str-annotation", index, value);
	}

	public void replacestr_annotationAt(str_annotationType value, int index) {
		replaceDomElementAt(null, "str-annotation", index, value);
	}

	public static int getsecondary_structure_displayMinCount() {
		return 0;
	}

	public static int getsecondary_structure_displayMaxCount() {
		return 1;
	}

	public int getsecondary_structure_displayCount() {
		return getDomChildCount(Element, null, "secondary-structure-display");
	}

	public boolean hassecondary_structure_display() {
		return hasDomChild(Element, null, "secondary-structure-display");
	}

	public secondary_structure_displayType newsecondary_structure_display() {
		return new secondary_structure_displayType(domNode.getOwnerDocument().createElementNS(null, "secondary-structure-display"));
	}

	public secondary_structure_displayType getsecondary_structure_displayAt(int index) throws Exception {
		return new secondary_structure_displayType(dereference(getDomChildAt(Element, null, "secondary-structure-display", index)));
	}

	public org.w3c.dom.Node getStartingsecondary_structure_displayCursor() throws Exception {
		return getDomFirstChild(Element, null, "secondary-structure-display" );
	}

	public org.w3c.dom.Node getAdvancedsecondary_structure_displayCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "secondary-structure-display", curNode );
	}

	public secondary_structure_displayType getsecondary_structure_displayValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new secondary_structure_displayType( dereference(curNode) );
	}

	public secondary_structure_displayType getsecondary_structure_display() throws Exception 
 {
		return getsecondary_structure_displayAt(0);
	}

	public void removesecondary_structure_displayAt(int index) {
		removeDomChildAt(Element, null, "secondary-structure-display", index);
	}

	public void removesecondary_structure_display() {
		while (hassecondary_structure_display())
			removesecondary_structure_displayAt(0);
	}

	public void addsecondary_structure_display(secondary_structure_displayType value) {
		appendDomElement(null, "secondary-structure-display", value);	
	}

	public void insertsecondary_structure_displayAt(secondary_structure_displayType value, int index) {
		insertDomElementAt(null, "secondary-structure-display", index, value);
	}

	public void replacesecondary_structure_displayAt(secondary_structure_displayType value, int index) {
		replaceDomElementAt(null, "secondary-structure-display", index, value);
	}

	private org.w3c.dom.Node dereference(org.w3c.dom.Node node) {
		return node;
	}
}
