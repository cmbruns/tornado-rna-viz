/**
 * pathType.java
 *
 * This file was generated by XMLSpy 2006r3 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSpy Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.rnaml;

import com.altova.types.*;

public class pathType extends com.altova.xml.Node {

	public pathType(pathType node) {
		super(node);
	}

	public pathType(org.w3c.dom.Node node) {
		super(node);
	}

	public pathType(org.w3c.dom.Document doc) {
		super(doc);
	}

	public pathType(com.altova.xml.Document doc, String namespaceURI, String prefix, String name) {
		super(doc, namespaceURI, prefix, name);
	}
	
	public void adjustPrefix() {
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "url" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "url", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new urlType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "file" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "file", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new fileType(tmpNode).adjustPrefix();
		}
	}

	public static int geturlMinCount() {
		return 1;
	}

	public static int geturlMaxCount() {
		return 1;
	}

	public int geturlCount() {
		return getDomChildCount(Element, null, "url");
	}

	public boolean hasurl() {
		return hasDomChild(Element, null, "url");
	}

	public urlType newurl() {
		return new urlType(domNode.getOwnerDocument().createElementNS(null, "url"));
	}

	public urlType geturlAt(int index) throws Exception {
		return new urlType(dereference(getDomChildAt(Element, null, "url", index)));
	}

	public org.w3c.dom.Node getStartingurlCursor() throws Exception {
		return getDomFirstChild(Element, null, "url" );
	}

	public org.w3c.dom.Node getAdvancedurlCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "url", curNode );
	}

	public urlType geturlValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new urlType( dereference(curNode) );
	}

	public urlType geturl() throws Exception 
 {
		return geturlAt(0);
	}

	public void removeurlAt(int index) {
		removeDomChildAt(Element, null, "url", index);
	}

	public void removeurl() {
		while (hasurl())
			removeurlAt(0);
	}

	public void addurl(urlType value) {
		appendDomElement(null, "url", value);	
	}

	public void inserturlAt(urlType value, int index) {
		insertDomElementAt(null, "url", index, value);
	}

	public void replaceurlAt(urlType value, int index) {
		replaceDomElementAt(null, "url", index, value);
	}

	public static int getfileMinCount() {
		return 1;
	}

	public static int getfileMaxCount() {
		return 1;
	}

	public int getfileCount() {
		return getDomChildCount(Element, null, "file");
	}

	public boolean hasfile() {
		return hasDomChild(Element, null, "file");
	}

	public fileType newfile() {
		return new fileType(domNode.getOwnerDocument().createElementNS(null, "file"));
	}

	public fileType getfileAt(int index) throws Exception {
		return new fileType(dereference(getDomChildAt(Element, null, "file", index)));
	}

	public org.w3c.dom.Node getStartingfileCursor() throws Exception {
		return getDomFirstChild(Element, null, "file" );
	}

	public org.w3c.dom.Node getAdvancedfileCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "file", curNode );
	}

	public fileType getfileValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new fileType( dereference(curNode) );
	}

	public fileType getfile() throws Exception 
 {
		return getfileAt(0);
	}

	public void removefileAt(int index) {
		removeDomChildAt(Element, null, "file", index);
	}

	public void removefile() {
		while (hasfile())
			removefileAt(0);
	}

	public void addfile(fileType value) {
		appendDomElement(null, "file", value);	
	}

	public void insertfileAt(fileType value, int index) {
		insertDomElementAt(null, "file", index, value);
	}

	public void replacefileAt(fileType value, int index) {
		replaceDomElementAt(null, "file", index, value);
	}

	private org.w3c.dom.Node dereference(org.w3c.dom.Node node) {
		return node;
	}
}
