/**
 * molecule_classType.java
 *
 * This file was generated by XMLSpy 2006r3 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSpy Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.rnaml;

import com.altova.types.*;

public class molecule_classType extends com.altova.xml.Node {

	public molecule_classType(molecule_classType node) {
		super(node);
	}

	public molecule_classType(org.w3c.dom.Node node) {
		super(node);
	}

	public molecule_classType(org.w3c.dom.Document doc) {
		super(doc);
	}

	public molecule_classType(com.altova.xml.Document doc, String namespaceURI, String prefix, String name) {
		super(doc, namespaceURI, prefix, name);
	}
	
	public void adjustPrefix() {
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "comment" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "comment", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "reference-ids" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "reference-ids", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "analysis-ids" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "analysis-ids", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "database-ids" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "database-ids", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "identity" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "identity", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new identityType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "molecule" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "molecule", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new moleculeType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "molecule-id" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "molecule-id", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new molecule_idType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "numbering-system" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "numbering-system", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new numbering_systemType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "consensus-molecule" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "consensus-molecule", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new consensus_moleculeType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "alignment" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "alignment", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new alignmentType(tmpNode).adjustPrefix();
		}
	}

	public static int getcommentMinCount() {
		return 0;
	}

	public static int getcommentMaxCount() {
		return 1;
	}

	public int getcommentCount() {
		return getDomChildCount(Attribute, null, "comment");
	}

	public boolean hascomment() {
		return hasDomChild(Attribute, null, "comment");
	}

	public SchemaString newcomment() {
		return new SchemaString();
	}

	public SchemaString getcommentAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "comment", index))));
	}

	public org.w3c.dom.Node getStartingcommentCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "comment" );
	}

	public org.w3c.dom.Node getAdvancedcommentCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "comment", curNode );
	}

	public SchemaString getcommentValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaString(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaString getcomment() throws Exception 
 {
		return getcommentAt(0);
	}

	public void removecommentAt(int index) {
		removeDomChildAt(Attribute, null, "comment", index);
	}

	public void removecomment() {
		while (hascomment())
			removecommentAt(0);
	}

	public void addcomment(SchemaString value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "comment", value.toString());
		}
	}

	public void addcomment(String value) throws Exception {
		addcomment(new SchemaString(value));
	}

	public void insertcommentAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "comment", index, value.toString());
	}

	public void insertcommentAt(String value, int index) throws Exception {
		insertcommentAt(new SchemaString(value), index);
	}

	public void replacecommentAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "comment", index, value.toString());
	}

	public void replacecommentAt(String value, int index) throws Exception {
		replacecommentAt(new SchemaString(value), index);
	}

	public static int getreference_idsMinCount() {
		return 0;
	}

	public static int getreference_idsMaxCount() {
		return 1;
	}

	public int getreference_idsCount() {
		return getDomChildCount(Attribute, null, "reference-ids");
	}

	public boolean hasreference_ids() {
		return hasDomChild(Attribute, null, "reference-ids");
	}

	public SchemaIDRef newreference_ids() {
		return new SchemaIDRef();
	}

	public SchemaIDRef getreference_idsAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "reference-ids", index))));
	}

	public org.w3c.dom.Node getStartingreference_idsCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "reference-ids" );
	}

	public org.w3c.dom.Node getAdvancedreference_idsCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "reference-ids", curNode );
	}

	public SchemaIDRef getreference_idsValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaIDRef(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaIDRef getreference_ids() throws Exception 
 {
		return getreference_idsAt(0);
	}

	public void removereference_idsAt(int index) {
		removeDomChildAt(Attribute, null, "reference-ids", index);
	}

	public void removereference_ids() {
		while (hasreference_ids())
			removereference_idsAt(0);
	}

	public void addreference_ids(SchemaIDRef value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "reference-ids", value.toString());
		}
	}

	public void addreference_ids(String value) throws Exception {
		addreference_ids(new SchemaIDRef(value));
	}

	public void insertreference_idsAt(SchemaIDRef value, int index) {
		insertDomChildAt(Attribute, null, "reference-ids", index, value.toString());
	}

	public void insertreference_idsAt(String value, int index) throws Exception {
		insertreference_idsAt(new SchemaIDRef(value), index);
	}

	public void replacereference_idsAt(SchemaIDRef value, int index) {
		replaceDomChildAt(Attribute, null, "reference-ids", index, value.toString());
	}

	public void replacereference_idsAt(String value, int index) throws Exception {
		replacereference_idsAt(new SchemaIDRef(value), index);
	}

	public static int getanalysis_idsMinCount() {
		return 0;
	}

	public static int getanalysis_idsMaxCount() {
		return 1;
	}

	public int getanalysis_idsCount() {
		return getDomChildCount(Attribute, null, "analysis-ids");
	}

	public boolean hasanalysis_ids() {
		return hasDomChild(Attribute, null, "analysis-ids");
	}

	public SchemaIDRef newanalysis_ids() {
		return new SchemaIDRef();
	}

	public SchemaIDRef getanalysis_idsAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "analysis-ids", index))));
	}

	public org.w3c.dom.Node getStartinganalysis_idsCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "analysis-ids" );
	}

	public org.w3c.dom.Node getAdvancedanalysis_idsCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "analysis-ids", curNode );
	}

	public SchemaIDRef getanalysis_idsValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaIDRef(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaIDRef getanalysis_ids() throws Exception 
 {
		return getanalysis_idsAt(0);
	}

	public void removeanalysis_idsAt(int index) {
		removeDomChildAt(Attribute, null, "analysis-ids", index);
	}

	public void removeanalysis_ids() {
		while (hasanalysis_ids())
			removeanalysis_idsAt(0);
	}

	public void addanalysis_ids(SchemaIDRef value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "analysis-ids", value.toString());
		}
	}

	public void addanalysis_ids(String value) throws Exception {
		addanalysis_ids(new SchemaIDRef(value));
	}

	public void insertanalysis_idsAt(SchemaIDRef value, int index) {
		insertDomChildAt(Attribute, null, "analysis-ids", index, value.toString());
	}

	public void insertanalysis_idsAt(String value, int index) throws Exception {
		insertanalysis_idsAt(new SchemaIDRef(value), index);
	}

	public void replaceanalysis_idsAt(SchemaIDRef value, int index) {
		replaceDomChildAt(Attribute, null, "analysis-ids", index, value.toString());
	}

	public void replaceanalysis_idsAt(String value, int index) throws Exception {
		replaceanalysis_idsAt(new SchemaIDRef(value), index);
	}

	public static int getdatabase_idsMinCount() {
		return 0;
	}

	public static int getdatabase_idsMaxCount() {
		return 1;
	}

	public int getdatabase_idsCount() {
		return getDomChildCount(Attribute, null, "database-ids");
	}

	public boolean hasdatabase_ids() {
		return hasDomChild(Attribute, null, "database-ids");
	}

	public SchemaIDRef newdatabase_ids() {
		return new SchemaIDRef();
	}

	public SchemaIDRef getdatabase_idsAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "database-ids", index))));
	}

	public org.w3c.dom.Node getStartingdatabase_idsCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "database-ids" );
	}

	public org.w3c.dom.Node getAdvanceddatabase_idsCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "database-ids", curNode );
	}

	public SchemaIDRef getdatabase_idsValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaIDRef(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaIDRef getdatabase_ids() throws Exception 
 {
		return getdatabase_idsAt(0);
	}

	public void removedatabase_idsAt(int index) {
		removeDomChildAt(Attribute, null, "database-ids", index);
	}

	public void removedatabase_ids() {
		while (hasdatabase_ids())
			removedatabase_idsAt(0);
	}

	public void adddatabase_ids(SchemaIDRef value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "database-ids", value.toString());
		}
	}

	public void adddatabase_ids(String value) throws Exception {
		adddatabase_ids(new SchemaIDRef(value));
	}

	public void insertdatabase_idsAt(SchemaIDRef value, int index) {
		insertDomChildAt(Attribute, null, "database-ids", index, value.toString());
	}

	public void insertdatabase_idsAt(String value, int index) throws Exception {
		insertdatabase_idsAt(new SchemaIDRef(value), index);
	}

	public void replacedatabase_idsAt(SchemaIDRef value, int index) {
		replaceDomChildAt(Attribute, null, "database-ids", index, value.toString());
	}

	public void replacedatabase_idsAt(String value, int index) throws Exception {
		replacedatabase_idsAt(new SchemaIDRef(value), index);
	}

	public static int getidentityMinCount() {
		return 0;
	}

	public static int getidentityMaxCount() {
		return 1;
	}

	public int getidentityCount() {
		return getDomChildCount(Element, null, "identity");
	}

	public boolean hasidentity() {
		return hasDomChild(Element, null, "identity");
	}

	public identityType newidentity() {
		return new identityType(domNode.getOwnerDocument().createElementNS(null, "identity"));
	}

	public identityType getidentityAt(int index) throws Exception {
		return new identityType(dereference(getDomChildAt(Element, null, "identity", index)));
	}

	public org.w3c.dom.Node getStartingidentityCursor() throws Exception {
		return getDomFirstChild(Element, null, "identity" );
	}

	public org.w3c.dom.Node getAdvancedidentityCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "identity", curNode );
	}

	public identityType getidentityValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new identityType( dereference(curNode) );
	}

	public identityType getidentity() throws Exception 
 {
		return getidentityAt(0);
	}

	public void removeidentityAt(int index) {
		removeDomChildAt(Element, null, "identity", index);
	}

	public void removeidentity() {
		while (hasidentity())
			removeidentityAt(0);
	}

	public void addidentity(identityType value) {
		appendDomElement(null, "identity", value);	
	}

	public void insertidentityAt(identityType value, int index) {
		insertDomElementAt(null, "identity", index, value);
	}

	public void replaceidentityAt(identityType value, int index) {
		replaceDomElementAt(null, "identity", index, value);
	}

	public static int getmoleculeMinCount() {
		return 1;
	}

	public static int getmoleculeMaxCount() {
		return 1;
	}

	public int getmoleculeCount() {
		return getDomChildCount(Element, null, "molecule");
	}

	public boolean hasmolecule() {
		return hasDomChild(Element, null, "molecule");
	}

	public moleculeType newmolecule() {
		return new moleculeType(domNode.getOwnerDocument().createElementNS(null, "molecule"));
	}

	public moleculeType getmoleculeAt(int index) throws Exception {
		return new moleculeType(dereference(getDomChildAt(Element, null, "molecule", index)));
	}

	public org.w3c.dom.Node getStartingmoleculeCursor() throws Exception {
		return getDomFirstChild(Element, null, "molecule" );
	}

	public org.w3c.dom.Node getAdvancedmoleculeCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "molecule", curNode );
	}

	public moleculeType getmoleculeValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new moleculeType( dereference(curNode) );
	}

	public moleculeType getmolecule() throws Exception 
 {
		return getmoleculeAt(0);
	}

	public void removemoleculeAt(int index) {
		removeDomChildAt(Element, null, "molecule", index);
	}

	public void removemolecule() {
		while (hasmolecule())
			removemoleculeAt(0);
	}

	public void addmolecule(moleculeType value) {
		appendDomElement(null, "molecule", value);	
	}

	public void insertmoleculeAt(moleculeType value, int index) {
		insertDomElementAt(null, "molecule", index, value);
	}

	public void replacemoleculeAt(moleculeType value, int index) {
		replaceDomElementAt(null, "molecule", index, value);
	}

	public static int getmolecule_idMinCount() {
		return 1;
	}

	public static int getmolecule_idMaxCount() {
		return 1;
	}

	public int getmolecule_idCount() {
		return getDomChildCount(Element, null, "molecule-id");
	}

	public boolean hasmolecule_id() {
		return hasDomChild(Element, null, "molecule-id");
	}

	public molecule_idType newmolecule_id() {
		return new molecule_idType(domNode.getOwnerDocument().createElementNS(null, "molecule-id"));
	}

	public molecule_idType getmolecule_idAt(int index) throws Exception {
		return new molecule_idType(dereference(getDomChildAt(Element, null, "molecule-id", index)));
	}

	public org.w3c.dom.Node getStartingmolecule_idCursor() throws Exception {
		return getDomFirstChild(Element, null, "molecule-id" );
	}

	public org.w3c.dom.Node getAdvancedmolecule_idCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "molecule-id", curNode );
	}

	public molecule_idType getmolecule_idValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new molecule_idType( dereference(curNode) );
	}

	public molecule_idType getmolecule_id() throws Exception 
 {
		return getmolecule_idAt(0);
	}

	public void removemolecule_idAt(int index) {
		removeDomChildAt(Element, null, "molecule-id", index);
	}

	public void removemolecule_id() {
		while (hasmolecule_id())
			removemolecule_idAt(0);
	}

	public void addmolecule_id(molecule_idType value) {
		appendDomElement(null, "molecule-id", value);	
	}

	public void insertmolecule_idAt(molecule_idType value, int index) {
		insertDomElementAt(null, "molecule-id", index, value);
	}

	public void replacemolecule_idAt(molecule_idType value, int index) {
		replaceDomElementAt(null, "molecule-id", index, value);
	}

	public static int getnumbering_systemMinCount() {
		return 1;
	}

	public static int getnumbering_systemMaxCount() {
		return 1;
	}

	public int getnumbering_systemCount() {
		return getDomChildCount(Element, null, "numbering-system");
	}

	public boolean hasnumbering_system() {
		return hasDomChild(Element, null, "numbering-system");
	}

	public numbering_systemType newnumbering_system() {
		return new numbering_systemType(domNode.getOwnerDocument().createElementNS(null, "numbering-system"));
	}

	public numbering_systemType getnumbering_systemAt(int index) throws Exception {
		return new numbering_systemType(dereference(getDomChildAt(Element, null, "numbering-system", index)));
	}

	public org.w3c.dom.Node getStartingnumbering_systemCursor() throws Exception {
		return getDomFirstChild(Element, null, "numbering-system" );
	}

	public org.w3c.dom.Node getAdvancednumbering_systemCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "numbering-system", curNode );
	}

	public numbering_systemType getnumbering_systemValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new numbering_systemType( dereference(curNode) );
	}

	public numbering_systemType getnumbering_system() throws Exception 
 {
		return getnumbering_systemAt(0);
	}

	public void removenumbering_systemAt(int index) {
		removeDomChildAt(Element, null, "numbering-system", index);
	}

	public void removenumbering_system() {
		while (hasnumbering_system())
			removenumbering_systemAt(0);
	}

	public void addnumbering_system(numbering_systemType value) {
		appendDomElement(null, "numbering-system", value);	
	}

	public void insertnumbering_systemAt(numbering_systemType value, int index) {
		insertDomElementAt(null, "numbering-system", index, value);
	}

	public void replacenumbering_systemAt(numbering_systemType value, int index) {
		replaceDomElementAt(null, "numbering-system", index, value);
	}

	public static int getconsensus_moleculeMinCount() {
		return 1;
	}

	public static int getconsensus_moleculeMaxCount() {
		return 1;
	}

	public int getconsensus_moleculeCount() {
		return getDomChildCount(Element, null, "consensus-molecule");
	}

	public boolean hasconsensus_molecule() {
		return hasDomChild(Element, null, "consensus-molecule");
	}

	public consensus_moleculeType newconsensus_molecule() {
		return new consensus_moleculeType(domNode.getOwnerDocument().createElementNS(null, "consensus-molecule"));
	}

	public consensus_moleculeType getconsensus_moleculeAt(int index) throws Exception {
		return new consensus_moleculeType(dereference(getDomChildAt(Element, null, "consensus-molecule", index)));
	}

	public org.w3c.dom.Node getStartingconsensus_moleculeCursor() throws Exception {
		return getDomFirstChild(Element, null, "consensus-molecule" );
	}

	public org.w3c.dom.Node getAdvancedconsensus_moleculeCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "consensus-molecule", curNode );
	}

	public consensus_moleculeType getconsensus_moleculeValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new consensus_moleculeType( dereference(curNode) );
	}

	public consensus_moleculeType getconsensus_molecule() throws Exception 
 {
		return getconsensus_moleculeAt(0);
	}

	public void removeconsensus_moleculeAt(int index) {
		removeDomChildAt(Element, null, "consensus-molecule", index);
	}

	public void removeconsensus_molecule() {
		while (hasconsensus_molecule())
			removeconsensus_moleculeAt(0);
	}

	public void addconsensus_molecule(consensus_moleculeType value) {
		appendDomElement(null, "consensus-molecule", value);	
	}

	public void insertconsensus_moleculeAt(consensus_moleculeType value, int index) {
		insertDomElementAt(null, "consensus-molecule", index, value);
	}

	public void replaceconsensus_moleculeAt(consensus_moleculeType value, int index) {
		replaceDomElementAt(null, "consensus-molecule", index, value);
	}

	public static int getalignmentMinCount() {
		return 1;
	}

	public static int getalignmentMaxCount() {
		return 1;
	}

	public int getalignmentCount() {
		return getDomChildCount(Element, null, "alignment");
	}

	public boolean hasalignment() {
		return hasDomChild(Element, null, "alignment");
	}

	public alignmentType newalignment() {
		return new alignmentType(domNode.getOwnerDocument().createElementNS(null, "alignment"));
	}

	public alignmentType getalignmentAt(int index) throws Exception {
		return new alignmentType(dereference(getDomChildAt(Element, null, "alignment", index)));
	}

	public org.w3c.dom.Node getStartingalignmentCursor() throws Exception {
		return getDomFirstChild(Element, null, "alignment" );
	}

	public org.w3c.dom.Node getAdvancedalignmentCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "alignment", curNode );
	}

	public alignmentType getalignmentValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new alignmentType( dereference(curNode) );
	}

	public alignmentType getalignment() throws Exception 
 {
		return getalignmentAt(0);
	}

	public void removealignmentAt(int index) {
		removeDomChildAt(Element, null, "alignment", index);
	}

	public void removealignment() {
		while (hasalignment())
			removealignmentAt(0);
	}

	public void addalignment(alignmentType value) {
		appendDomElement(null, "alignment", value);	
	}

	public void insertalignmentAt(alignmentType value, int index) {
		insertDomElementAt(null, "alignment", index, value);
	}

	public void replacealignmentAt(alignmentType value, int index) {
		replaceDomElementAt(null, "alignment", index, value);
	}

	private org.w3c.dom.Node dereference(org.w3c.dom.Node node) {
		return node;
	}
}
