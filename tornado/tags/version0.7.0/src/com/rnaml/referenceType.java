/**
 * referenceType.java
 *
 * This file was generated by XMLSpy 2006r3 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSpy Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.rnaml;

import com.altova.types.*;

public class referenceType extends com.altova.xml.Node {

	public referenceType(referenceType node) {
		super(node);
	}

	public referenceType(org.w3c.dom.Node node) {
		super(node);
	}

	public referenceType(org.w3c.dom.Document doc) {
		super(doc);
	}

	public referenceType(com.altova.xml.Document doc, String namespaceURI, String prefix, String name) {
		super(doc, namespaceURI, prefix, name);
	}
	
	public void adjustPrefix() {
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "id" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "id", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "comment" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "comment", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "author" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "author", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new authorType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "title" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "title", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new titleType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "journal" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "journal", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new journalType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "date" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "date", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new dateType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "pubmed-id" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "pubmed-id", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new pubmed_idType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "book-title" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "book-title", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new book_titleType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "editor" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "editor", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new editorType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "volume" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "volume", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new volumeType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "issue" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "issue", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new issueType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "pages" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "pages", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new pagesType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "path" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "path", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new pathType(tmpNode).adjustPrefix();
		}
	}

	public static int getidMinCount() {
		return 1;
	}

	public static int getidMaxCount() {
		return 1;
	}

	public int getidCount() {
		return getDomChildCount(Attribute, null, "id");
	}

	public boolean hasid() {
		return hasDomChild(Attribute, null, "id");
	}

	public SchemaID newid() {
		return new SchemaID();
	}

	public SchemaID getidAt(int index) throws Exception {
		return new SchemaID(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "id", index))));
	}

	public org.w3c.dom.Node getStartingidCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "id" );
	}

	public org.w3c.dom.Node getAdvancedidCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "id", curNode );
	}

	public SchemaID getidValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaID(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaID getid() throws Exception 
 {
		return getidAt(0);
	}

	public void removeidAt(int index) {
		removeDomChildAt(Attribute, null, "id", index);
	}

	public void removeid() {
		while (hasid())
			removeidAt(0);
	}

	public void addid(SchemaID value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "id", value.toString());
		}
	}

	public void addid(String value) throws Exception {
		addid(new SchemaID(value));
	}

	public void insertidAt(SchemaID value, int index) {
		insertDomChildAt(Attribute, null, "id", index, value.toString());
	}

	public void insertidAt(String value, int index) throws Exception {
		insertidAt(new SchemaID(value), index);
	}

	public void replaceidAt(SchemaID value, int index) {
		replaceDomChildAt(Attribute, null, "id", index, value.toString());
	}

	public void replaceidAt(String value, int index) throws Exception {
		replaceidAt(new SchemaID(value), index);
	}

	public static int getcommentMinCount() {
		return 0;
	}

	public static int getcommentMaxCount() {
		return 1;
	}

	public int getcommentCount() {
		return getDomChildCount(Attribute, null, "comment");
	}

	public boolean hascomment() {
		return hasDomChild(Attribute, null, "comment");
	}

	public SchemaString newcomment() {
		return new SchemaString();
	}

	public SchemaString getcommentAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "comment", index))));
	}

	public org.w3c.dom.Node getStartingcommentCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "comment" );
	}

	public org.w3c.dom.Node getAdvancedcommentCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "comment", curNode );
	}

	public SchemaString getcommentValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaString(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaString getcomment() throws Exception 
 {
		return getcommentAt(0);
	}

	public void removecommentAt(int index) {
		removeDomChildAt(Attribute, null, "comment", index);
	}

	public void removecomment() {
		while (hascomment())
			removecommentAt(0);
	}

	public void addcomment(SchemaString value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "comment", value.toString());
		}
	}

	public void addcomment(String value) throws Exception {
		addcomment(new SchemaString(value));
	}

	public void insertcommentAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "comment", index, value.toString());
	}

	public void insertcommentAt(String value, int index) throws Exception {
		insertcommentAt(new SchemaString(value), index);
	}

	public void replacecommentAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "comment", index, value.toString());
	}

	public void replacecommentAt(String value, int index) throws Exception {
		replacecommentAt(new SchemaString(value), index);
	}

	public static int getauthorMinCount() {
		return 1;
	}

	public static int getauthorMaxCount() {
		return 1;
	}

	public int getauthorCount() {
		return getDomChildCount(Element, null, "author");
	}

	public boolean hasauthor() {
		return hasDomChild(Element, null, "author");
	}

	public authorType newauthor() {
		return new authorType(domNode.getOwnerDocument().createElementNS(null, "author"));
	}

	public authorType getauthorAt(int index) throws Exception {
		return new authorType(dereference(getDomChildAt(Element, null, "author", index)));
	}

	public org.w3c.dom.Node getStartingauthorCursor() throws Exception {
		return getDomFirstChild(Element, null, "author" );
	}

	public org.w3c.dom.Node getAdvancedauthorCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "author", curNode );
	}

	public authorType getauthorValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new authorType( dereference(curNode) );
	}

	public authorType getauthor() throws Exception 
 {
		return getauthorAt(0);
	}

	public void removeauthorAt(int index) {
		removeDomChildAt(Element, null, "author", index);
	}

	public void removeauthor() {
		while (hasauthor())
			removeauthorAt(0);
	}

	public void addauthor(authorType value) {
		appendDomElement(null, "author", value);	
	}

	public void insertauthorAt(authorType value, int index) {
		insertDomElementAt(null, "author", index, value);
	}

	public void replaceauthorAt(authorType value, int index) {
		replaceDomElementAt(null, "author", index, value);
	}

	public static int gettitleMinCount() {
		return 1;
	}

	public static int gettitleMaxCount() {
		return 1;
	}

	public int gettitleCount() {
		return getDomChildCount(Element, null, "title");
	}

	public boolean hastitle() {
		return hasDomChild(Element, null, "title");
	}

	public titleType newtitle() {
		return new titleType(domNode.getOwnerDocument().createElementNS(null, "title"));
	}

	public titleType gettitleAt(int index) throws Exception {
		return new titleType(dereference(getDomChildAt(Element, null, "title", index)));
	}

	public org.w3c.dom.Node getStartingtitleCursor() throws Exception {
		return getDomFirstChild(Element, null, "title" );
	}

	public org.w3c.dom.Node getAdvancedtitleCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "title", curNode );
	}

	public titleType gettitleValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new titleType( dereference(curNode) );
	}

	public titleType gettitle() throws Exception 
 {
		return gettitleAt(0);
	}

	public void removetitleAt(int index) {
		removeDomChildAt(Element, null, "title", index);
	}

	public void removetitle() {
		while (hastitle())
			removetitleAt(0);
	}

	public void addtitle(titleType value) {
		appendDomElement(null, "title", value);	
	}

	public void inserttitleAt(titleType value, int index) {
		insertDomElementAt(null, "title", index, value);
	}

	public void replacetitleAt(titleType value, int index) {
		replaceDomElementAt(null, "title", index, value);
	}

	public static int getjournalMinCount() {
		return 1;
	}

	public static int getjournalMaxCount() {
		return 1;
	}

	public int getjournalCount() {
		return getDomChildCount(Element, null, "journal");
	}

	public boolean hasjournal() {
		return hasDomChild(Element, null, "journal");
	}

	public journalType newjournal() {
		return new journalType(domNode.getOwnerDocument().createElementNS(null, "journal"));
	}

	public journalType getjournalAt(int index) throws Exception {
		return new journalType(dereference(getDomChildAt(Element, null, "journal", index)));
	}

	public org.w3c.dom.Node getStartingjournalCursor() throws Exception {
		return getDomFirstChild(Element, null, "journal" );
	}

	public org.w3c.dom.Node getAdvancedjournalCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "journal", curNode );
	}

	public journalType getjournalValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new journalType( dereference(curNode) );
	}

	public journalType getjournal() throws Exception 
 {
		return getjournalAt(0);
	}

	public void removejournalAt(int index) {
		removeDomChildAt(Element, null, "journal", index);
	}

	public void removejournal() {
		while (hasjournal())
			removejournalAt(0);
	}

	public void addjournal(journalType value) {
		appendDomElement(null, "journal", value);	
	}

	public void insertjournalAt(journalType value, int index) {
		insertDomElementAt(null, "journal", index, value);
	}

	public void replacejournalAt(journalType value, int index) {
		replaceDomElementAt(null, "journal", index, value);
	}

	public static int getdateMinCount() {
		return 1;
	}

	public static int getdateMaxCount() {
		return 1;
	}

	public int getdateCount() {
		return getDomChildCount(Element, null, "date");
	}

	public boolean hasdate() {
		return hasDomChild(Element, null, "date");
	}

	public dateType newdate() {
		return new dateType(domNode.getOwnerDocument().createElementNS(null, "date"));
	}

	public dateType getdateAt(int index) throws Exception {
		return new dateType(dereference(getDomChildAt(Element, null, "date", index)));
	}

	public org.w3c.dom.Node getStartingdateCursor() throws Exception {
		return getDomFirstChild(Element, null, "date" );
	}

	public org.w3c.dom.Node getAdvanceddateCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "date", curNode );
	}

	public dateType getdateValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new dateType( dereference(curNode) );
	}

	public dateType getdate() throws Exception 
 {
		return getdateAt(0);
	}

	public void removedateAt(int index) {
		removeDomChildAt(Element, null, "date", index);
	}

	public void removedate() {
		while (hasdate())
			removedateAt(0);
	}

	public void adddate(dateType value) {
		appendDomElement(null, "date", value);	
	}

	public void insertdateAt(dateType value, int index) {
		insertDomElementAt(null, "date", index, value);
	}

	public void replacedateAt(dateType value, int index) {
		replaceDomElementAt(null, "date", index, value);
	}

	public static int getpubmed_idMinCount() {
		return 1;
	}

	public static int getpubmed_idMaxCount() {
		return 1;
	}

	public int getpubmed_idCount() {
		return getDomChildCount(Element, null, "pubmed-id");
	}

	public boolean haspubmed_id() {
		return hasDomChild(Element, null, "pubmed-id");
	}

	public pubmed_idType newpubmed_id() {
		return new pubmed_idType(domNode.getOwnerDocument().createElementNS(null, "pubmed-id"));
	}

	public pubmed_idType getpubmed_idAt(int index) throws Exception {
		return new pubmed_idType(dereference(getDomChildAt(Element, null, "pubmed-id", index)));
	}

	public org.w3c.dom.Node getStartingpubmed_idCursor() throws Exception {
		return getDomFirstChild(Element, null, "pubmed-id" );
	}

	public org.w3c.dom.Node getAdvancedpubmed_idCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "pubmed-id", curNode );
	}

	public pubmed_idType getpubmed_idValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new pubmed_idType( dereference(curNode) );
	}

	public pubmed_idType getpubmed_id() throws Exception 
 {
		return getpubmed_idAt(0);
	}

	public void removepubmed_idAt(int index) {
		removeDomChildAt(Element, null, "pubmed-id", index);
	}

	public void removepubmed_id() {
		while (haspubmed_id())
			removepubmed_idAt(0);
	}

	public void addpubmed_id(pubmed_idType value) {
		appendDomElement(null, "pubmed-id", value);	
	}

	public void insertpubmed_idAt(pubmed_idType value, int index) {
		insertDomElementAt(null, "pubmed-id", index, value);
	}

	public void replacepubmed_idAt(pubmed_idType value, int index) {
		replaceDomElementAt(null, "pubmed-id", index, value);
	}

	public static int getbook_titleMinCount() {
		return 1;
	}

	public static int getbook_titleMaxCount() {
		return 1;
	}

	public int getbook_titleCount() {
		return getDomChildCount(Element, null, "book-title");
	}

	public boolean hasbook_title() {
		return hasDomChild(Element, null, "book-title");
	}

	public book_titleType newbook_title() {
		return new book_titleType(domNode.getOwnerDocument().createElementNS(null, "book-title"));
	}

	public book_titleType getbook_titleAt(int index) throws Exception {
		return new book_titleType(dereference(getDomChildAt(Element, null, "book-title", index)));
	}

	public org.w3c.dom.Node getStartingbook_titleCursor() throws Exception {
		return getDomFirstChild(Element, null, "book-title" );
	}

	public org.w3c.dom.Node getAdvancedbook_titleCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "book-title", curNode );
	}

	public book_titleType getbook_titleValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new book_titleType( dereference(curNode) );
	}

	public book_titleType getbook_title() throws Exception 
 {
		return getbook_titleAt(0);
	}

	public void removebook_titleAt(int index) {
		removeDomChildAt(Element, null, "book-title", index);
	}

	public void removebook_title() {
		while (hasbook_title())
			removebook_titleAt(0);
	}

	public void addbook_title(book_titleType value) {
		appendDomElement(null, "book-title", value);	
	}

	public void insertbook_titleAt(book_titleType value, int index) {
		insertDomElementAt(null, "book-title", index, value);
	}

	public void replacebook_titleAt(book_titleType value, int index) {
		replaceDomElementAt(null, "book-title", index, value);
	}

	public static int geteditorMinCount() {
		return 1;
	}

	public static int geteditorMaxCount() {
		return 1;
	}

	public int geteditorCount() {
		return getDomChildCount(Element, null, "editor");
	}

	public boolean haseditor() {
		return hasDomChild(Element, null, "editor");
	}

	public editorType neweditor() {
		return new editorType(domNode.getOwnerDocument().createElementNS(null, "editor"));
	}

	public editorType geteditorAt(int index) throws Exception {
		return new editorType(dereference(getDomChildAt(Element, null, "editor", index)));
	}

	public org.w3c.dom.Node getStartingeditorCursor() throws Exception {
		return getDomFirstChild(Element, null, "editor" );
	}

	public org.w3c.dom.Node getAdvancededitorCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "editor", curNode );
	}

	public editorType geteditorValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new editorType( dereference(curNode) );
	}

	public editorType geteditor() throws Exception 
 {
		return geteditorAt(0);
	}

	public void removeeditorAt(int index) {
		removeDomChildAt(Element, null, "editor", index);
	}

	public void removeeditor() {
		while (haseditor())
			removeeditorAt(0);
	}

	public void addeditor(editorType value) {
		appendDomElement(null, "editor", value);	
	}

	public void inserteditorAt(editorType value, int index) {
		insertDomElementAt(null, "editor", index, value);
	}

	public void replaceeditorAt(editorType value, int index) {
		replaceDomElementAt(null, "editor", index, value);
	}

	public static int getvolumeMinCount() {
		return 1;
	}

	public static int getvolumeMaxCount() {
		return 1;
	}

	public int getvolumeCount() {
		return getDomChildCount(Element, null, "volume");
	}

	public boolean hasvolume() {
		return hasDomChild(Element, null, "volume");
	}

	public volumeType newvolume() {
		return new volumeType(domNode.getOwnerDocument().createElementNS(null, "volume"));
	}

	public volumeType getvolumeAt(int index) throws Exception {
		return new volumeType(dereference(getDomChildAt(Element, null, "volume", index)));
	}

	public org.w3c.dom.Node getStartingvolumeCursor() throws Exception {
		return getDomFirstChild(Element, null, "volume" );
	}

	public org.w3c.dom.Node getAdvancedvolumeCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "volume", curNode );
	}

	public volumeType getvolumeValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new volumeType( dereference(curNode) );
	}

	public volumeType getvolume() throws Exception 
 {
		return getvolumeAt(0);
	}

	public void removevolumeAt(int index) {
		removeDomChildAt(Element, null, "volume", index);
	}

	public void removevolume() {
		while (hasvolume())
			removevolumeAt(0);
	}

	public void addvolume(volumeType value) {
		appendDomElement(null, "volume", value);	
	}

	public void insertvolumeAt(volumeType value, int index) {
		insertDomElementAt(null, "volume", index, value);
	}

	public void replacevolumeAt(volumeType value, int index) {
		replaceDomElementAt(null, "volume", index, value);
	}

	public static int getissueMinCount() {
		return 1;
	}

	public static int getissueMaxCount() {
		return 1;
	}

	public int getissueCount() {
		return getDomChildCount(Element, null, "issue");
	}

	public boolean hasissue() {
		return hasDomChild(Element, null, "issue");
	}

	public issueType newissue() {
		return new issueType(domNode.getOwnerDocument().createElementNS(null, "issue"));
	}

	public issueType getissueAt(int index) throws Exception {
		return new issueType(dereference(getDomChildAt(Element, null, "issue", index)));
	}

	public org.w3c.dom.Node getStartingissueCursor() throws Exception {
		return getDomFirstChild(Element, null, "issue" );
	}

	public org.w3c.dom.Node getAdvancedissueCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "issue", curNode );
	}

	public issueType getissueValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new issueType( dereference(curNode) );
	}

	public issueType getissue() throws Exception 
 {
		return getissueAt(0);
	}

	public void removeissueAt(int index) {
		removeDomChildAt(Element, null, "issue", index);
	}

	public void removeissue() {
		while (hasissue())
			removeissueAt(0);
	}

	public void addissue(issueType value) {
		appendDomElement(null, "issue", value);	
	}

	public void insertissueAt(issueType value, int index) {
		insertDomElementAt(null, "issue", index, value);
	}

	public void replaceissueAt(issueType value, int index) {
		replaceDomElementAt(null, "issue", index, value);
	}

	public static int getpagesMinCount() {
		return 1;
	}

	public static int getpagesMaxCount() {
		return 1;
	}

	public int getpagesCount() {
		return getDomChildCount(Element, null, "pages");
	}

	public boolean haspages() {
		return hasDomChild(Element, null, "pages");
	}

	public pagesType newpages() {
		return new pagesType(domNode.getOwnerDocument().createElementNS(null, "pages"));
	}

	public pagesType getpagesAt(int index) throws Exception {
		return new pagesType(dereference(getDomChildAt(Element, null, "pages", index)));
	}

	public org.w3c.dom.Node getStartingpagesCursor() throws Exception {
		return getDomFirstChild(Element, null, "pages" );
	}

	public org.w3c.dom.Node getAdvancedpagesCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "pages", curNode );
	}

	public pagesType getpagesValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new pagesType( dereference(curNode) );
	}

	public pagesType getpages() throws Exception 
 {
		return getpagesAt(0);
	}

	public void removepagesAt(int index) {
		removeDomChildAt(Element, null, "pages", index);
	}

	public void removepages() {
		while (haspages())
			removepagesAt(0);
	}

	public void addpages(pagesType value) {
		appendDomElement(null, "pages", value);	
	}

	public void insertpagesAt(pagesType value, int index) {
		insertDomElementAt(null, "pages", index, value);
	}

	public void replacepagesAt(pagesType value, int index) {
		replaceDomElementAt(null, "pages", index, value);
	}

	public static int getpathMinCount() {
		return 1;
	}

	public static int getpathMaxCount() {
		return 1;
	}

	public int getpathCount() {
		return getDomChildCount(Element, null, "path");
	}

	public boolean haspath() {
		return hasDomChild(Element, null, "path");
	}

	public pathType newpath() {
		return new pathType(domNode.getOwnerDocument().createElementNS(null, "path"));
	}

	public pathType getpathAt(int index) throws Exception {
		return new pathType(dereference(getDomChildAt(Element, null, "path", index)));
	}

	public org.w3c.dom.Node getStartingpathCursor() throws Exception {
		return getDomFirstChild(Element, null, "path" );
	}

	public org.w3c.dom.Node getAdvancedpathCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "path", curNode );
	}

	public pathType getpathValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new pathType( dereference(curNode) );
	}

	public pathType getpath() throws Exception 
 {
		return getpathAt(0);
	}

	public void removepathAt(int index) {
		removeDomChildAt(Element, null, "path", index);
	}

	public void removepath() {
		while (haspath())
			removepathAt(0);
	}

	public void addpath(pathType value) {
		appendDomElement(null, "path", value);	
	}

	public void insertpathAt(pathType value, int index) {
		insertDomElementAt(null, "path", index, value);
	}

	public void replacepathAt(pathType value, int index) {
		replaceDomElementAt(null, "path", index, value);
	}

	private org.w3c.dom.Node dereference(org.w3c.dom.Node node) {
		return node;
	}
}
