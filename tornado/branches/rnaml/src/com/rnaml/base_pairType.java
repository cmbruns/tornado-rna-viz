/**
 * base_pairType.java
 *
 * This file was generated by XMLSpy 2006r3 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSpy Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.rnaml;

import com.altova.types.*;

public class base_pairType extends com.altova.xml.Node {

	public base_pairType(base_pairType node) {
		super(node);
	}

	public base_pairType(org.w3c.dom.Node node) {
		super(node);
	}

	public base_pairType(org.w3c.dom.Document doc) {
		super(doc);
	}

	public base_pairType(com.altova.xml.Document doc, String namespaceURI, String prefix, String name) {
		super(doc, namespaceURI, prefix, name);
	}
	
	public void adjustPrefix() {
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "comment" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "comment", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "reference-ids" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "reference-ids", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "analysis-ids" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "analysis-ids", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "database-ids" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "database-ids", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "base-id-5p" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "base-id-5p", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new base_id_5pType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "base-id-3p" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "base-id-3p", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new base_id_3pType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "edge-5p" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "edge-5p", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new edge_5pType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "edge-3p" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "edge-3p", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new edge_3pType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "bond-orientation" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "bond-orientation", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new bond_orientationType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "strand-orientation" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "strand-orientation", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new strand_orientationType(tmpNode).adjustPrefix();
		}
	}

	public static int getcommentMinCount() {
		return 0;
	}

	public static int getcommentMaxCount() {
		return 1;
	}

	public int getcommentCount() {
		return getDomChildCount(Attribute, null, "comment");
	}

	public boolean hascomment() {
		return hasDomChild(Attribute, null, "comment");
	}

	public SchemaString newcomment() {
		return new SchemaString();
	}

	public SchemaString getcommentAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "comment", index))));
	}

	public org.w3c.dom.Node getStartingcommentCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "comment" );
	}

	public org.w3c.dom.Node getAdvancedcommentCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "comment", curNode );
	}

	public SchemaString getcommentValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaString(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaString getcomment() throws Exception 
 {
		return getcommentAt(0);
	}

	public void removecommentAt(int index) {
		removeDomChildAt(Attribute, null, "comment", index);
	}

	public void removecomment() {
		while (hascomment())
			removecommentAt(0);
	}

	public void addcomment(SchemaString value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "comment", value.toString());
		}
	}

	public void addcomment(String value) throws Exception {
		addcomment(new SchemaString(value));
	}

	public void insertcommentAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "comment", index, value.toString());
	}

	public void insertcommentAt(String value, int index) throws Exception {
		insertcommentAt(new SchemaString(value), index);
	}

	public void replacecommentAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "comment", index, value.toString());
	}

	public void replacecommentAt(String value, int index) throws Exception {
		replacecommentAt(new SchemaString(value), index);
	}

	public static int getreference_idsMinCount() {
		return 0;
	}

	public static int getreference_idsMaxCount() {
		return 1;
	}

	public int getreference_idsCount() {
		return getDomChildCount(Attribute, null, "reference-ids");
	}

	public boolean hasreference_ids() {
		return hasDomChild(Attribute, null, "reference-ids");
	}

	public SchemaIDRef newreference_ids() {
		return new SchemaIDRef();
	}

	public SchemaIDRef getreference_idsAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "reference-ids", index))));
	}

	public org.w3c.dom.Node getStartingreference_idsCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "reference-ids" );
	}

	public org.w3c.dom.Node getAdvancedreference_idsCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "reference-ids", curNode );
	}

	public SchemaIDRef getreference_idsValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaIDRef(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaIDRef getreference_ids() throws Exception 
 {
		return getreference_idsAt(0);
	}

	public void removereference_idsAt(int index) {
		removeDomChildAt(Attribute, null, "reference-ids", index);
	}

	public void removereference_ids() {
		while (hasreference_ids())
			removereference_idsAt(0);
	}

	public void addreference_ids(SchemaIDRef value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "reference-ids", value.toString());
		}
	}

	public void addreference_ids(String value) throws Exception {
		addreference_ids(new SchemaIDRef(value));
	}

	public void insertreference_idsAt(SchemaIDRef value, int index) {
		insertDomChildAt(Attribute, null, "reference-ids", index, value.toString());
	}

	public void insertreference_idsAt(String value, int index) throws Exception {
		insertreference_idsAt(new SchemaIDRef(value), index);
	}

	public void replacereference_idsAt(SchemaIDRef value, int index) {
		replaceDomChildAt(Attribute, null, "reference-ids", index, value.toString());
	}

	public void replacereference_idsAt(String value, int index) throws Exception {
		replacereference_idsAt(new SchemaIDRef(value), index);
	}

	public static int getanalysis_idsMinCount() {
		return 0;
	}

	public static int getanalysis_idsMaxCount() {
		return 1;
	}

	public int getanalysis_idsCount() {
		return getDomChildCount(Attribute, null, "analysis-ids");
	}

	public boolean hasanalysis_ids() {
		return hasDomChild(Attribute, null, "analysis-ids");
	}

	public SchemaIDRef newanalysis_ids() {
		return new SchemaIDRef();
	}

	public SchemaIDRef getanalysis_idsAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "analysis-ids", index))));
	}

	public org.w3c.dom.Node getStartinganalysis_idsCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "analysis-ids" );
	}

	public org.w3c.dom.Node getAdvancedanalysis_idsCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "analysis-ids", curNode );
	}

	public SchemaIDRef getanalysis_idsValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaIDRef(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaIDRef getanalysis_ids() throws Exception 
 {
		return getanalysis_idsAt(0);
	}

	public void removeanalysis_idsAt(int index) {
		removeDomChildAt(Attribute, null, "analysis-ids", index);
	}

	public void removeanalysis_ids() {
		while (hasanalysis_ids())
			removeanalysis_idsAt(0);
	}

	public void addanalysis_ids(SchemaIDRef value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "analysis-ids", value.toString());
		}
	}

	public void addanalysis_ids(String value) throws Exception {
		addanalysis_ids(new SchemaIDRef(value));
	}

	public void insertanalysis_idsAt(SchemaIDRef value, int index) {
		insertDomChildAt(Attribute, null, "analysis-ids", index, value.toString());
	}

	public void insertanalysis_idsAt(String value, int index) throws Exception {
		insertanalysis_idsAt(new SchemaIDRef(value), index);
	}

	public void replaceanalysis_idsAt(SchemaIDRef value, int index) {
		replaceDomChildAt(Attribute, null, "analysis-ids", index, value.toString());
	}

	public void replaceanalysis_idsAt(String value, int index) throws Exception {
		replaceanalysis_idsAt(new SchemaIDRef(value), index);
	}

	public static int getdatabase_idsMinCount() {
		return 0;
	}

	public static int getdatabase_idsMaxCount() {
		return 1;
	}

	public int getdatabase_idsCount() {
		return getDomChildCount(Attribute, null, "database-ids");
	}

	public boolean hasdatabase_ids() {
		return hasDomChild(Attribute, null, "database-ids");
	}

	public SchemaIDRef newdatabase_ids() {
		return new SchemaIDRef();
	}

	public SchemaIDRef getdatabase_idsAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "database-ids", index))));
	}

	public org.w3c.dom.Node getStartingdatabase_idsCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "database-ids" );
	}

	public org.w3c.dom.Node getAdvanceddatabase_idsCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "database-ids", curNode );
	}

	public SchemaIDRef getdatabase_idsValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaIDRef(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaIDRef getdatabase_ids() throws Exception 
 {
		return getdatabase_idsAt(0);
	}

	public void removedatabase_idsAt(int index) {
		removeDomChildAt(Attribute, null, "database-ids", index);
	}

	public void removedatabase_ids() {
		while (hasdatabase_ids())
			removedatabase_idsAt(0);
	}

	public void adddatabase_ids(SchemaIDRef value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "database-ids", value.toString());
		}
	}

	public void adddatabase_ids(String value) throws Exception {
		adddatabase_ids(new SchemaIDRef(value));
	}

	public void insertdatabase_idsAt(SchemaIDRef value, int index) {
		insertDomChildAt(Attribute, null, "database-ids", index, value.toString());
	}

	public void insertdatabase_idsAt(String value, int index) throws Exception {
		insertdatabase_idsAt(new SchemaIDRef(value), index);
	}

	public void replacedatabase_idsAt(SchemaIDRef value, int index) {
		replaceDomChildAt(Attribute, null, "database-ids", index, value.toString());
	}

	public void replacedatabase_idsAt(String value, int index) throws Exception {
		replacedatabase_idsAt(new SchemaIDRef(value), index);
	}

	public static int getbase_id_5pMinCount() {
		return 1;
	}

	public static int getbase_id_5pMaxCount() {
		return 1;
	}

	public int getbase_id_5pCount() {
		return getDomChildCount(Element, null, "base-id-5p");
	}

	public boolean hasbase_id_5p() {
		return hasDomChild(Element, null, "base-id-5p");
	}

	public base_id_5pType newbase_id_5p() {
		return new base_id_5pType(domNode.getOwnerDocument().createElementNS(null, "base-id-5p"));
	}

	public base_id_5pType getbase_id_5pAt(int index) throws Exception {
		return new base_id_5pType(dereference(getDomChildAt(Element, null, "base-id-5p", index)));
	}

	public org.w3c.dom.Node getStartingbase_id_5pCursor() throws Exception {
		return getDomFirstChild(Element, null, "base-id-5p" );
	}

	public org.w3c.dom.Node getAdvancedbase_id_5pCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "base-id-5p", curNode );
	}

	public base_id_5pType getbase_id_5pValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new base_id_5pType( dereference(curNode) );
	}

	public base_id_5pType getbase_id_5p() throws Exception 
 {
		return getbase_id_5pAt(0);
	}

	public void removebase_id_5pAt(int index) {
		removeDomChildAt(Element, null, "base-id-5p", index);
	}

	public void removebase_id_5p() {
		while (hasbase_id_5p())
			removebase_id_5pAt(0);
	}

	public void addbase_id_5p(base_id_5pType value) {
		appendDomElement(null, "base-id-5p", value);	
	}

	public void insertbase_id_5pAt(base_id_5pType value, int index) {
		insertDomElementAt(null, "base-id-5p", index, value);
	}

	public void replacebase_id_5pAt(base_id_5pType value, int index) {
		replaceDomElementAt(null, "base-id-5p", index, value);
	}

	public static int getbase_id_3pMinCount() {
		return 1;
	}

	public static int getbase_id_3pMaxCount() {
		return 1;
	}

	public int getbase_id_3pCount() {
		return getDomChildCount(Element, null, "base-id-3p");
	}

	public boolean hasbase_id_3p() {
		return hasDomChild(Element, null, "base-id-3p");
	}

	public base_id_3pType newbase_id_3p() {
		return new base_id_3pType(domNode.getOwnerDocument().createElementNS(null, "base-id-3p"));
	}

	public base_id_3pType getbase_id_3pAt(int index) throws Exception {
		return new base_id_3pType(dereference(getDomChildAt(Element, null, "base-id-3p", index)));
	}

	public org.w3c.dom.Node getStartingbase_id_3pCursor() throws Exception {
		return getDomFirstChild(Element, null, "base-id-3p" );
	}

	public org.w3c.dom.Node getAdvancedbase_id_3pCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "base-id-3p", curNode );
	}

	public base_id_3pType getbase_id_3pValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new base_id_3pType( dereference(curNode) );
	}

	public base_id_3pType getbase_id_3p() throws Exception 
 {
		return getbase_id_3pAt(0);
	}

	public void removebase_id_3pAt(int index) {
		removeDomChildAt(Element, null, "base-id-3p", index);
	}

	public void removebase_id_3p() {
		while (hasbase_id_3p())
			removebase_id_3pAt(0);
	}

	public void addbase_id_3p(base_id_3pType value) {
		appendDomElement(null, "base-id-3p", value);	
	}

	public void insertbase_id_3pAt(base_id_3pType value, int index) {
		insertDomElementAt(null, "base-id-3p", index, value);
	}

	public void replacebase_id_3pAt(base_id_3pType value, int index) {
		replaceDomElementAt(null, "base-id-3p", index, value);
	}

	public static int getedge_5pMinCount() {
		return 0;
	}

	public static int getedge_5pMaxCount() {
		return 1;
	}

	public int getedge_5pCount() {
		return getDomChildCount(Element, null, "edge-5p");
	}

	public boolean hasedge_5p() {
		return hasDomChild(Element, null, "edge-5p");
	}

	public edge_5pType newedge_5p() {
		return new edge_5pType(domNode.getOwnerDocument().createElementNS(null, "edge-5p"));
	}

	public edge_5pType getedge_5pAt(int index) throws Exception {
		return new edge_5pType(dereference(getDomChildAt(Element, null, "edge-5p", index)));
	}

	public org.w3c.dom.Node getStartingedge_5pCursor() throws Exception {
		return getDomFirstChild(Element, null, "edge-5p" );
	}

	public org.w3c.dom.Node getAdvancededge_5pCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "edge-5p", curNode );
	}

	public edge_5pType getedge_5pValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new edge_5pType( dereference(curNode) );
	}

	public edge_5pType getedge_5p() throws Exception 
 {
		return getedge_5pAt(0);
	}

	public void removeedge_5pAt(int index) {
		removeDomChildAt(Element, null, "edge-5p", index);
	}

	public void removeedge_5p() {
		while (hasedge_5p())
			removeedge_5pAt(0);
	}

	public void addedge_5p(edge_5pType value) {
		appendDomElement(null, "edge-5p", value);	
	}

	public void insertedge_5pAt(edge_5pType value, int index) {
		insertDomElementAt(null, "edge-5p", index, value);
	}

	public void replaceedge_5pAt(edge_5pType value, int index) {
		replaceDomElementAt(null, "edge-5p", index, value);
	}

	public static int getedge_3pMinCount() {
		return 0;
	}

	public static int getedge_3pMaxCount() {
		return 1;
	}

	public int getedge_3pCount() {
		return getDomChildCount(Element, null, "edge-3p");
	}

	public boolean hasedge_3p() {
		return hasDomChild(Element, null, "edge-3p");
	}

	public edge_3pType newedge_3p() {
		return new edge_3pType(domNode.getOwnerDocument().createElementNS(null, "edge-3p"));
	}

	public edge_3pType getedge_3pAt(int index) throws Exception {
		return new edge_3pType(dereference(getDomChildAt(Element, null, "edge-3p", index)));
	}

	public org.w3c.dom.Node getStartingedge_3pCursor() throws Exception {
		return getDomFirstChild(Element, null, "edge-3p" );
	}

	public org.w3c.dom.Node getAdvancededge_3pCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "edge-3p", curNode );
	}

	public edge_3pType getedge_3pValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new edge_3pType( dereference(curNode) );
	}

	public edge_3pType getedge_3p() throws Exception 
 {
		return getedge_3pAt(0);
	}

	public void removeedge_3pAt(int index) {
		removeDomChildAt(Element, null, "edge-3p", index);
	}

	public void removeedge_3p() {
		while (hasedge_3p())
			removeedge_3pAt(0);
	}

	public void addedge_3p(edge_3pType value) {
		appendDomElement(null, "edge-3p", value);	
	}

	public void insertedge_3pAt(edge_3pType value, int index) {
		insertDomElementAt(null, "edge-3p", index, value);
	}

	public void replaceedge_3pAt(edge_3pType value, int index) {
		replaceDomElementAt(null, "edge-3p", index, value);
	}

	public static int getbond_orientationMinCount() {
		return 0;
	}

	public static int getbond_orientationMaxCount() {
		return 1;
	}

	public int getbond_orientationCount() {
		return getDomChildCount(Element, null, "bond-orientation");
	}

	public boolean hasbond_orientation() {
		return hasDomChild(Element, null, "bond-orientation");
	}

	public bond_orientationType newbond_orientation() {
		return new bond_orientationType(domNode.getOwnerDocument().createElementNS(null, "bond-orientation"));
	}

	public bond_orientationType getbond_orientationAt(int index) throws Exception {
		return new bond_orientationType(dereference(getDomChildAt(Element, null, "bond-orientation", index)));
	}

	public org.w3c.dom.Node getStartingbond_orientationCursor() throws Exception {
		return getDomFirstChild(Element, null, "bond-orientation" );
	}

	public org.w3c.dom.Node getAdvancedbond_orientationCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "bond-orientation", curNode );
	}

	public bond_orientationType getbond_orientationValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new bond_orientationType( dereference(curNode) );
	}

	public bond_orientationType getbond_orientation() throws Exception 
 {
		return getbond_orientationAt(0);
	}

	public void removebond_orientationAt(int index) {
		removeDomChildAt(Element, null, "bond-orientation", index);
	}

	public void removebond_orientation() {
		while (hasbond_orientation())
			removebond_orientationAt(0);
	}

	public void addbond_orientation(bond_orientationType value) {
		appendDomElement(null, "bond-orientation", value);	
	}

	public void insertbond_orientationAt(bond_orientationType value, int index) {
		insertDomElementAt(null, "bond-orientation", index, value);
	}

	public void replacebond_orientationAt(bond_orientationType value, int index) {
		replaceDomElementAt(null, "bond-orientation", index, value);
	}

	public static int getstrand_orientationMinCount() {
		return 0;
	}

	public static int getstrand_orientationMaxCount() {
		return 1;
	}

	public int getstrand_orientationCount() {
		return getDomChildCount(Element, null, "strand-orientation");
	}

	public boolean hasstrand_orientation() {
		return hasDomChild(Element, null, "strand-orientation");
	}

	public strand_orientationType newstrand_orientation() {
		return new strand_orientationType(domNode.getOwnerDocument().createElementNS(null, "strand-orientation"));
	}

	public strand_orientationType getstrand_orientationAt(int index) throws Exception {
		return new strand_orientationType(dereference(getDomChildAt(Element, null, "strand-orientation", index)));
	}

	public org.w3c.dom.Node getStartingstrand_orientationCursor() throws Exception {
		return getDomFirstChild(Element, null, "strand-orientation" );
	}

	public org.w3c.dom.Node getAdvancedstrand_orientationCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "strand-orientation", curNode );
	}

	public strand_orientationType getstrand_orientationValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new strand_orientationType( dereference(curNode) );
	}

	public strand_orientationType getstrand_orientation() throws Exception 
 {
		return getstrand_orientationAt(0);
	}

	public void removestrand_orientationAt(int index) {
		removeDomChildAt(Element, null, "strand-orientation", index);
	}

	public void removestrand_orientation() {
		while (hasstrand_orientation())
			removestrand_orientationAt(0);
	}

	public void addstrand_orientation(strand_orientationType value) {
		appendDomElement(null, "strand-orientation", value);	
	}

	public void insertstrand_orientationAt(strand_orientationType value, int index) {
		insertDomElementAt(null, "strand-orientation", index, value);
	}

	public void replacestrand_orientationAt(strand_orientationType value, int index) {
		replaceDomElementAt(null, "strand-orientation", index, value);
	}

	private org.w3c.dom.Node dereference(org.w3c.dom.Node node) {
		return node;
	}
}
