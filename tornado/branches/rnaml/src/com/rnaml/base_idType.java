/**
 * base_idType.java
 *
 * This file was generated by XMLSpy 2006r3 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSpy Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.rnaml;

import com.altova.types.*;

public class base_idType extends com.altova.xml.Node {

	public base_idType(base_idType node) {
		super(node);
	}

	public base_idType(org.w3c.dom.Node node) {
		super(node);
	}

	public base_idType(org.w3c.dom.Document doc) {
		super(doc);
	}

	public base_idType(com.altova.xml.Document doc, String namespaceURI, String prefix, String name) {
		super(doc, namespaceURI, prefix, name);
	}
	
	public void adjustPrefix() {
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "molecule-id" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "molecule-id", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new molecule_idType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "model-id" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "model-id", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new model_idType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "position" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "position", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new positionType(tmpNode).adjustPrefix();
		}
	}

	public static int getmolecule_idMinCount() {
		return 0;
	}

	public static int getmolecule_idMaxCount() {
		return 1;
	}

	public int getmolecule_idCount() {
		return getDomChildCount(Element, null, "molecule-id");
	}

	public boolean hasmolecule_id() {
		return hasDomChild(Element, null, "molecule-id");
	}

	public molecule_idType newmolecule_id() {
		return new molecule_idType(domNode.getOwnerDocument().createElementNS(null, "molecule-id"));
	}

	public molecule_idType getmolecule_idAt(int index) throws Exception {
		return new molecule_idType(dereference(getDomChildAt(Element, null, "molecule-id", index)));
	}

	public org.w3c.dom.Node getStartingmolecule_idCursor() throws Exception {
		return getDomFirstChild(Element, null, "molecule-id" );
	}

	public org.w3c.dom.Node getAdvancedmolecule_idCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "molecule-id", curNode );
	}

	public molecule_idType getmolecule_idValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new molecule_idType( dereference(curNode) );
	}

	public molecule_idType getmolecule_id() throws Exception 
 {
		return getmolecule_idAt(0);
	}

	public void removemolecule_idAt(int index) {
		removeDomChildAt(Element, null, "molecule-id", index);
	}

	public void removemolecule_id() {
		while (hasmolecule_id())
			removemolecule_idAt(0);
	}

	public void addmolecule_id(molecule_idType value) {
		appendDomElement(null, "molecule-id", value);	
	}

	public void insertmolecule_idAt(molecule_idType value, int index) {
		insertDomElementAt(null, "molecule-id", index, value);
	}

	public void replacemolecule_idAt(molecule_idType value, int index) {
		replaceDomElementAt(null, "molecule-id", index, value);
	}

	public static int getmodel_idMinCount() {
		return 0;
	}

	public static int getmodel_idMaxCount() {
		return 1;
	}

	public int getmodel_idCount() {
		return getDomChildCount(Element, null, "model-id");
	}

	public boolean hasmodel_id() {
		return hasDomChild(Element, null, "model-id");
	}

	public model_idType newmodel_id() {
		return new model_idType(domNode.getOwnerDocument().createElementNS(null, "model-id"));
	}

	public model_idType getmodel_idAt(int index) throws Exception {
		return new model_idType(dereference(getDomChildAt(Element, null, "model-id", index)));
	}

	public org.w3c.dom.Node getStartingmodel_idCursor() throws Exception {
		return getDomFirstChild(Element, null, "model-id" );
	}

	public org.w3c.dom.Node getAdvancedmodel_idCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "model-id", curNode );
	}

	public model_idType getmodel_idValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new model_idType( dereference(curNode) );
	}

	public model_idType getmodel_id() throws Exception 
 {
		return getmodel_idAt(0);
	}

	public void removemodel_idAt(int index) {
		removeDomChildAt(Element, null, "model-id", index);
	}

	public void removemodel_id() {
		while (hasmodel_id())
			removemodel_idAt(0);
	}

	public void addmodel_id(model_idType value) {
		appendDomElement(null, "model-id", value);	
	}

	public void insertmodel_idAt(model_idType value, int index) {
		insertDomElementAt(null, "model-id", index, value);
	}

	public void replacemodel_idAt(model_idType value, int index) {
		replaceDomElementAt(null, "model-id", index, value);
	}

	public static int getpositionMinCount() {
		return 1;
	}

	public static int getpositionMaxCount() {
		return 1;
	}

	public int getpositionCount() {
		return getDomChildCount(Element, null, "position");
	}

	public boolean hasposition() {
		return hasDomChild(Element, null, "position");
	}

	public positionType newposition() {
		return new positionType(domNode.getOwnerDocument().createElementNS(null, "position"));
	}

	public positionType getpositionAt(int index) throws Exception {
		return new positionType(dereference(getDomChildAt(Element, null, "position", index)));
	}

	public org.w3c.dom.Node getStartingpositionCursor() throws Exception {
		return getDomFirstChild(Element, null, "position" );
	}

	public org.w3c.dom.Node getAdvancedpositionCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "position", curNode );
	}

	public positionType getpositionValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new positionType( dereference(curNode) );
	}

	public positionType getposition() throws Exception 
 {
		return getpositionAt(0);
	}

	public void removepositionAt(int index) {
		removeDomChildAt(Element, null, "position", index);
	}

	public void removeposition() {
		while (hasposition())
			removepositionAt(0);
	}

	public void addposition(positionType value) {
		appendDomElement(null, "position", value);	
	}

	public void insertpositionAt(positionType value, int index) {
		insertDomElementAt(null, "position", index, value);
	}

	public void replacepositionAt(positionType value, int index) {
		replaceDomElementAt(null, "position", index, value);
	}

	private org.w3c.dom.Node dereference(org.w3c.dom.Node node) {
		return node;
	}
}
