/**
 * analysisType.java
 *
 * This file was generated by XMLSpy 2006r3 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSpy Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.rnaml;

import com.altova.types.*;

public class analysisType extends com.altova.xml.Node {

	public analysisType(analysisType node) {
		super(node);
	}

	public analysisType(org.w3c.dom.Node node) {
		super(node);
	}

	public analysisType(org.w3c.dom.Document doc) {
		super(doc);
	}

	public analysisType(com.altova.xml.Document doc, String namespaceURI, String prefix, String name) {
		super(doc, namespaceURI, prefix, name);
	}
	
	public void adjustPrefix() {
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "id" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "id", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "comment" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "comment", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "reference-ids" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "reference-ids", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "analysis-ids" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "analysis-ids", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "database-ids" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "database-ids", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "program" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "program", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new programType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "date" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "date", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new dateType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "author" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "author", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new authorType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "reference" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "reference", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new referenceType(tmpNode).adjustPrefix();
		}
	}

	public static int getidMinCount() {
		return 1;
	}

	public static int getidMaxCount() {
		return 1;
	}

	public int getidCount() {
		return getDomChildCount(Attribute, null, "id");
	}

	public boolean hasid() {
		return hasDomChild(Attribute, null, "id");
	}

	public SchemaID newid() {
		return new SchemaID();
	}

	public SchemaID getidAt(int index) throws Exception {
		return new SchemaID(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "id", index))));
	}

	public org.w3c.dom.Node getStartingidCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "id" );
	}

	public org.w3c.dom.Node getAdvancedidCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "id", curNode );
	}

	public SchemaID getidValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaID(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaID getid() throws Exception 
 {
		return getidAt(0);
	}

	public void removeidAt(int index) {
		removeDomChildAt(Attribute, null, "id", index);
	}

	public void removeid() {
		while (hasid())
			removeidAt(0);
	}

	public void addid(SchemaID value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "id", value.toString());
		}
	}

	public void addid(String value) throws Exception {
		addid(new SchemaID(value));
	}

	public void insertidAt(SchemaID value, int index) {
		insertDomChildAt(Attribute, null, "id", index, value.toString());
	}

	public void insertidAt(String value, int index) throws Exception {
		insertidAt(new SchemaID(value), index);
	}

	public void replaceidAt(SchemaID value, int index) {
		replaceDomChildAt(Attribute, null, "id", index, value.toString());
	}

	public void replaceidAt(String value, int index) throws Exception {
		replaceidAt(new SchemaID(value), index);
	}

	public static int getcommentMinCount() {
		return 0;
	}

	public static int getcommentMaxCount() {
		return 1;
	}

	public int getcommentCount() {
		return getDomChildCount(Attribute, null, "comment");
	}

	public boolean hascomment() {
		return hasDomChild(Attribute, null, "comment");
	}

	public SchemaString newcomment() {
		return new SchemaString();
	}

	public SchemaString getcommentAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "comment", index))));
	}

	public org.w3c.dom.Node getStartingcommentCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "comment" );
	}

	public org.w3c.dom.Node getAdvancedcommentCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "comment", curNode );
	}

	public SchemaString getcommentValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaString(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaString getcomment() throws Exception 
 {
		return getcommentAt(0);
	}

	public void removecommentAt(int index) {
		removeDomChildAt(Attribute, null, "comment", index);
	}

	public void removecomment() {
		while (hascomment())
			removecommentAt(0);
	}

	public void addcomment(SchemaString value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "comment", value.toString());
		}
	}

	public void addcomment(String value) throws Exception {
		addcomment(new SchemaString(value));
	}

	public void insertcommentAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "comment", index, value.toString());
	}

	public void insertcommentAt(String value, int index) throws Exception {
		insertcommentAt(new SchemaString(value), index);
	}

	public void replacecommentAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "comment", index, value.toString());
	}

	public void replacecommentAt(String value, int index) throws Exception {
		replacecommentAt(new SchemaString(value), index);
	}

	public static int getreference_idsMinCount() {
		return 0;
	}

	public static int getreference_idsMaxCount() {
		return 1;
	}

	public int getreference_idsCount() {
		return getDomChildCount(Attribute, null, "reference-ids");
	}

	public boolean hasreference_ids() {
		return hasDomChild(Attribute, null, "reference-ids");
	}

	public SchemaIDRef newreference_ids() {
		return new SchemaIDRef();
	}

	public SchemaIDRef getreference_idsAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "reference-ids", index))));
	}

	public org.w3c.dom.Node getStartingreference_idsCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "reference-ids" );
	}

	public org.w3c.dom.Node getAdvancedreference_idsCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "reference-ids", curNode );
	}

	public SchemaIDRef getreference_idsValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaIDRef(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaIDRef getreference_ids() throws Exception 
 {
		return getreference_idsAt(0);
	}

	public void removereference_idsAt(int index) {
		removeDomChildAt(Attribute, null, "reference-ids", index);
	}

	public void removereference_ids() {
		while (hasreference_ids())
			removereference_idsAt(0);
	}

	public void addreference_ids(SchemaIDRef value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "reference-ids", value.toString());
		}
	}

	public void addreference_ids(String value) throws Exception {
		addreference_ids(new SchemaIDRef(value));
	}

	public void insertreference_idsAt(SchemaIDRef value, int index) {
		insertDomChildAt(Attribute, null, "reference-ids", index, value.toString());
	}

	public void insertreference_idsAt(String value, int index) throws Exception {
		insertreference_idsAt(new SchemaIDRef(value), index);
	}

	public void replacereference_idsAt(SchemaIDRef value, int index) {
		replaceDomChildAt(Attribute, null, "reference-ids", index, value.toString());
	}

	public void replacereference_idsAt(String value, int index) throws Exception {
		replacereference_idsAt(new SchemaIDRef(value), index);
	}

	public static int getanalysis_idsMinCount() {
		return 0;
	}

	public static int getanalysis_idsMaxCount() {
		return 1;
	}

	public int getanalysis_idsCount() {
		return getDomChildCount(Attribute, null, "analysis-ids");
	}

	public boolean hasanalysis_ids() {
		return hasDomChild(Attribute, null, "analysis-ids");
	}

	public SchemaIDRef newanalysis_ids() {
		return new SchemaIDRef();
	}

	public SchemaIDRef getanalysis_idsAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "analysis-ids", index))));
	}

	public org.w3c.dom.Node getStartinganalysis_idsCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "analysis-ids" );
	}

	public org.w3c.dom.Node getAdvancedanalysis_idsCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "analysis-ids", curNode );
	}

	public SchemaIDRef getanalysis_idsValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaIDRef(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaIDRef getanalysis_ids() throws Exception 
 {
		return getanalysis_idsAt(0);
	}

	public void removeanalysis_idsAt(int index) {
		removeDomChildAt(Attribute, null, "analysis-ids", index);
	}

	public void removeanalysis_ids() {
		while (hasanalysis_ids())
			removeanalysis_idsAt(0);
	}

	public void addanalysis_ids(SchemaIDRef value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "analysis-ids", value.toString());
		}
	}

	public void addanalysis_ids(String value) throws Exception {
		addanalysis_ids(new SchemaIDRef(value));
	}

	public void insertanalysis_idsAt(SchemaIDRef value, int index) {
		insertDomChildAt(Attribute, null, "analysis-ids", index, value.toString());
	}

	public void insertanalysis_idsAt(String value, int index) throws Exception {
		insertanalysis_idsAt(new SchemaIDRef(value), index);
	}

	public void replaceanalysis_idsAt(SchemaIDRef value, int index) {
		replaceDomChildAt(Attribute, null, "analysis-ids", index, value.toString());
	}

	public void replaceanalysis_idsAt(String value, int index) throws Exception {
		replaceanalysis_idsAt(new SchemaIDRef(value), index);
	}

	public static int getdatabase_idsMinCount() {
		return 0;
	}

	public static int getdatabase_idsMaxCount() {
		return 1;
	}

	public int getdatabase_idsCount() {
		return getDomChildCount(Attribute, null, "database-ids");
	}

	public boolean hasdatabase_ids() {
		return hasDomChild(Attribute, null, "database-ids");
	}

	public SchemaIDRef newdatabase_ids() {
		return new SchemaIDRef();
	}

	public SchemaIDRef getdatabase_idsAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "database-ids", index))));
	}

	public org.w3c.dom.Node getStartingdatabase_idsCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "database-ids" );
	}

	public org.w3c.dom.Node getAdvanceddatabase_idsCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "database-ids", curNode );
	}

	public SchemaIDRef getdatabase_idsValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaIDRef(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaIDRef getdatabase_ids() throws Exception 
 {
		return getdatabase_idsAt(0);
	}

	public void removedatabase_idsAt(int index) {
		removeDomChildAt(Attribute, null, "database-ids", index);
	}

	public void removedatabase_ids() {
		while (hasdatabase_ids())
			removedatabase_idsAt(0);
	}

	public void adddatabase_ids(SchemaIDRef value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "database-ids", value.toString());
		}
	}

	public void adddatabase_ids(String value) throws Exception {
		adddatabase_ids(new SchemaIDRef(value));
	}

	public void insertdatabase_idsAt(SchemaIDRef value, int index) {
		insertDomChildAt(Attribute, null, "database-ids", index, value.toString());
	}

	public void insertdatabase_idsAt(String value, int index) throws Exception {
		insertdatabase_idsAt(new SchemaIDRef(value), index);
	}

	public void replacedatabase_idsAt(SchemaIDRef value, int index) {
		replaceDomChildAt(Attribute, null, "database-ids", index, value.toString());
	}

	public void replacedatabase_idsAt(String value, int index) throws Exception {
		replacedatabase_idsAt(new SchemaIDRef(value), index);
	}

	public static int getprogramMinCount() {
		return 1;
	}

	public static int getprogramMaxCount() {
		return 1;
	}

	public int getprogramCount() {
		return getDomChildCount(Element, null, "program");
	}

	public boolean hasprogram() {
		return hasDomChild(Element, null, "program");
	}

	public programType newprogram() {
		return new programType(domNode.getOwnerDocument().createElementNS(null, "program"));
	}

	public programType getprogramAt(int index) throws Exception {
		return new programType(dereference(getDomChildAt(Element, null, "program", index)));
	}

	public org.w3c.dom.Node getStartingprogramCursor() throws Exception {
		return getDomFirstChild(Element, null, "program" );
	}

	public org.w3c.dom.Node getAdvancedprogramCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "program", curNode );
	}

	public programType getprogramValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new programType( dereference(curNode) );
	}

	public programType getprogram() throws Exception 
 {
		return getprogramAt(0);
	}

	public void removeprogramAt(int index) {
		removeDomChildAt(Element, null, "program", index);
	}

	public void removeprogram() {
		while (hasprogram())
			removeprogramAt(0);
	}

	public void addprogram(programType value) {
		appendDomElement(null, "program", value);	
	}

	public void insertprogramAt(programType value, int index) {
		insertDomElementAt(null, "program", index, value);
	}

	public void replaceprogramAt(programType value, int index) {
		replaceDomElementAt(null, "program", index, value);
	}

	public static int getdateMinCount() {
		return 1;
	}

	public static int getdateMaxCount() {
		return 1;
	}

	public int getdateCount() {
		return getDomChildCount(Element, null, "date");
	}

	public boolean hasdate() {
		return hasDomChild(Element, null, "date");
	}

	public dateType newdate() {
		return new dateType(domNode.getOwnerDocument().createElementNS(null, "date"));
	}

	public dateType getdateAt(int index) throws Exception {
		return new dateType(dereference(getDomChildAt(Element, null, "date", index)));
	}

	public org.w3c.dom.Node getStartingdateCursor() throws Exception {
		return getDomFirstChild(Element, null, "date" );
	}

	public org.w3c.dom.Node getAdvanceddateCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "date", curNode );
	}

	public dateType getdateValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new dateType( dereference(curNode) );
	}

	public dateType getdate() throws Exception 
 {
		return getdateAt(0);
	}

	public void removedateAt(int index) {
		removeDomChildAt(Element, null, "date", index);
	}

	public void removedate() {
		while (hasdate())
			removedateAt(0);
	}

	public void adddate(dateType value) {
		appendDomElement(null, "date", value);	
	}

	public void insertdateAt(dateType value, int index) {
		insertDomElementAt(null, "date", index, value);
	}

	public void replacedateAt(dateType value, int index) {
		replaceDomElementAt(null, "date", index, value);
	}

	public static int getauthorMinCount() {
		return 1;
	}

	public static int getauthorMaxCount() {
		return 1;
	}

	public int getauthorCount() {
		return getDomChildCount(Element, null, "author");
	}

	public boolean hasauthor() {
		return hasDomChild(Element, null, "author");
	}

	public authorType newauthor() {
		return new authorType(domNode.getOwnerDocument().createElementNS(null, "author"));
	}

	public authorType getauthorAt(int index) throws Exception {
		return new authorType(dereference(getDomChildAt(Element, null, "author", index)));
	}

	public org.w3c.dom.Node getStartingauthorCursor() throws Exception {
		return getDomFirstChild(Element, null, "author" );
	}

	public org.w3c.dom.Node getAdvancedauthorCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "author", curNode );
	}

	public authorType getauthorValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new authorType( dereference(curNode) );
	}

	public authorType getauthor() throws Exception 
 {
		return getauthorAt(0);
	}

	public void removeauthorAt(int index) {
		removeDomChildAt(Element, null, "author", index);
	}

	public void removeauthor() {
		while (hasauthor())
			removeauthorAt(0);
	}

	public void addauthor(authorType value) {
		appendDomElement(null, "author", value);	
	}

	public void insertauthorAt(authorType value, int index) {
		insertDomElementAt(null, "author", index, value);
	}

	public void replaceauthorAt(authorType value, int index) {
		replaceDomElementAt(null, "author", index, value);
	}

	public static int getreferenceMinCount() {
		return 1;
	}

	public static int getreferenceMaxCount() {
		return 1;
	}

	public int getreferenceCount() {
		return getDomChildCount(Element, null, "reference");
	}

	public boolean hasreference() {
		return hasDomChild(Element, null, "reference");
	}

	public referenceType newreference() {
		return new referenceType(domNode.getOwnerDocument().createElementNS(null, "reference"));
	}

	public referenceType getreferenceAt(int index) throws Exception {
		return new referenceType(dereference(getDomChildAt(Element, null, "reference", index)));
	}

	public org.w3c.dom.Node getStartingreferenceCursor() throws Exception {
		return getDomFirstChild(Element, null, "reference" );
	}

	public org.w3c.dom.Node getAdvancedreferenceCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "reference", curNode );
	}

	public referenceType getreferenceValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new referenceType( dereference(curNode) );
	}

	public referenceType getreference() throws Exception 
 {
		return getreferenceAt(0);
	}

	public void removereferenceAt(int index) {
		removeDomChildAt(Element, null, "reference", index);
	}

	public void removereference() {
		while (hasreference())
			removereferenceAt(0);
	}

	public void addreference(referenceType value) {
		appendDomElement(null, "reference", value);	
	}

	public void insertreferenceAt(referenceType value, int index) {
		insertDomElementAt(null, "reference", index, value);
	}

	public void replacereferenceAt(referenceType value, int index) {
		replaceDomElementAt(null, "reference", index, value);
	}

	private org.w3c.dom.Node dereference(org.w3c.dom.Node node) {
		return node;
	}
}
