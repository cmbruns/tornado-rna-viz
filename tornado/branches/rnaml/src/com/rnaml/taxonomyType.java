/**
 * taxonomyType.java
 *
 * This file was generated by XMLSpy 2006r3 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSpy Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.rnaml;

import com.altova.types.*;

public class taxonomyType extends com.altova.xml.Node {

	public taxonomyType(taxonomyType node) {
		super(node);
	}

	public taxonomyType(org.w3c.dom.Node node) {
		super(node);
	}

	public taxonomyType(org.w3c.dom.Document doc) {
		super(doc);
	}

	public taxonomyType(com.altova.xml.Document doc, String namespaceURI, String prefix, String name) {
		super(doc, namespaceURI, prefix, name);
	}
	
	public void adjustPrefix() {
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "comment" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "comment", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "reference-ids" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "reference-ids", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "analysis-ids" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "analysis-ids", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "database-ids" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "database-ids", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "domain" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "domain", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new domainType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "kingdom" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "kingdom", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new kingdomType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "phylum" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "phylum", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new phylumType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "class" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "class", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new classType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "order" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "order", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new orderType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "family" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "family", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new familyType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "genus" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "genus", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new genusType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "species" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "species", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new speciesType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "strain" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "strain", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new strainType(tmpNode).adjustPrefix();
		}
	}

	public static int getcommentMinCount() {
		return 0;
	}

	public static int getcommentMaxCount() {
		return 1;
	}

	public int getcommentCount() {
		return getDomChildCount(Attribute, null, "comment");
	}

	public boolean hascomment() {
		return hasDomChild(Attribute, null, "comment");
	}

	public SchemaString newcomment() {
		return new SchemaString();
	}

	public SchemaString getcommentAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "comment", index))));
	}

	public org.w3c.dom.Node getStartingcommentCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "comment" );
	}

	public org.w3c.dom.Node getAdvancedcommentCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "comment", curNode );
	}

	public SchemaString getcommentValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaString(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaString getcomment() throws Exception 
 {
		return getcommentAt(0);
	}

	public void removecommentAt(int index) {
		removeDomChildAt(Attribute, null, "comment", index);
	}

	public void removecomment() {
		while (hascomment())
			removecommentAt(0);
	}

	public void addcomment(SchemaString value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "comment", value.toString());
		}
	}

	public void addcomment(String value) throws Exception {
		addcomment(new SchemaString(value));
	}

	public void insertcommentAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "comment", index, value.toString());
	}

	public void insertcommentAt(String value, int index) throws Exception {
		insertcommentAt(new SchemaString(value), index);
	}

	public void replacecommentAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "comment", index, value.toString());
	}

	public void replacecommentAt(String value, int index) throws Exception {
		replacecommentAt(new SchemaString(value), index);
	}

	public static int getreference_idsMinCount() {
		return 0;
	}

	public static int getreference_idsMaxCount() {
		return 1;
	}

	public int getreference_idsCount() {
		return getDomChildCount(Attribute, null, "reference-ids");
	}

	public boolean hasreference_ids() {
		return hasDomChild(Attribute, null, "reference-ids");
	}

	public SchemaIDRef newreference_ids() {
		return new SchemaIDRef();
	}

	public SchemaIDRef getreference_idsAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "reference-ids", index))));
	}

	public org.w3c.dom.Node getStartingreference_idsCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "reference-ids" );
	}

	public org.w3c.dom.Node getAdvancedreference_idsCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "reference-ids", curNode );
	}

	public SchemaIDRef getreference_idsValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaIDRef(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaIDRef getreference_ids() throws Exception 
 {
		return getreference_idsAt(0);
	}

	public void removereference_idsAt(int index) {
		removeDomChildAt(Attribute, null, "reference-ids", index);
	}

	public void removereference_ids() {
		while (hasreference_ids())
			removereference_idsAt(0);
	}

	public void addreference_ids(SchemaIDRef value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "reference-ids", value.toString());
		}
	}

	public void addreference_ids(String value) throws Exception {
		addreference_ids(new SchemaIDRef(value));
	}

	public void insertreference_idsAt(SchemaIDRef value, int index) {
		insertDomChildAt(Attribute, null, "reference-ids", index, value.toString());
	}

	public void insertreference_idsAt(String value, int index) throws Exception {
		insertreference_idsAt(new SchemaIDRef(value), index);
	}

	public void replacereference_idsAt(SchemaIDRef value, int index) {
		replaceDomChildAt(Attribute, null, "reference-ids", index, value.toString());
	}

	public void replacereference_idsAt(String value, int index) throws Exception {
		replacereference_idsAt(new SchemaIDRef(value), index);
	}

	public static int getanalysis_idsMinCount() {
		return 0;
	}

	public static int getanalysis_idsMaxCount() {
		return 1;
	}

	public int getanalysis_idsCount() {
		return getDomChildCount(Attribute, null, "analysis-ids");
	}

	public boolean hasanalysis_ids() {
		return hasDomChild(Attribute, null, "analysis-ids");
	}

	public SchemaIDRef newanalysis_ids() {
		return new SchemaIDRef();
	}

	public SchemaIDRef getanalysis_idsAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "analysis-ids", index))));
	}

	public org.w3c.dom.Node getStartinganalysis_idsCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "analysis-ids" );
	}

	public org.w3c.dom.Node getAdvancedanalysis_idsCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "analysis-ids", curNode );
	}

	public SchemaIDRef getanalysis_idsValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaIDRef(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaIDRef getanalysis_ids() throws Exception 
 {
		return getanalysis_idsAt(0);
	}

	public void removeanalysis_idsAt(int index) {
		removeDomChildAt(Attribute, null, "analysis-ids", index);
	}

	public void removeanalysis_ids() {
		while (hasanalysis_ids())
			removeanalysis_idsAt(0);
	}

	public void addanalysis_ids(SchemaIDRef value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "analysis-ids", value.toString());
		}
	}

	public void addanalysis_ids(String value) throws Exception {
		addanalysis_ids(new SchemaIDRef(value));
	}

	public void insertanalysis_idsAt(SchemaIDRef value, int index) {
		insertDomChildAt(Attribute, null, "analysis-ids", index, value.toString());
	}

	public void insertanalysis_idsAt(String value, int index) throws Exception {
		insertanalysis_idsAt(new SchemaIDRef(value), index);
	}

	public void replaceanalysis_idsAt(SchemaIDRef value, int index) {
		replaceDomChildAt(Attribute, null, "analysis-ids", index, value.toString());
	}

	public void replaceanalysis_idsAt(String value, int index) throws Exception {
		replaceanalysis_idsAt(new SchemaIDRef(value), index);
	}

	public static int getdatabase_idsMinCount() {
		return 0;
	}

	public static int getdatabase_idsMaxCount() {
		return 1;
	}

	public int getdatabase_idsCount() {
		return getDomChildCount(Attribute, null, "database-ids");
	}

	public boolean hasdatabase_ids() {
		return hasDomChild(Attribute, null, "database-ids");
	}

	public SchemaIDRef newdatabase_ids() {
		return new SchemaIDRef();
	}

	public SchemaIDRef getdatabase_idsAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "database-ids", index))));
	}

	public org.w3c.dom.Node getStartingdatabase_idsCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "database-ids" );
	}

	public org.w3c.dom.Node getAdvanceddatabase_idsCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "database-ids", curNode );
	}

	public SchemaIDRef getdatabase_idsValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaIDRef(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaIDRef getdatabase_ids() throws Exception 
 {
		return getdatabase_idsAt(0);
	}

	public void removedatabase_idsAt(int index) {
		removeDomChildAt(Attribute, null, "database-ids", index);
	}

	public void removedatabase_ids() {
		while (hasdatabase_ids())
			removedatabase_idsAt(0);
	}

	public void adddatabase_ids(SchemaIDRef value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "database-ids", value.toString());
		}
	}

	public void adddatabase_ids(String value) throws Exception {
		adddatabase_ids(new SchemaIDRef(value));
	}

	public void insertdatabase_idsAt(SchemaIDRef value, int index) {
		insertDomChildAt(Attribute, null, "database-ids", index, value.toString());
	}

	public void insertdatabase_idsAt(String value, int index) throws Exception {
		insertdatabase_idsAt(new SchemaIDRef(value), index);
	}

	public void replacedatabase_idsAt(SchemaIDRef value, int index) {
		replaceDomChildAt(Attribute, null, "database-ids", index, value.toString());
	}

	public void replacedatabase_idsAt(String value, int index) throws Exception {
		replacedatabase_idsAt(new SchemaIDRef(value), index);
	}

	public static int getdomainMinCount() {
		return 0;
	}

	public static int getdomainMaxCount() {
		return 1;
	}

	public int getdomainCount() {
		return getDomChildCount(Element, null, "domain");
	}

	public boolean hasdomain() {
		return hasDomChild(Element, null, "domain");
	}

	public domainType newdomain() {
		return new domainType(domNode.getOwnerDocument().createElementNS(null, "domain"));
	}

	public domainType getdomainAt(int index) throws Exception {
		return new domainType(dereference(getDomChildAt(Element, null, "domain", index)));
	}

	public org.w3c.dom.Node getStartingdomainCursor() throws Exception {
		return getDomFirstChild(Element, null, "domain" );
	}

	public org.w3c.dom.Node getAdvanceddomainCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "domain", curNode );
	}

	public domainType getdomainValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new domainType( dereference(curNode) );
	}

	public domainType getdomain() throws Exception 
 {
		return getdomainAt(0);
	}

	public void removedomainAt(int index) {
		removeDomChildAt(Element, null, "domain", index);
	}

	public void removedomain() {
		while (hasdomain())
			removedomainAt(0);
	}

	public void adddomain(domainType value) {
		appendDomElement(null, "domain", value);	
	}

	public void insertdomainAt(domainType value, int index) {
		insertDomElementAt(null, "domain", index, value);
	}

	public void replacedomainAt(domainType value, int index) {
		replaceDomElementAt(null, "domain", index, value);
	}

	public static int getkingdomMinCount() {
		return 0;
	}

	public static int getkingdomMaxCount() {
		return 1;
	}

	public int getkingdomCount() {
		return getDomChildCount(Element, null, "kingdom");
	}

	public boolean haskingdom() {
		return hasDomChild(Element, null, "kingdom");
	}

	public kingdomType newkingdom() {
		return new kingdomType(domNode.getOwnerDocument().createElementNS(null, "kingdom"));
	}

	public kingdomType getkingdomAt(int index) throws Exception {
		return new kingdomType(dereference(getDomChildAt(Element, null, "kingdom", index)));
	}

	public org.w3c.dom.Node getStartingkingdomCursor() throws Exception {
		return getDomFirstChild(Element, null, "kingdom" );
	}

	public org.w3c.dom.Node getAdvancedkingdomCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "kingdom", curNode );
	}

	public kingdomType getkingdomValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new kingdomType( dereference(curNode) );
	}

	public kingdomType getkingdom() throws Exception 
 {
		return getkingdomAt(0);
	}

	public void removekingdomAt(int index) {
		removeDomChildAt(Element, null, "kingdom", index);
	}

	public void removekingdom() {
		while (haskingdom())
			removekingdomAt(0);
	}

	public void addkingdom(kingdomType value) {
		appendDomElement(null, "kingdom", value);	
	}

	public void insertkingdomAt(kingdomType value, int index) {
		insertDomElementAt(null, "kingdom", index, value);
	}

	public void replacekingdomAt(kingdomType value, int index) {
		replaceDomElementAt(null, "kingdom", index, value);
	}

	public static int getphylumMinCount() {
		return 0;
	}

	public static int getphylumMaxCount() {
		return 1;
	}

	public int getphylumCount() {
		return getDomChildCount(Element, null, "phylum");
	}

	public boolean hasphylum() {
		return hasDomChild(Element, null, "phylum");
	}

	public phylumType newphylum() {
		return new phylumType(domNode.getOwnerDocument().createElementNS(null, "phylum"));
	}

	public phylumType getphylumAt(int index) throws Exception {
		return new phylumType(dereference(getDomChildAt(Element, null, "phylum", index)));
	}

	public org.w3c.dom.Node getStartingphylumCursor() throws Exception {
		return getDomFirstChild(Element, null, "phylum" );
	}

	public org.w3c.dom.Node getAdvancedphylumCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "phylum", curNode );
	}

	public phylumType getphylumValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new phylumType( dereference(curNode) );
	}

	public phylumType getphylum() throws Exception 
 {
		return getphylumAt(0);
	}

	public void removephylumAt(int index) {
		removeDomChildAt(Element, null, "phylum", index);
	}

	public void removephylum() {
		while (hasphylum())
			removephylumAt(0);
	}

	public void addphylum(phylumType value) {
		appendDomElement(null, "phylum", value);	
	}

	public void insertphylumAt(phylumType value, int index) {
		insertDomElementAt(null, "phylum", index, value);
	}

	public void replacephylumAt(phylumType value, int index) {
		replaceDomElementAt(null, "phylum", index, value);
	}

	public static int getclass2MinCount() {
		return 0;
	}

	public static int getclass2MaxCount() {
		return 1;
	}

	public int getclass2Count() {
		return getDomChildCount(Element, null, "class");
	}

	public boolean hasclass2() {
		return hasDomChild(Element, null, "class");
	}

	public classType newclass2() {
		return new classType(domNode.getOwnerDocument().createElementNS(null, "class"));
	}

	public classType getclass2At(int index) throws Exception {
		return new classType(dereference(getDomChildAt(Element, null, "class", index)));
	}

	public org.w3c.dom.Node getStartingclass2Cursor() throws Exception {
		return getDomFirstChild(Element, null, "class" );
	}

	public org.w3c.dom.Node getAdvancedclass2Cursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "class", curNode );
	}

	public classType getclass2ValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new classType( dereference(curNode) );
	}

	public classType getclass2() throws Exception 
 {
		return getclass2At(0);
	}

	public void removeclass2At(int index) {
		removeDomChildAt(Element, null, "class", index);
	}

	public void removeclass2() {
		while (hasclass2())
			removeclass2At(0);
	}

	public void addclass2(classType value) {
		appendDomElement(null, "class", value);	
	}

	public void insertclass2At(classType value, int index) {
		insertDomElementAt(null, "class", index, value);
	}

	public void replaceclass2At(classType value, int index) {
		replaceDomElementAt(null, "class", index, value);
	}

	public static int getorderMinCount() {
		return 0;
	}

	public static int getorderMaxCount() {
		return 1;
	}

	public int getorderCount() {
		return getDomChildCount(Element, null, "order");
	}

	public boolean hasorder() {
		return hasDomChild(Element, null, "order");
	}

	public orderType neworder() {
		return new orderType(domNode.getOwnerDocument().createElementNS(null, "order"));
	}

	public orderType getorderAt(int index) throws Exception {
		return new orderType(dereference(getDomChildAt(Element, null, "order", index)));
	}

	public org.w3c.dom.Node getStartingorderCursor() throws Exception {
		return getDomFirstChild(Element, null, "order" );
	}

	public org.w3c.dom.Node getAdvancedorderCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "order", curNode );
	}

	public orderType getorderValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new orderType( dereference(curNode) );
	}

	public orderType getorder() throws Exception 
 {
		return getorderAt(0);
	}

	public void removeorderAt(int index) {
		removeDomChildAt(Element, null, "order", index);
	}

	public void removeorder() {
		while (hasorder())
			removeorderAt(0);
	}

	public void addorder(orderType value) {
		appendDomElement(null, "order", value);	
	}

	public void insertorderAt(orderType value, int index) {
		insertDomElementAt(null, "order", index, value);
	}

	public void replaceorderAt(orderType value, int index) {
		replaceDomElementAt(null, "order", index, value);
	}

	public static int getfamilyMinCount() {
		return 0;
	}

	public static int getfamilyMaxCount() {
		return 1;
	}

	public int getfamilyCount() {
		return getDomChildCount(Element, null, "family");
	}

	public boolean hasfamily() {
		return hasDomChild(Element, null, "family");
	}

	public familyType newfamily() {
		return new familyType(domNode.getOwnerDocument().createElementNS(null, "family"));
	}

	public familyType getfamilyAt(int index) throws Exception {
		return new familyType(dereference(getDomChildAt(Element, null, "family", index)));
	}

	public org.w3c.dom.Node getStartingfamilyCursor() throws Exception {
		return getDomFirstChild(Element, null, "family" );
	}

	public org.w3c.dom.Node getAdvancedfamilyCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "family", curNode );
	}

	public familyType getfamilyValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new familyType( dereference(curNode) );
	}

	public familyType getfamily() throws Exception 
 {
		return getfamilyAt(0);
	}

	public void removefamilyAt(int index) {
		removeDomChildAt(Element, null, "family", index);
	}

	public void removefamily() {
		while (hasfamily())
			removefamilyAt(0);
	}

	public void addfamily(familyType value) {
		appendDomElement(null, "family", value);	
	}

	public void insertfamilyAt(familyType value, int index) {
		insertDomElementAt(null, "family", index, value);
	}

	public void replacefamilyAt(familyType value, int index) {
		replaceDomElementAt(null, "family", index, value);
	}

	public static int getgenusMinCount() {
		return 0;
	}

	public static int getgenusMaxCount() {
		return 1;
	}

	public int getgenusCount() {
		return getDomChildCount(Element, null, "genus");
	}

	public boolean hasgenus() {
		return hasDomChild(Element, null, "genus");
	}

	public genusType newgenus() {
		return new genusType(domNode.getOwnerDocument().createElementNS(null, "genus"));
	}

	public genusType getgenusAt(int index) throws Exception {
		return new genusType(dereference(getDomChildAt(Element, null, "genus", index)));
	}

	public org.w3c.dom.Node getStartinggenusCursor() throws Exception {
		return getDomFirstChild(Element, null, "genus" );
	}

	public org.w3c.dom.Node getAdvancedgenusCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "genus", curNode );
	}

	public genusType getgenusValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new genusType( dereference(curNode) );
	}

	public genusType getgenus() throws Exception 
 {
		return getgenusAt(0);
	}

	public void removegenusAt(int index) {
		removeDomChildAt(Element, null, "genus", index);
	}

	public void removegenus() {
		while (hasgenus())
			removegenusAt(0);
	}

	public void addgenus(genusType value) {
		appendDomElement(null, "genus", value);	
	}

	public void insertgenusAt(genusType value, int index) {
		insertDomElementAt(null, "genus", index, value);
	}

	public void replacegenusAt(genusType value, int index) {
		replaceDomElementAt(null, "genus", index, value);
	}

	public static int getspeciesMinCount() {
		return 0;
	}

	public static int getspeciesMaxCount() {
		return 1;
	}

	public int getspeciesCount() {
		return getDomChildCount(Element, null, "species");
	}

	public boolean hasspecies() {
		return hasDomChild(Element, null, "species");
	}

	public speciesType newspecies() {
		return new speciesType(domNode.getOwnerDocument().createElementNS(null, "species"));
	}

	public speciesType getspeciesAt(int index) throws Exception {
		return new speciesType(dereference(getDomChildAt(Element, null, "species", index)));
	}

	public org.w3c.dom.Node getStartingspeciesCursor() throws Exception {
		return getDomFirstChild(Element, null, "species" );
	}

	public org.w3c.dom.Node getAdvancedspeciesCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "species", curNode );
	}

	public speciesType getspeciesValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new speciesType( dereference(curNode) );
	}

	public speciesType getspecies() throws Exception 
 {
		return getspeciesAt(0);
	}

	public void removespeciesAt(int index) {
		removeDomChildAt(Element, null, "species", index);
	}

	public void removespecies() {
		while (hasspecies())
			removespeciesAt(0);
	}

	public void addspecies(speciesType value) {
		appendDomElement(null, "species", value);	
	}

	public void insertspeciesAt(speciesType value, int index) {
		insertDomElementAt(null, "species", index, value);
	}

	public void replacespeciesAt(speciesType value, int index) {
		replaceDomElementAt(null, "species", index, value);
	}

	public static int getstrainMinCount() {
		return 0;
	}

	public static int getstrainMaxCount() {
		return 1;
	}

	public int getstrainCount() {
		return getDomChildCount(Element, null, "strain");
	}

	public boolean hasstrain() {
		return hasDomChild(Element, null, "strain");
	}

	public strainType newstrain() {
		return new strainType(domNode.getOwnerDocument().createElementNS(null, "strain"));
	}

	public strainType getstrainAt(int index) throws Exception {
		return new strainType(dereference(getDomChildAt(Element, null, "strain", index)));
	}

	public org.w3c.dom.Node getStartingstrainCursor() throws Exception {
		return getDomFirstChild(Element, null, "strain" );
	}

	public org.w3c.dom.Node getAdvancedstrainCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "strain", curNode );
	}

	public strainType getstrainValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new strainType( dereference(curNode) );
	}

	public strainType getstrain() throws Exception 
 {
		return getstrainAt(0);
	}

	public void removestrainAt(int index) {
		removeDomChildAt(Element, null, "strain", index);
	}

	public void removestrain() {
		while (hasstrain())
			removestrainAt(0);
	}

	public void addstrain(strainType value) {
		appendDomElement(null, "strain", value);	
	}

	public void insertstrainAt(strainType value, int index) {
		insertDomElementAt(null, "strain", index, value);
	}

	public void replacestrainAt(strainType value, int index) {
		replaceDomElementAt(null, "strain", index, value);
	}

	private org.w3c.dom.Node dereference(org.w3c.dom.Node node) {
		return node;
	}
}
