/**
 * numbering_systemType.java
 *
 * This file was generated by XMLSpy 2006r3 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSpy Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.rnaml;

import com.altova.types.*;

public class numbering_systemType extends com.altova.xml.Node {

	public numbering_systemType(numbering_systemType node) {
		super(node);
	}

	public numbering_systemType(org.w3c.dom.Node node) {
		super(node);
	}

	public numbering_systemType(org.w3c.dom.Document doc) {
		super(doc);
	}

	public numbering_systemType(com.altova.xml.Document doc, String namespaceURI, String prefix, String name) {
		super(doc, namespaceURI, prefix, name);
	}
	
	public void adjustPrefix() {
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "id" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "id", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "used-in-file" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "used-in-file", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "comment" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "comment", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "reference-ids" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "reference-ids", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "analysis-ids" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "analysis-ids", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "database-ids" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "database-ids", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "numbering-range" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "numbering-range", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new numbering_rangeType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "numbering-table" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "numbering-table", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new numbering_tableType(tmpNode).adjustPrefix();
		}
	}

	public static int getidMinCount() {
		return 1;
	}

	public static int getidMaxCount() {
		return 1;
	}

	public int getidCount() {
		return getDomChildCount(Attribute, null, "id");
	}

	public boolean hasid() {
		return hasDomChild(Attribute, null, "id");
	}

	public SchemaNMToken newid() {
		return new SchemaNMToken();
	}

	public SchemaNMToken getidAt(int index) throws Exception {
		return new SchemaNMToken(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "id", index))));
	}

	public org.w3c.dom.Node getStartingidCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "id" );
	}

	public org.w3c.dom.Node getAdvancedidCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "id", curNode );
	}

	public SchemaNMToken getidValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaNMToken(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaNMToken getid() throws Exception 
 {
		return getidAt(0);
	}

	public void removeidAt(int index) {
		removeDomChildAt(Attribute, null, "id", index);
	}

	public void removeid() {
		while (hasid())
			removeidAt(0);
	}

	public void addid(SchemaNMToken value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "id", value.toString());
		}
	}

	public void addid(String value) throws Exception {
		addid(new SchemaNMToken(value));
	}

	public void insertidAt(SchemaNMToken value, int index) {
		insertDomChildAt(Attribute, null, "id", index, value.toString());
	}

	public void insertidAt(String value, int index) throws Exception {
		insertidAt(new SchemaNMToken(value), index);
	}

	public void replaceidAt(SchemaNMToken value, int index) {
		replaceDomChildAt(Attribute, null, "id", index, value.toString());
	}

	public void replaceidAt(String value, int index) throws Exception {
		replaceidAt(new SchemaNMToken(value), index);
	}

	public static int getused_in_fileMinCount() {
		return 0;
	}

	public static int getused_in_fileMaxCount() {
		return 1;
	}

	public int getused_in_fileCount() {
		return getDomChildCount(Attribute, null, "used-in-file");
	}

	public boolean hasused_in_file() {
		return hasDomChild(Attribute, null, "used-in-file");
	}

	public EnumerationType2 newused_in_file() {
		return new EnumerationType2();
	}

	public EnumerationType2 getused_in_fileAt(int index) throws Exception {
		return new EnumerationType2(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "used-in-file", index))));
	}

	public org.w3c.dom.Node getStartingused_in_fileCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "used-in-file" );
	}

	public org.w3c.dom.Node getAdvancedused_in_fileCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "used-in-file", curNode );
	}

	public EnumerationType2 getused_in_fileValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new EnumerationType2(getDomNodeValue( dereference(curNode) ) );
	}

	public EnumerationType2 getused_in_file() throws Exception 
 {
		return getused_in_fileAt(0);
	}

	public void removeused_in_fileAt(int index) {
		removeDomChildAt(Attribute, null, "used-in-file", index);
	}

	public void removeused_in_file() {
		while (hasused_in_file())
			removeused_in_fileAt(0);
	}

	public void addused_in_file(EnumerationType2 value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "used-in-file", value.toString());
		}
	}

	public void addused_in_file(String value) throws Exception {
		addused_in_file(new EnumerationType2(value));
	}

	public void insertused_in_fileAt(EnumerationType2 value, int index) {
		insertDomChildAt(Attribute, null, "used-in-file", index, value.toString());
	}

	public void insertused_in_fileAt(String value, int index) throws Exception {
		insertused_in_fileAt(new EnumerationType2(value), index);
	}

	public void replaceused_in_fileAt(EnumerationType2 value, int index) {
		replaceDomChildAt(Attribute, null, "used-in-file", index, value.toString());
	}

	public void replaceused_in_fileAt(String value, int index) throws Exception {
		replaceused_in_fileAt(new EnumerationType2(value), index);
	}

	public static int getcommentMinCount() {
		return 0;
	}

	public static int getcommentMaxCount() {
		return 1;
	}

	public int getcommentCount() {
		return getDomChildCount(Attribute, null, "comment");
	}

	public boolean hascomment() {
		return hasDomChild(Attribute, null, "comment");
	}

	public SchemaString newcomment() {
		return new SchemaString();
	}

	public SchemaString getcommentAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "comment", index))));
	}

	public org.w3c.dom.Node getStartingcommentCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "comment" );
	}

	public org.w3c.dom.Node getAdvancedcommentCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "comment", curNode );
	}

	public SchemaString getcommentValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaString(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaString getcomment() throws Exception 
 {
		return getcommentAt(0);
	}

	public void removecommentAt(int index) {
		removeDomChildAt(Attribute, null, "comment", index);
	}

	public void removecomment() {
		while (hascomment())
			removecommentAt(0);
	}

	public void addcomment(SchemaString value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "comment", value.toString());
		}
	}

	public void addcomment(String value) throws Exception {
		addcomment(new SchemaString(value));
	}

	public void insertcommentAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "comment", index, value.toString());
	}

	public void insertcommentAt(String value, int index) throws Exception {
		insertcommentAt(new SchemaString(value), index);
	}

	public void replacecommentAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "comment", index, value.toString());
	}

	public void replacecommentAt(String value, int index) throws Exception {
		replacecommentAt(new SchemaString(value), index);
	}

	public static int getreference_idsMinCount() {
		return 0;
	}

	public static int getreference_idsMaxCount() {
		return 1;
	}

	public int getreference_idsCount() {
		return getDomChildCount(Attribute, null, "reference-ids");
	}

	public boolean hasreference_ids() {
		return hasDomChild(Attribute, null, "reference-ids");
	}

	public SchemaIDRef newreference_ids() {
		return new SchemaIDRef();
	}

	public SchemaIDRef getreference_idsAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "reference-ids", index))));
	}

	public org.w3c.dom.Node getStartingreference_idsCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "reference-ids" );
	}

	public org.w3c.dom.Node getAdvancedreference_idsCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "reference-ids", curNode );
	}

	public SchemaIDRef getreference_idsValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaIDRef(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaIDRef getreference_ids() throws Exception 
 {
		return getreference_idsAt(0);
	}

	public void removereference_idsAt(int index) {
		removeDomChildAt(Attribute, null, "reference-ids", index);
	}

	public void removereference_ids() {
		while (hasreference_ids())
			removereference_idsAt(0);
	}

	public void addreference_ids(SchemaIDRef value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "reference-ids", value.toString());
		}
	}

	public void addreference_ids(String value) throws Exception {
		addreference_ids(new SchemaIDRef(value));
	}

	public void insertreference_idsAt(SchemaIDRef value, int index) {
		insertDomChildAt(Attribute, null, "reference-ids", index, value.toString());
	}

	public void insertreference_idsAt(String value, int index) throws Exception {
		insertreference_idsAt(new SchemaIDRef(value), index);
	}

	public void replacereference_idsAt(SchemaIDRef value, int index) {
		replaceDomChildAt(Attribute, null, "reference-ids", index, value.toString());
	}

	public void replacereference_idsAt(String value, int index) throws Exception {
		replacereference_idsAt(new SchemaIDRef(value), index);
	}

	public static int getanalysis_idsMinCount() {
		return 0;
	}

	public static int getanalysis_idsMaxCount() {
		return 1;
	}

	public int getanalysis_idsCount() {
		return getDomChildCount(Attribute, null, "analysis-ids");
	}

	public boolean hasanalysis_ids() {
		return hasDomChild(Attribute, null, "analysis-ids");
	}

	public SchemaIDRef newanalysis_ids() {
		return new SchemaIDRef();
	}

	public SchemaIDRef getanalysis_idsAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "analysis-ids", index))));
	}

	public org.w3c.dom.Node getStartinganalysis_idsCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "analysis-ids" );
	}

	public org.w3c.dom.Node getAdvancedanalysis_idsCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "analysis-ids", curNode );
	}

	public SchemaIDRef getanalysis_idsValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaIDRef(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaIDRef getanalysis_ids() throws Exception 
 {
		return getanalysis_idsAt(0);
	}

	public void removeanalysis_idsAt(int index) {
		removeDomChildAt(Attribute, null, "analysis-ids", index);
	}

	public void removeanalysis_ids() {
		while (hasanalysis_ids())
			removeanalysis_idsAt(0);
	}

	public void addanalysis_ids(SchemaIDRef value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "analysis-ids", value.toString());
		}
	}

	public void addanalysis_ids(String value) throws Exception {
		addanalysis_ids(new SchemaIDRef(value));
	}

	public void insertanalysis_idsAt(SchemaIDRef value, int index) {
		insertDomChildAt(Attribute, null, "analysis-ids", index, value.toString());
	}

	public void insertanalysis_idsAt(String value, int index) throws Exception {
		insertanalysis_idsAt(new SchemaIDRef(value), index);
	}

	public void replaceanalysis_idsAt(SchemaIDRef value, int index) {
		replaceDomChildAt(Attribute, null, "analysis-ids", index, value.toString());
	}

	public void replaceanalysis_idsAt(String value, int index) throws Exception {
		replaceanalysis_idsAt(new SchemaIDRef(value), index);
	}

	public static int getdatabase_idsMinCount() {
		return 0;
	}

	public static int getdatabase_idsMaxCount() {
		return 1;
	}

	public int getdatabase_idsCount() {
		return getDomChildCount(Attribute, null, "database-ids");
	}

	public boolean hasdatabase_ids() {
		return hasDomChild(Attribute, null, "database-ids");
	}

	public SchemaIDRef newdatabase_ids() {
		return new SchemaIDRef();
	}

	public SchemaIDRef getdatabase_idsAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "database-ids", index))));
	}

	public org.w3c.dom.Node getStartingdatabase_idsCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "database-ids" );
	}

	public org.w3c.dom.Node getAdvanceddatabase_idsCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "database-ids", curNode );
	}

	public SchemaIDRef getdatabase_idsValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaIDRef(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaIDRef getdatabase_ids() throws Exception 
 {
		return getdatabase_idsAt(0);
	}

	public void removedatabase_idsAt(int index) {
		removeDomChildAt(Attribute, null, "database-ids", index);
	}

	public void removedatabase_ids() {
		while (hasdatabase_ids())
			removedatabase_idsAt(0);
	}

	public void adddatabase_ids(SchemaIDRef value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "database-ids", value.toString());
		}
	}

	public void adddatabase_ids(String value) throws Exception {
		adddatabase_ids(new SchemaIDRef(value));
	}

	public void insertdatabase_idsAt(SchemaIDRef value, int index) {
		insertDomChildAt(Attribute, null, "database-ids", index, value.toString());
	}

	public void insertdatabase_idsAt(String value, int index) throws Exception {
		insertdatabase_idsAt(new SchemaIDRef(value), index);
	}

	public void replacedatabase_idsAt(SchemaIDRef value, int index) {
		replaceDomChildAt(Attribute, null, "database-ids", index, value.toString());
	}

	public void replacedatabase_idsAt(String value, int index) throws Exception {
		replacedatabase_idsAt(new SchemaIDRef(value), index);
	}

	public static int getnumbering_rangeMinCount() {
		return 1;
	}

	public static int getnumbering_rangeMaxCount() {
		return 1;
	}

	public int getnumbering_rangeCount() {
		return getDomChildCount(Element, null, "numbering-range");
	}

	public boolean hasnumbering_range() {
		return hasDomChild(Element, null, "numbering-range");
	}

	public numbering_rangeType newnumbering_range() {
		return new numbering_rangeType(domNode.getOwnerDocument().createElementNS(null, "numbering-range"));
	}

	public numbering_rangeType getnumbering_rangeAt(int index) throws Exception {
		return new numbering_rangeType(dereference(getDomChildAt(Element, null, "numbering-range", index)));
	}

	public org.w3c.dom.Node getStartingnumbering_rangeCursor() throws Exception {
		return getDomFirstChild(Element, null, "numbering-range" );
	}

	public org.w3c.dom.Node getAdvancednumbering_rangeCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "numbering-range", curNode );
	}

	public numbering_rangeType getnumbering_rangeValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new numbering_rangeType( dereference(curNode) );
	}

	public numbering_rangeType getnumbering_range() throws Exception 
 {
		return getnumbering_rangeAt(0);
	}

	public void removenumbering_rangeAt(int index) {
		removeDomChildAt(Element, null, "numbering-range", index);
	}

	public void removenumbering_range() {
		while (hasnumbering_range())
			removenumbering_rangeAt(0);
	}

	public void addnumbering_range(numbering_rangeType value) {
		appendDomElement(null, "numbering-range", value);	
	}

	public void insertnumbering_rangeAt(numbering_rangeType value, int index) {
		insertDomElementAt(null, "numbering-range", index, value);
	}

	public void replacenumbering_rangeAt(numbering_rangeType value, int index) {
		replaceDomElementAt(null, "numbering-range", index, value);
	}

	public static int getnumbering_tableMinCount() {
		return 1;
	}

	public static int getnumbering_tableMaxCount() {
		return 1;
	}

	public int getnumbering_tableCount() {
		return getDomChildCount(Element, null, "numbering-table");
	}

	public boolean hasnumbering_table() {
		return hasDomChild(Element, null, "numbering-table");
	}

	public numbering_tableType newnumbering_table() {
		return new numbering_tableType(domNode.getOwnerDocument().createElementNS(null, "numbering-table"));
	}

	public numbering_tableType getnumbering_tableAt(int index) throws Exception {
		return new numbering_tableType(dereference(getDomChildAt(Element, null, "numbering-table", index)));
	}

	public org.w3c.dom.Node getStartingnumbering_tableCursor() throws Exception {
		return getDomFirstChild(Element, null, "numbering-table" );
	}

	public org.w3c.dom.Node getAdvancednumbering_tableCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "numbering-table", curNode );
	}

	public numbering_tableType getnumbering_tableValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new numbering_tableType( dereference(curNode) );
	}

	public numbering_tableType getnumbering_table() throws Exception 
 {
		return getnumbering_tableAt(0);
	}

	public void removenumbering_tableAt(int index) {
		removeDomChildAt(Element, null, "numbering-table", index);
	}

	public void removenumbering_table() {
		while (hasnumbering_table())
			removenumbering_tableAt(0);
	}

	public void addnumbering_table(numbering_tableType value) {
		appendDomElement(null, "numbering-table", value);	
	}

	public void insertnumbering_tableAt(numbering_tableType value, int index) {
		insertDomElementAt(null, "numbering-table", index, value);
	}

	public void replacenumbering_tableAt(numbering_tableType value, int index) {
		replaceDomElementAt(null, "numbering-table", index, value);
	}

	private org.w3c.dom.Node dereference(org.w3c.dom.Node node) {
		return node;
	}
}
