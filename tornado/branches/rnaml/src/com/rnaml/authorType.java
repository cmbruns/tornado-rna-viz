/**
 * authorType.java
 *
 * This file was generated by XMLSpy 2006r3 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSpy Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.rnaml;

import com.altova.types.*;

public class authorType extends com.altova.xml.Node {

	public authorType(authorType node) {
		super(node);
	}

	public authorType(org.w3c.dom.Node node) {
		super(node);
	}

	public authorType(org.w3c.dom.Document doc) {
		super(doc);
	}

	public authorType(com.altova.xml.Document doc, String namespaceURI, String prefix, String name) {
		super(doc, namespaceURI, prefix, name);
	}
	
	public void adjustPrefix() {
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "person" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "person", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new personType(tmpNode).adjustPrefix();
		}
	}

	public static int getpersonMinCount() {
		return 1;
	}

	public static int getpersonMaxCount() {
		return 1;
	}

	public int getpersonCount() {
		return getDomChildCount(Element, null, "person");
	}

	public boolean hasperson() {
		return hasDomChild(Element, null, "person");
	}

	public personType newperson() {
		return new personType(domNode.getOwnerDocument().createElementNS(null, "person"));
	}

	public personType getpersonAt(int index) throws Exception {
		return new personType(dereference(getDomChildAt(Element, null, "person", index)));
	}

	public org.w3c.dom.Node getStartingpersonCursor() throws Exception {
		return getDomFirstChild(Element, null, "person" );
	}

	public org.w3c.dom.Node getAdvancedpersonCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "person", curNode );
	}

	public personType getpersonValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new personType( dereference(curNode) );
	}

	public personType getperson() throws Exception 
 {
		return getpersonAt(0);
	}

	public void removepersonAt(int index) {
		removeDomChildAt(Element, null, "person", index);
	}

	public void removeperson() {
		while (hasperson())
			removepersonAt(0);
	}

	public void addperson(personType value) {
		appendDomElement(null, "person", value);	
	}

	public void insertpersonAt(personType value, int index) {
		insertDomElementAt(null, "person", index, value);
	}

	public void replacepersonAt(personType value, int index) {
		replaceDomElementAt(null, "person", index, value);
	}

	private org.w3c.dom.Node dereference(org.w3c.dom.Node node) {
		return node;
	}
}
