/**
 * programType.java
 *
 * This file was generated by XMLSpy 2006r3 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSpy Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.rnaml;

import com.altova.types.*;

public class programType extends com.altova.xml.Node {

	public programType(programType node) {
		super(node);
	}

	public programType(org.w3c.dom.Node node) {
		super(node);
	}

	public programType(org.w3c.dom.Document doc) {
		super(doc);
	}

	public programType(com.altova.xml.Document doc, String namespaceURI, String prefix, String name) {
		super(doc, namespaceURI, prefix, name);
	}
	
	public void adjustPrefix() {
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "prog-name" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "prog-name", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new prog_nameType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "prog-version" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "prog-version", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new prog_versionType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "reference" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "reference", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new referenceType(tmpNode).adjustPrefix();
		}
	}

	public static int getprog_nameMinCount() {
		return 1;
	}

	public static int getprog_nameMaxCount() {
		return 1;
	}

	public int getprog_nameCount() {
		return getDomChildCount(Element, null, "prog-name");
	}

	public boolean hasprog_name() {
		return hasDomChild(Element, null, "prog-name");
	}

	public prog_nameType newprog_name() {
		return new prog_nameType(domNode.getOwnerDocument().createElementNS(null, "prog-name"));
	}

	public prog_nameType getprog_nameAt(int index) throws Exception {
		return new prog_nameType(dereference(getDomChildAt(Element, null, "prog-name", index)));
	}

	public org.w3c.dom.Node getStartingprog_nameCursor() throws Exception {
		return getDomFirstChild(Element, null, "prog-name" );
	}

	public org.w3c.dom.Node getAdvancedprog_nameCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "prog-name", curNode );
	}

	public prog_nameType getprog_nameValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new prog_nameType( dereference(curNode) );
	}

	public prog_nameType getprog_name() throws Exception 
 {
		return getprog_nameAt(0);
	}

	public void removeprog_nameAt(int index) {
		removeDomChildAt(Element, null, "prog-name", index);
	}

	public void removeprog_name() {
		while (hasprog_name())
			removeprog_nameAt(0);
	}

	public void addprog_name(prog_nameType value) {
		appendDomElement(null, "prog-name", value);	
	}

	public void insertprog_nameAt(prog_nameType value, int index) {
		insertDomElementAt(null, "prog-name", index, value);
	}

	public void replaceprog_nameAt(prog_nameType value, int index) {
		replaceDomElementAt(null, "prog-name", index, value);
	}

	public static int getprog_versionMinCount() {
		return 1;
	}

	public static int getprog_versionMaxCount() {
		return 1;
	}

	public int getprog_versionCount() {
		return getDomChildCount(Element, null, "prog-version");
	}

	public boolean hasprog_version() {
		return hasDomChild(Element, null, "prog-version");
	}

	public prog_versionType newprog_version() {
		return new prog_versionType(domNode.getOwnerDocument().createElementNS(null, "prog-version"));
	}

	public prog_versionType getprog_versionAt(int index) throws Exception {
		return new prog_versionType(dereference(getDomChildAt(Element, null, "prog-version", index)));
	}

	public org.w3c.dom.Node getStartingprog_versionCursor() throws Exception {
		return getDomFirstChild(Element, null, "prog-version" );
	}

	public org.w3c.dom.Node getAdvancedprog_versionCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "prog-version", curNode );
	}

	public prog_versionType getprog_versionValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new prog_versionType( dereference(curNode) );
	}

	public prog_versionType getprog_version() throws Exception 
 {
		return getprog_versionAt(0);
	}

	public void removeprog_versionAt(int index) {
		removeDomChildAt(Element, null, "prog-version", index);
	}

	public void removeprog_version() {
		while (hasprog_version())
			removeprog_versionAt(0);
	}

	public void addprog_version(prog_versionType value) {
		appendDomElement(null, "prog-version", value);	
	}

	public void insertprog_versionAt(prog_versionType value, int index) {
		insertDomElementAt(null, "prog-version", index, value);
	}

	public void replaceprog_versionAt(prog_versionType value, int index) {
		replaceDomElementAt(null, "prog-version", index, value);
	}

	public static int getreferenceMinCount() {
		return 1;
	}

	public static int getreferenceMaxCount() {
		return 1;
	}

	public int getreferenceCount() {
		return getDomChildCount(Element, null, "reference");
	}

	public boolean hasreference() {
		return hasDomChild(Element, null, "reference");
	}

	public referenceType newreference() {
		return new referenceType(domNode.getOwnerDocument().createElementNS(null, "reference"));
	}

	public referenceType getreferenceAt(int index) throws Exception {
		return new referenceType(dereference(getDomChildAt(Element, null, "reference", index)));
	}

	public org.w3c.dom.Node getStartingreferenceCursor() throws Exception {
		return getDomFirstChild(Element, null, "reference" );
	}

	public org.w3c.dom.Node getAdvancedreferenceCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "reference", curNode );
	}

	public referenceType getreferenceValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new referenceType( dereference(curNode) );
	}

	public referenceType getreference() throws Exception 
 {
		return getreferenceAt(0);
	}

	public void removereferenceAt(int index) {
		removeDomChildAt(Element, null, "reference", index);
	}

	public void removereference() {
		while (hasreference())
			removereferenceAt(0);
	}

	public void addreference(referenceType value) {
		appendDomElement(null, "reference", value);	
	}

	public void insertreferenceAt(referenceType value, int index) {
		insertDomElementAt(null, "reference", index, value);
	}

	public void replacereferenceAt(referenceType value, int index) {
		replaceDomElementAt(null, "reference", index, value);
	}

	private org.w3c.dom.Node dereference(org.w3c.dom.Node node) {
		return node;
	}
}
