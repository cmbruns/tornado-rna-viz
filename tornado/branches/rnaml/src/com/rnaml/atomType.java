/**
 * atomType.java
 *
 * This file was generated by XMLSpy 2006r3 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSpy Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.rnaml;

import com.altova.types.*;

public class atomType extends com.altova.xml.Node {

	public atomType(atomType node) {
		super(node);
	}

	public atomType(org.w3c.dom.Node node) {
		super(node);
	}

	public atomType(org.w3c.dom.Document doc) {
		super(doc);
	}

	public atomType(com.altova.xml.Document doc, String namespaceURI, String prefix, String name) {
		super(doc, namespaceURI, prefix, name);
	}
	
	public void adjustPrefix() {
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "serial" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "serial", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "comment" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "comment", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "reference-ids" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "reference-ids", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "analysis-ids" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "analysis-ids", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "database-ids" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "database-ids", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "atom-type" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "atom-type", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new atom_typeType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "coordinates" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "coordinates", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new coordinatesType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "occupancy" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "occupancy", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new occupancyType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "temp-factor" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "temp-factor", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new temp_factorType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "seg-id" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "seg-id", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new seg_idType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "element" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "element", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new elementType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "charge" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "charge", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
			new chargeType(tmpNode).adjustPrefix();
		}
	}

	public static int getserialMinCount() {
		return 0;
	}

	public static int getserialMaxCount() {
		return 1;
	}

	public int getserialCount() {
		return getDomChildCount(Attribute, null, "serial");
	}

	public boolean hasserial() {
		return hasDomChild(Attribute, null, "serial");
	}

	public SchemaString newserial() {
		return new SchemaString();
	}

	public SchemaString getserialAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "serial", index))));
	}

	public org.w3c.dom.Node getStartingserialCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "serial" );
	}

	public org.w3c.dom.Node getAdvancedserialCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "serial", curNode );
	}

	public SchemaString getserialValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaString(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaString getserial() throws Exception 
 {
		return getserialAt(0);
	}

	public void removeserialAt(int index) {
		removeDomChildAt(Attribute, null, "serial", index);
	}

	public void removeserial() {
		while (hasserial())
			removeserialAt(0);
	}

	public void addserial(SchemaString value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "serial", value.toString());
		}
	}

	public void addserial(String value) throws Exception {
		addserial(new SchemaString(value));
	}

	public void insertserialAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "serial", index, value.toString());
	}

	public void insertserialAt(String value, int index) throws Exception {
		insertserialAt(new SchemaString(value), index);
	}

	public void replaceserialAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "serial", index, value.toString());
	}

	public void replaceserialAt(String value, int index) throws Exception {
		replaceserialAt(new SchemaString(value), index);
	}

	public static int getcommentMinCount() {
		return 0;
	}

	public static int getcommentMaxCount() {
		return 1;
	}

	public int getcommentCount() {
		return getDomChildCount(Attribute, null, "comment");
	}

	public boolean hascomment() {
		return hasDomChild(Attribute, null, "comment");
	}

	public SchemaString newcomment() {
		return new SchemaString();
	}

	public SchemaString getcommentAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "comment", index))));
	}

	public org.w3c.dom.Node getStartingcommentCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "comment" );
	}

	public org.w3c.dom.Node getAdvancedcommentCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "comment", curNode );
	}

	public SchemaString getcommentValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaString(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaString getcomment() throws Exception 
 {
		return getcommentAt(0);
	}

	public void removecommentAt(int index) {
		removeDomChildAt(Attribute, null, "comment", index);
	}

	public void removecomment() {
		while (hascomment())
			removecommentAt(0);
	}

	public void addcomment(SchemaString value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "comment", value.toString());
		}
	}

	public void addcomment(String value) throws Exception {
		addcomment(new SchemaString(value));
	}

	public void insertcommentAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "comment", index, value.toString());
	}

	public void insertcommentAt(String value, int index) throws Exception {
		insertcommentAt(new SchemaString(value), index);
	}

	public void replacecommentAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "comment", index, value.toString());
	}

	public void replacecommentAt(String value, int index) throws Exception {
		replacecommentAt(new SchemaString(value), index);
	}

	public static int getreference_idsMinCount() {
		return 0;
	}

	public static int getreference_idsMaxCount() {
		return 1;
	}

	public int getreference_idsCount() {
		return getDomChildCount(Attribute, null, "reference-ids");
	}

	public boolean hasreference_ids() {
		return hasDomChild(Attribute, null, "reference-ids");
	}

	public SchemaIDRef newreference_ids() {
		return new SchemaIDRef();
	}

	public SchemaIDRef getreference_idsAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "reference-ids", index))));
	}

	public org.w3c.dom.Node getStartingreference_idsCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "reference-ids" );
	}

	public org.w3c.dom.Node getAdvancedreference_idsCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "reference-ids", curNode );
	}

	public SchemaIDRef getreference_idsValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaIDRef(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaIDRef getreference_ids() throws Exception 
 {
		return getreference_idsAt(0);
	}

	public void removereference_idsAt(int index) {
		removeDomChildAt(Attribute, null, "reference-ids", index);
	}

	public void removereference_ids() {
		while (hasreference_ids())
			removereference_idsAt(0);
	}

	public void addreference_ids(SchemaIDRef value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "reference-ids", value.toString());
		}
	}

	public void addreference_ids(String value) throws Exception {
		addreference_ids(new SchemaIDRef(value));
	}

	public void insertreference_idsAt(SchemaIDRef value, int index) {
		insertDomChildAt(Attribute, null, "reference-ids", index, value.toString());
	}

	public void insertreference_idsAt(String value, int index) throws Exception {
		insertreference_idsAt(new SchemaIDRef(value), index);
	}

	public void replacereference_idsAt(SchemaIDRef value, int index) {
		replaceDomChildAt(Attribute, null, "reference-ids", index, value.toString());
	}

	public void replacereference_idsAt(String value, int index) throws Exception {
		replacereference_idsAt(new SchemaIDRef(value), index);
	}

	public static int getanalysis_idsMinCount() {
		return 0;
	}

	public static int getanalysis_idsMaxCount() {
		return 1;
	}

	public int getanalysis_idsCount() {
		return getDomChildCount(Attribute, null, "analysis-ids");
	}

	public boolean hasanalysis_ids() {
		return hasDomChild(Attribute, null, "analysis-ids");
	}

	public SchemaIDRef newanalysis_ids() {
		return new SchemaIDRef();
	}

	public SchemaIDRef getanalysis_idsAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "analysis-ids", index))));
	}

	public org.w3c.dom.Node getStartinganalysis_idsCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "analysis-ids" );
	}

	public org.w3c.dom.Node getAdvancedanalysis_idsCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "analysis-ids", curNode );
	}

	public SchemaIDRef getanalysis_idsValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaIDRef(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaIDRef getanalysis_ids() throws Exception 
 {
		return getanalysis_idsAt(0);
	}

	public void removeanalysis_idsAt(int index) {
		removeDomChildAt(Attribute, null, "analysis-ids", index);
	}

	public void removeanalysis_ids() {
		while (hasanalysis_ids())
			removeanalysis_idsAt(0);
	}

	public void addanalysis_ids(SchemaIDRef value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "analysis-ids", value.toString());
		}
	}

	public void addanalysis_ids(String value) throws Exception {
		addanalysis_ids(new SchemaIDRef(value));
	}

	public void insertanalysis_idsAt(SchemaIDRef value, int index) {
		insertDomChildAt(Attribute, null, "analysis-ids", index, value.toString());
	}

	public void insertanalysis_idsAt(String value, int index) throws Exception {
		insertanalysis_idsAt(new SchemaIDRef(value), index);
	}

	public void replaceanalysis_idsAt(SchemaIDRef value, int index) {
		replaceDomChildAt(Attribute, null, "analysis-ids", index, value.toString());
	}

	public void replaceanalysis_idsAt(String value, int index) throws Exception {
		replaceanalysis_idsAt(new SchemaIDRef(value), index);
	}

	public static int getdatabase_idsMinCount() {
		return 0;
	}

	public static int getdatabase_idsMaxCount() {
		return 1;
	}

	public int getdatabase_idsCount() {
		return getDomChildCount(Attribute, null, "database-ids");
	}

	public boolean hasdatabase_ids() {
		return hasDomChild(Attribute, null, "database-ids");
	}

	public SchemaIDRef newdatabase_ids() {
		return new SchemaIDRef();
	}

	public SchemaIDRef getdatabase_idsAt(int index) throws Exception {
		return new SchemaIDRef(getDomNodeValue(dereference(getDomChildAt(Attribute, null, "database-ids", index))));
	}

	public org.w3c.dom.Node getStartingdatabase_idsCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "database-ids" );
	}

	public org.w3c.dom.Node getAdvanceddatabase_idsCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "database-ids", curNode );
	}

	public SchemaIDRef getdatabase_idsValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new SchemaIDRef(getDomNodeValue( dereference(curNode) ) );
	}

	public SchemaIDRef getdatabase_ids() throws Exception 
 {
		return getdatabase_idsAt(0);
	}

	public void removedatabase_idsAt(int index) {
		removeDomChildAt(Attribute, null, "database-ids", index);
	}

	public void removedatabase_ids() {
		while (hasdatabase_ids())
			removedatabase_idsAt(0);
	}

	public void adddatabase_ids(SchemaIDRef value) {
		if( value.isNull() == false )
		{
			appendDomChild(Attribute, null, "database-ids", value.toString());
		}
	}

	public void adddatabase_ids(String value) throws Exception {
		adddatabase_ids(new SchemaIDRef(value));
	}

	public void insertdatabase_idsAt(SchemaIDRef value, int index) {
		insertDomChildAt(Attribute, null, "database-ids", index, value.toString());
	}

	public void insertdatabase_idsAt(String value, int index) throws Exception {
		insertdatabase_idsAt(new SchemaIDRef(value), index);
	}

	public void replacedatabase_idsAt(SchemaIDRef value, int index) {
		replaceDomChildAt(Attribute, null, "database-ids", index, value.toString());
	}

	public void replacedatabase_idsAt(String value, int index) throws Exception {
		replacedatabase_idsAt(new SchemaIDRef(value), index);
	}

	public static int getatom_typeMinCount() {
		return 1;
	}

	public static int getatom_typeMaxCount() {
		return 1;
	}

	public int getatom_typeCount() {
		return getDomChildCount(Element, null, "atom-type");
	}

	public boolean hasatom_type() {
		return hasDomChild(Element, null, "atom-type");
	}

	public atom_typeType newatom_type() {
		return new atom_typeType(domNode.getOwnerDocument().createElementNS(null, "atom-type"));
	}

	public atom_typeType getatom_typeAt(int index) throws Exception {
		return new atom_typeType(dereference(getDomChildAt(Element, null, "atom-type", index)));
	}

	public org.w3c.dom.Node getStartingatom_typeCursor() throws Exception {
		return getDomFirstChild(Element, null, "atom-type" );
	}

	public org.w3c.dom.Node getAdvancedatom_typeCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "atom-type", curNode );
	}

	public atom_typeType getatom_typeValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new atom_typeType( dereference(curNode) );
	}

	public atom_typeType getatom_type() throws Exception 
 {
		return getatom_typeAt(0);
	}

	public void removeatom_typeAt(int index) {
		removeDomChildAt(Element, null, "atom-type", index);
	}

	public void removeatom_type() {
		while (hasatom_type())
			removeatom_typeAt(0);
	}

	public void addatom_type(atom_typeType value) {
		appendDomElement(null, "atom-type", value);	
	}

	public void insertatom_typeAt(atom_typeType value, int index) {
		insertDomElementAt(null, "atom-type", index, value);
	}

	public void replaceatom_typeAt(atom_typeType value, int index) {
		replaceDomElementAt(null, "atom-type", index, value);
	}

	public static int getcoordinatesMinCount() {
		return 0;
	}

	public static int getcoordinatesMaxCount() {
		return 1;
	}

	public int getcoordinatesCount() {
		return getDomChildCount(Element, null, "coordinates");
	}

	public boolean hascoordinates() {
		return hasDomChild(Element, null, "coordinates");
	}

	public coordinatesType newcoordinates() {
		return new coordinatesType(domNode.getOwnerDocument().createElementNS(null, "coordinates"));
	}

	public coordinatesType getcoordinatesAt(int index) throws Exception {
		return new coordinatesType(dereference(getDomChildAt(Element, null, "coordinates", index)));
	}

	public org.w3c.dom.Node getStartingcoordinatesCursor() throws Exception {
		return getDomFirstChild(Element, null, "coordinates" );
	}

	public org.w3c.dom.Node getAdvancedcoordinatesCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "coordinates", curNode );
	}

	public coordinatesType getcoordinatesValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new coordinatesType( dereference(curNode) );
	}

	public coordinatesType getcoordinates() throws Exception 
 {
		return getcoordinatesAt(0);
	}

	public void removecoordinatesAt(int index) {
		removeDomChildAt(Element, null, "coordinates", index);
	}

	public void removecoordinates() {
		while (hascoordinates())
			removecoordinatesAt(0);
	}

	public void addcoordinates(coordinatesType value) {
		appendDomElement(null, "coordinates", value);	
	}

	public void insertcoordinatesAt(coordinatesType value, int index) {
		insertDomElementAt(null, "coordinates", index, value);
	}

	public void replacecoordinatesAt(coordinatesType value, int index) {
		replaceDomElementAt(null, "coordinates", index, value);
	}

	public static int getoccupancyMinCount() {
		return 0;
	}

	public static int getoccupancyMaxCount() {
		return 1;
	}

	public int getoccupancyCount() {
		return getDomChildCount(Element, null, "occupancy");
	}

	public boolean hasoccupancy() {
		return hasDomChild(Element, null, "occupancy");
	}

	public occupancyType newoccupancy() {
		return new occupancyType(domNode.getOwnerDocument().createElementNS(null, "occupancy"));
	}

	public occupancyType getoccupancyAt(int index) throws Exception {
		return new occupancyType(dereference(getDomChildAt(Element, null, "occupancy", index)));
	}

	public org.w3c.dom.Node getStartingoccupancyCursor() throws Exception {
		return getDomFirstChild(Element, null, "occupancy" );
	}

	public org.w3c.dom.Node getAdvancedoccupancyCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "occupancy", curNode );
	}

	public occupancyType getoccupancyValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new occupancyType( dereference(curNode) );
	}

	public occupancyType getoccupancy() throws Exception 
 {
		return getoccupancyAt(0);
	}

	public void removeoccupancyAt(int index) {
		removeDomChildAt(Element, null, "occupancy", index);
	}

	public void removeoccupancy() {
		while (hasoccupancy())
			removeoccupancyAt(0);
	}

	public void addoccupancy(occupancyType value) {
		appendDomElement(null, "occupancy", value);	
	}

	public void insertoccupancyAt(occupancyType value, int index) {
		insertDomElementAt(null, "occupancy", index, value);
	}

	public void replaceoccupancyAt(occupancyType value, int index) {
		replaceDomElementAt(null, "occupancy", index, value);
	}

	public static int gettemp_factorMinCount() {
		return 0;
	}

	public static int gettemp_factorMaxCount() {
		return 1;
	}

	public int gettemp_factorCount() {
		return getDomChildCount(Element, null, "temp-factor");
	}

	public boolean hastemp_factor() {
		return hasDomChild(Element, null, "temp-factor");
	}

	public temp_factorType newtemp_factor() {
		return new temp_factorType(domNode.getOwnerDocument().createElementNS(null, "temp-factor"));
	}

	public temp_factorType gettemp_factorAt(int index) throws Exception {
		return new temp_factorType(dereference(getDomChildAt(Element, null, "temp-factor", index)));
	}

	public org.w3c.dom.Node getStartingtemp_factorCursor() throws Exception {
		return getDomFirstChild(Element, null, "temp-factor" );
	}

	public org.w3c.dom.Node getAdvancedtemp_factorCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "temp-factor", curNode );
	}

	public temp_factorType gettemp_factorValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new temp_factorType( dereference(curNode) );
	}

	public temp_factorType gettemp_factor() throws Exception 
 {
		return gettemp_factorAt(0);
	}

	public void removetemp_factorAt(int index) {
		removeDomChildAt(Element, null, "temp-factor", index);
	}

	public void removetemp_factor() {
		while (hastemp_factor())
			removetemp_factorAt(0);
	}

	public void addtemp_factor(temp_factorType value) {
		appendDomElement(null, "temp-factor", value);	
	}

	public void inserttemp_factorAt(temp_factorType value, int index) {
		insertDomElementAt(null, "temp-factor", index, value);
	}

	public void replacetemp_factorAt(temp_factorType value, int index) {
		replaceDomElementAt(null, "temp-factor", index, value);
	}

	public static int getseg_idMinCount() {
		return 0;
	}

	public static int getseg_idMaxCount() {
		return 1;
	}

	public int getseg_idCount() {
		return getDomChildCount(Element, null, "seg-id");
	}

	public boolean hasseg_id() {
		return hasDomChild(Element, null, "seg-id");
	}

	public seg_idType newseg_id() {
		return new seg_idType(domNode.getOwnerDocument().createElementNS(null, "seg-id"));
	}

	public seg_idType getseg_idAt(int index) throws Exception {
		return new seg_idType(dereference(getDomChildAt(Element, null, "seg-id", index)));
	}

	public org.w3c.dom.Node getStartingseg_idCursor() throws Exception {
		return getDomFirstChild(Element, null, "seg-id" );
	}

	public org.w3c.dom.Node getAdvancedseg_idCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "seg-id", curNode );
	}

	public seg_idType getseg_idValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new seg_idType( dereference(curNode) );
	}

	public seg_idType getseg_id() throws Exception 
 {
		return getseg_idAt(0);
	}

	public void removeseg_idAt(int index) {
		removeDomChildAt(Element, null, "seg-id", index);
	}

	public void removeseg_id() {
		while (hasseg_id())
			removeseg_idAt(0);
	}

	public void addseg_id(seg_idType value) {
		appendDomElement(null, "seg-id", value);	
	}

	public void insertseg_idAt(seg_idType value, int index) {
		insertDomElementAt(null, "seg-id", index, value);
	}

	public void replaceseg_idAt(seg_idType value, int index) {
		replaceDomElementAt(null, "seg-id", index, value);
	}

	public static int getelementMinCount() {
		return 0;
	}

	public static int getelementMaxCount() {
		return 1;
	}

	public int getelementCount() {
		return getDomChildCount(Element, null, "element");
	}

	public boolean haselement() {
		return hasDomChild(Element, null, "element");
	}

	public elementType newelement() {
		return new elementType(domNode.getOwnerDocument().createElementNS(null, "element"));
	}

	public elementType getelementAt(int index) throws Exception {
		return new elementType(dereference(getDomChildAt(Element, null, "element", index)));
	}

	public org.w3c.dom.Node getStartingelementCursor() throws Exception {
		return getDomFirstChild(Element, null, "element" );
	}

	public org.w3c.dom.Node getAdvancedelementCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "element", curNode );
	}

	public elementType getelementValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new elementType( dereference(curNode) );
	}

	public elementType getelement() throws Exception 
 {
		return getelementAt(0);
	}

	public void removeelementAt(int index) {
		removeDomChildAt(Element, null, "element", index);
	}

	public void removeelement() {
		while (haselement())
			removeelementAt(0);
	}

	public void addelement(elementType value) {
		appendDomElement(null, "element", value);	
	}

	public void insertelementAt(elementType value, int index) {
		insertDomElementAt(null, "element", index, value);
	}

	public void replaceelementAt(elementType value, int index) {
		replaceDomElementAt(null, "element", index, value);
	}

	public static int getchargeMinCount() {
		return 0;
	}

	public static int getchargeMaxCount() {
		return 1;
	}

	public int getchargeCount() {
		return getDomChildCount(Element, null, "charge");
	}

	public boolean hascharge() {
		return hasDomChild(Element, null, "charge");
	}

	public chargeType newcharge() {
		return new chargeType(domNode.getOwnerDocument().createElementNS(null, "charge"));
	}

	public chargeType getchargeAt(int index) throws Exception {
		return new chargeType(dereference(getDomChildAt(Element, null, "charge", index)));
	}

	public org.w3c.dom.Node getStartingchargeCursor() throws Exception {
		return getDomFirstChild(Element, null, "charge" );
	}

	public org.w3c.dom.Node getAdvancedchargeCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "charge", curNode );
	}

	public chargeType getchargeValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new chargeType( dereference(curNode) );
	}

	public chargeType getcharge() throws Exception 
 {
		return getchargeAt(0);
	}

	public void removechargeAt(int index) {
		removeDomChildAt(Element, null, "charge", index);
	}

	public void removecharge() {
		while (hascharge())
			removechargeAt(0);
	}

	public void addcharge(chargeType value) {
		appendDomElement(null, "charge", value);	
	}

	public void insertchargeAt(chargeType value, int index) {
		insertDomElementAt(null, "charge", index, value);
	}

	public void replacechargeAt(chargeType value, int index) {
		replaceDomElementAt(null, "charge", index, value);
	}

	private org.w3c.dom.Node dereference(org.w3c.dom.Node node) {
		return node;
	}
}
